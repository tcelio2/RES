/* Generated By:JavaCC: Do not edit this line. CobolParserTokenManager.java */
package com.res.cobol.parser;
import com.res.common.RESConfig;
import com.res.cobol.syntaxtree.*;
import java.util.Vector;

/** Token Manager. */
public class CobolParserTokenManager implements CobolParserConstants
{
   public static java.util.ArrayList commentLines = new java.util.ArrayList();
   public static Token lastToken = null;
   public void CommonTokenAction(Token t)
   {
      lastToken = t;
      if ( t.specialToken == null )
         return;
      Token tmp_t = t.specialToken;
      while ( tmp_t.specialToken != null )
         tmp_t = tmp_t.specialToken;
      while ( tmp_t != null )
      {
         if ( tmp_t.kind == CobolParserConstants.COMMENT || tmp_t.kind == CobolParserConstants.COMMENT2 )
            commentLines.add(tmp_t);
         tmp_t = tmp_t.next;
      }
   }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1800L) != 0L || (active1 & 0xf000000000000000L) != 0L || (active2 & 0x1fffffffffL) != 0L)
         {
            jjmatchedKind = 639;
            return 41;
         }
         if ((active7 & 0x100000000000L) != 0L)
            return 3;
         if ((active5 & 0x3fffffffffffc00L) != 0L)
         {
            jjmatchedKind = 639;
            return 50;
         }
         if ((active7 & 0x20400000000000L) != 0L)
            return 19;
         if ((active7 & 0xf000000L) != 0L)
         {
            jjmatchedKind = 477;
            return 89;
         }
         if ((active7 & 0x800000000000L) != 0L)
            return 17;
         if ((active0 & 0x2L) != 0L)
            return 90;
         if ((active7 & 0x8080000000000L) != 0L)
            return 0;
         if ((active7 & 0x10000000000L) != 0L)
            return 91;
         if ((active7 & 0x4000000000L) != 0L)
            return 92;
         if ((active10 & 0x80L) != 0L)
         {
            jjmatchedKind = 2;
            return 93;
         }
         if ((active0 & 0x200L) != 0L)
            return 94;
         if ((active7 & 0x200000000000L) != 0L)
            return 95;
         if ((active0 & 0xffffffffffffc000L) != 0L || (active1 & 0xfffffffffffffffL) != 0L || (active2 & 0xffffffe000000000L) != 0L || (active3 & 0xffffffffffffffffL) != 0L || (active4 & 0xffffffffffffffffL) != 0L || (active5 & 0xfc000000000003ffL) != 0L || (active6 & 0xfffffffffL) != 0L)
         {
            jjmatchedKind = 639;
            return 95;
         }
         return -1;
      case 1:
         if ((active0 & 0xffc1bfbfffffd800L) != 0L || (active1 & 0xfff80001ffffffffL) != 0L || (active2 & 0xfbbffbffc000000L) != 0L || (active3 & 0x9fe7ffffffff0002L) != 0L || (active4 & 0xffffffbffffe7fc6L) != 0L || (active5 & 0xfffffffffffff79fL) != 0L || (active6 & 0xfffe7fcffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 1;
            }
            return 95;
         }
         if ((active7 & 0xf000000L) != 0L)
            return 89;
         if ((active2 & 0x3000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 0;
            }
            return 96;
         }
         if ((active0 & 0x3e404000000000L) != 0L || (active1 & 0x7fffe00000000L) != 0L || (active2 & 0xc044004000000000L) != 0L || (active3 & 0x601800000000fffdL) != 0L || (active4 & 0x4000018039L) != 0L || (active5 & 0x860L) != 0L || (active6 & 0x180300L) != 0L)
            return 95;
         if ((active2 & 0x3ffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 1;
            }
            return 40;
         }
         return -1;
      case 2:
         if ((active2 & 0x3000000000000000L) != 0L)
            return 96;
         if ((active2 & 0x7ffffeL) != 0L)
            return 39;
         if ((active0 & 0xfff1bfb13fecd800L) != 0L || (active1 & 0x5ffffffd3fffffffL) != 0L || (active2 & 0x8fbfdfbfbb800001L) != 0L || (active3 & 0x9fe7ffffffef7ffaL) != 0L || (active4 & 0xffffffbffff87ff6L) != 0L || (active5 & 0xffdfffffff7ff59fL) != 0L || (active6 & 0xfffb7fcffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 2;
            }
            return 95;
         }
         if ((active0 & 0xec0130000L) != 0L || (active1 & 0xa0000000c0000000L) != 0L || (active2 & 0x200044000000L) != 0L || (active3 & 0x4010000000100000L) != 0L || (active4 & 0x60000L) != 0L || (active5 & 0x20000000800200L) != 0L || (active6 & 0x400200L) != 0L)
            return 95;
         return -1;
      case 3:
         if ((active3 & 0x6000000000L) != 0L || (active5 & 0xe000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 2;
            }
            return 96;
         }
         if ((active1 & 0x80000000L) != 0L || (active2 & 0x2000000000000000L) != 0L)
            return 96;
         if ((active0 & 0xf3f13fb137eec000L) != 0L || (active1 & 0xdeffffc031fc001L) != 0L || (active2 & 0x8fbf9e3bbbc00001L) != 0L || (active3 & 0x9f83db847aa85ffaL) != 0L || (active4 & 0xffffbf3ffff467f4L) != 0L || (active5 & 0xdcd17fe0077bf19fL) != 0L || (active6 & 0x1c7a7c410L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 3;
            }
            return 95;
         }
         if ((active2 & 0x3ffffcL) != 0L)
            return 38;
         if ((active0 & 0xc00800c08001800L) != 0L || (active1 & 0x521000013ce03ffeL) != 0L || (active2 & 0x418400000000L) != 0L || (active3 & 0x64241b85472000L) != 0L || (active4 & 0x408000081802L) != 0L || (active5 & 0x2300801ff8040400L) != 0L || (active6 & 0xe381038efL) != 0L)
            return 95;
         return -1;
      case 4:
         if ((active0 & 0xb0b127b107e6d000L) != 0L || (active1 & 0xdeffffc029fff81L) != 0L || (active2 & 0x82bf921a82400001L) != 0L || (active3 & 0x9f83ca94628659e2L) != 0L || (active4 & 0xaeffbf21fff467a4L) != 0L || (active5 & 0xc2d15e60077bf11fL) != 0L || (active6 & 0x88403c410L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 4;
            }
            return 95;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x3000007cL) != 0L || (active2 & 0x10000000000L) != 0L || (active3 & 0x200000000L) != 0L || (active4 & 0x1000L) != 0L || (active5 & 0x1fc0000000L) != 0L || (active6 & 0x10000000L) != 0L)
            return 96;
         if ((active1 & 0x80000000L) != 0L || (active2 & 0x20000000003fff7cL) != 0L || (active3 & 0x6000000000L) != 0L || (active5 & 0xe000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 4;
            }
            return 96;
         }
         if ((active2 & 0xc00000000000000L) != 0L || (active3 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 3;
            }
            return 96;
         }
         if ((active2 & 0x80L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 4;
            }
            return 37;
         }
         if ((active0 & 0x4340180830080000L) != 0L || (active1 & 0x1000000L) != 0L || (active2 & 0x1000c2139800000L) != 0L || (active3 & 0x40010118280618L) != 0L || (active4 & 0x5100001e00000050L) != 0L || (active5 & 0x1c00218000000080L) != 0L || (active6 & 0x543a40080L) != 0L)
            return 95;
         return -1;
      case 5:
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0xb0000000L) != 0L || (active2 & 0x2c000100003ffefcL) != 0L || (active3 & 0x106200000000L) != 0L || (active4 & 0x1000L) != 0L || (active5 & 0xe001fc0000000L) != 0L || (active6 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 5;
            }
            return 96;
         }
         if ((active1 & 0x7cL) != 0L || (active2 & 0x100L) != 0L || (active3 & 0x400L) != 0L)
            return 96;
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x1fc00000000L) != 0L || (active5 & 0x6000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 4;
            }
            return 96;
         }
         if ((active0 & 0x1030021127e61000L) != 0L || (active1 & 0xd6bee00029fff81L) != 0L || (active2 & 0x828b901282000000L) != 0L || (active3 & 0x8302ca14008659f2L) != 0L || (active4 & 0x20ffa3017ff46724L) != 0L || (active5 & 0xd2d01e000079e114L) != 0L || (active6 & 0x84020410L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 5;
            }
            return 95;
         }
         if ((active0 & 0xa00125a00000c000L) != 0L || (active1 & 0x84100000000000L) != 0L || (active2 & 0x34020810400001L) != 0L || (active3 & 0x1c81008072000000L) != 0L || (active4 & 0x8e001c3080000080L) != 0L || (active5 & 0x141600102100bL) != 0L || (active6 & 0x80201c000L) != 0L)
            return 95;
         return -1;
      case 6:
         if ((active1 & 0x80000000L) != 0L || (active2 & 0x400L) != 0L || (active4 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 5;
            }
            return 96;
         }
         if ((active2 & 0x4L) != 0L || (active3 & 0x800000040000000L) != 0L || (active5 & 0x4000000001L) != 0L)
            return 96;
         if ((active0 & 0x1030021127e40000L) != 0L || (active1 & 0x503ee000292df81L) != 0L || (active2 & 0x8003801282000000L) != 0L || (active3 & 0x2c01000021122L) != 0L || (active4 & 0x48ba80107e02124L) != 0L || (active5 & 0xd2d01e0000784006L) != 0L || (active6 & 0x80038400L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 6;
            }
            return 95;
         }
         if ((active0 & 0x21000L) != 0L || (active1 & 0x8680000000d2000L) != 0L || (active2 & 0x288100000000000L) != 0L || (active3 & 0x83000a04008448d0L) != 0L || (active4 & 0x2874130078144400L) != 0L || (active5 & 0x1a110L) != 0L || (active6 & 0x4000010L) != 0L)
            return 95;
         if ((active0 & 0x880000000000000L) != 0L || (active1 & 0x1fc30000000L) != 0L || (active2 & 0x2c000100003ffaf8L) != 0L || (active3 & 0x106200000400L) != 0L || (active4 & 0x1000L) != 0L || (active5 & 0xe001fc6000000L) != 0L || (active6 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 6;
            }
            return 96;
         }
         return -1;
      case 7:
         if ((active0 & 0x1030021126040000L) != 0L || (active1 & 0x403ea0000905f81L) != 0L || (active2 & 0x8000000202000000L) != 0L || (active3 & 0x21080L) != 0L || (active4 & 0x489a80107000020L) != 0L || (active5 & 0x8200000000400000L) != 0L || (active6 & 0x18000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 7;
            }
            return 95;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x40000000000000L) != 0L || (active2 & 0x1008L) != 0L || (active3 & 0x200000000000000L) != 0L || (active4 & 0x20060000000L) != 0L || (active5 & 0x2010000L) != 0L)
            return 96;
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x1fcb0000000L) != 0L || (active2 & 0x2c000100003feef0L) != 0L || (active3 & 0x800106240000400L) != 0L || (active4 & 0x1200L) != 0L || (active5 & 0xe005fc4000001L) != 0L || (active6 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 7;
            }
            return 96;
         }
         if ((active0 & 0x1e00000L) != 0L || (active1 & 0x1000000020a8000L) != 0L || (active2 & 0x3801080000000L) != 0L || (active3 & 0x2c01000000122L) != 0L || (active4 & 0x2000000e02104L) != 0L || (active5 & 0x50d01c0000384006L) != 0L || (active6 & 0x20400L) != 0L)
            return 95;
         if ((active1 & 0x40000000000L) != 0L || (active5 & 0x20000000000L) != 0L || (active6 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 6;
            }
            return 96;
         }
         return -1;
      case 8:
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x5fcb0000000L) != 0L || (active2 & 0x2c000100001deef0L) != 0L || (active3 & 0xa00100240000400L) != 0L || (active4 & 0x20060001200L) != 0L || (active5 & 0xe025fc0010001L) != 0L || (active6 & 0x90000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 8;
            }
            return 96;
         }
         if ((active1 & 0x40000000000000L) != 0L || (active2 & 0x1000000220000L) != 0L || (active3 & 0x6000000000L) != 0L || (active5 & 0x180004000000L) != 0L)
            return 96;
         if ((active0 & 0x107c00000L) != 0L || (active1 & 0x403080000905f81L) != 0L || (active2 & 0x8000000002000000L) != 0L || (active3 & 0x1080L) != 0L || (active4 & 0x20L) != 0L || (active5 & 0x200000000400000L) != 0L || (active6 & 0x18000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 8;
            }
            return 95;
         }
         if ((active0 & 0x1030021020040000L) != 0L || (active1 & 0xe20000000000L) != 0L || (active2 & 0x200000000L) != 0L || (active3 & 0x20000L) != 0L || (active4 & 0x489a80107000000L) != 0L || (active5 & 0x8000000000000000L) != 0L)
            return 95;
         return -1;
      case 9:
         if ((active1 & 0x1c000000000L) != 0L || (active5 & 0xe000980000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 8;
            }
            return 96;
         }
         if ((active1 & 0x3800000000L) != 0L || (active2 & 0xc00000000054060L) != 0L || (active3 & 0x4000000000L) != 0L || (active4 & 0x22000000L) != 0L || (active5 & 0x180200000000L) != 0L)
            return 96;
         if ((active0 & 0x106000000L) != 0L || (active1 & 0x2080000805f81L) != 0L || (active2 & 0x8000000002000000L) != 0L || (active3 & 0x1000L) != 0L || (active4 & 0x20L) != 0L || (active5 & 0x200000000000000L) != 0L || (active6 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 9;
            }
            return 95;
         }
         if ((active0 & 0x20000001c00000L) != 0L || (active1 & 0x401000000100000L) != 0L || (active3 & 0x80L) != 0L || (active4 & 0x1000004000000L) != 0L || (active5 & 0x400000L) != 0L || (active6 & 0x8000L) != 0L)
            return 95;
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x404b0000000L) != 0L || (active2 & 0x200101000018ae90L) != 0L || (active3 & 0xa00100240000400L) != 0L || (active4 & 0x20040001200L) != 0L || (active5 & 0x25440010001L) != 0L || (active6 & 0x90000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 9;
            }
            return 96;
         }
         return -1;
      case 10:
         if ((active0 & 0x6000000L) != 0L || (active1 & 0x80000805f81L) != 0L || (active2 & 0x8000000000000000L) != 0L || (active3 & 0x1000L) != 0L || (active4 & 0x20L) != 0L || (active5 & 0x200000000000000L) != 0L || (active6 & 0x10000L) != 0L)
         {
            jjmatchedKind = 639;
            jjmatchedPos = 10;
            return 95;
         }
         if ((active0 & 0x80000001800000L) != 0L || (active1 & 0x1c080000000L) != 0L || (active2 & 0x280000000000ac10L) != 0L || (active3 & 0x100000000000L) != 0L || (active5 & 0xe001000000001L) != 0L)
            return 96;
         if ((active1 & 0x40430000000L) != 0L || (active2 & 0x1010000180280L) != 0L || (active3 & 0xa00000240000400L) != 0L || (active4 & 0x20042001200L) != 0L || (active5 & 0x24dc0010000L) != 0L || (active6 & 0x90000000L) != 0L)
         {
            jjmatchedKind = 639;
            jjmatchedPos = 10;
            return 96;
         }
         if ((active0 & 0x100000000L) != 0L || (active1 & 0x2000000000000L) != 0L || (active2 & 0x2000000L) != 0L)
            return 95;
         return -1;
      case 11:
         if ((active1 & 0x805f81L) != 0L || (active2 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 11;
            }
            return 95;
         }
         if ((active1 & 0x20000000L) != 0L || (active2 & 0x10000180280L) != 0L || (active3 & 0x200000400L) != 0L || (active4 & 0x1000L) != 0L || (active5 & 0x440000000L) != 0L)
            return 96;
         if ((active0 & 0x1800000L) != 0L || (active1 & 0x40410000000L) != 0L || (active2 & 0x1000000000000L) != 0L || (active3 & 0xa00000040000000L) != 0L || (active4 & 0x20042000200L) != 0L || (active5 & 0x24980010000L) != 0L || (active6 & 0x90000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 11;
            }
            return 96;
         }
         if ((active0 & 0x6000000L) != 0L || (active1 & 0x80000000000L) != 0L || (active3 & 0x1000L) != 0L || (active4 & 0x20L) != 0L || (active5 & 0x200000000000000L) != 0L || (active6 & 0x10000L) != 0L)
            return 95;
         return -1;
      case 12:
         if ((active0 & 0x1800000L) != 0L || (active1 & 0x400000000L) != 0L || (active2 & 0x1000000000000L) != 0L || (active3 & 0xa00000040000000L) != 0L || (active4 & 0x20042000200L) != 0L || (active5 & 0x4980000000L) != 0L || (active6 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 12;
            }
            return 96;
         }
         if ((active0 & 0x4000000L) != 0L || (active1 & 0x40010000000L) != 0L || (active5 & 0x20000010000L) != 0L || (active6 & 0x10000000L) != 0L)
            return 96;
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 639;
               jjmatchedPos = 12;
            }
            return 95;
         }
         if ((active1 & 0x805f81L) != 0L)
            return 95;
         return -1;
      case 13:
         if ((active1 & 0x400001f00L) != 0L || (active3 & 0x200000040000000L) != 0L || (active4 & 0x40000200L) != 0L || (active5 & 0x980000000L) != 0L)
            return 96;
         if ((active0 & 0x5800000L) != 0L || (active2 & 0x1000000000000L) != 0L || (active3 & 0x800000000000000L) != 0L || (active4 & 0x20002000000L) != 0L || (active5 & 0x4000000000L) != 0L || (active6 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 639;
            jjmatchedPos = 13;
            return 96;
         }
         if ((active2 & 0x8000000000000000L) != 0L)
            return 95;
         return -1;
      case 14:
         if ((active1 & 0x1f00L) != 0L || (active3 & 0x800000000000000L) != 0L || (active4 & 0x20000000000L) != 0L || (active5 & 0x4000000000L) != 0L || (active6 & 0x80000000L) != 0L)
            return 96;
         if ((active0 & 0x5800000L) != 0L || (active2 & 0x1000000000000L) != 0L || (active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 639;
            jjmatchedPos = 14;
            return 96;
         }
         return -1;
      case 15:
         if ((active0 & 0x4000000L) != 0L || (active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 639;
            jjmatchedPos = 15;
            return 96;
         }
         if ((active0 & 0x1800000L) != 0L || (active2 & 0x1000000000000L) != 0L)
            return 96;
         return -1;
      case 16:
         if ((active4 & 0x2000000L) != 0L)
            return 96;
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 639;
            jjmatchedPos = 16;
            return 96;
         }
         return -1;
      case 17:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 639;
            jjmatchedPos = 17;
            return 96;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9, long active10)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9, active10), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_0(0, 1, 90);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x10000000000000L, 0x0L);
      case 34:
         return jjStartNfaWithStates_0(0, 486, 92);
      case 35:
         return jjStopAtPos(0, 653);
      case 36:
         return jjStartNfaWithStates_0(0, 493, 95);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1e00L);
      case 39:
         return jjStartNfaWithStates_0(0, 488, 91);
      case 40:
         return jjStopAtPos(0, 480);
      case 41:
         return jjStopAtPos(0, 483);
      case 42:
         jjmatchedKind = 491;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000000L, 0x0L);
      case 43:
         return jjStopAtPos(0, 489);
      case 44:
         return jjStopAtPos(0, 479);
      case 45:
         return jjStopAtPos(0, 481);
      case 46:
         return jjStartNfaWithStates_0(0, 9, 94);
      case 47:
         return jjStartNfaWithStates_0(0, 492, 3);
      case 54:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1000000L, 0x0L);
      case 55:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x6000000L, 0x0L);
      case 56:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 484);
      case 59:
         return jjStartNfaWithStates_0(0, 2, 93);
      case 60:
         jjmatchedKind = 494;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20000000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 496);
      case 62:
         return jjStartNfaWithStates_0(0, 495, 17);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xffffffc000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7f0000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffff800000000000L, 0x3ffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffffffffc000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1800L, 0xf000000000000000L, 0x1fffffffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ffe000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fe000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xe00000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf000000000000000L, 0xffffL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x70000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x180000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fffe00000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xff8000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3ff000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xfc00000000000000L, 0x1ffL, 0x0L, 0x0L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3fffffe00L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1c00000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xffffffe000000000L, 0x3ffL, 0x0L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x3fffffffffffc00L, 0x0L, 0x0L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xfc00000000000000L, 0x1fffL, 0x0L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xffe000L, 0x0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1f8000000L, 0x0L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xe00000000L, 0x0L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active10)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7, 0L, 0L, active10);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active7 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 499);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x3000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 54:
         if ((active7 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 472, 89);
         break;
      case 55:
         if ((active7 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 473, 89);
         break;
      case 56:
         if ((active7 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 474, 89);
         else if ((active7 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 475, 89);
         break;
      case 61:
         if ((active7 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 500);
         break;
      case 62:
         if ((active7 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 501);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0xfc000000L, active2, 0x2000000000L, active3, 0x1000000680000L, active4, 0x2000003e00L, active5, 0x3c00000000000400L, active6, 0x7000000L, active7, 0L, active10, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0xc00000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000L, active1, 0L, active2, 0L, active3, 0x1000000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 95);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 166, 95);
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 294, 95);
         else if ((active5 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 331, 95);
         return jjMoveStringLiteralDfa2_0(active0, 0x70000L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 69:
      case 101:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L, active1, 0x7fffc00000000L, active2, 0x20a000000000000L, active3, 0x6038007900000L, active4, 0xffffff8000004000L, active5, 0xc000000000fff01fL, active6, 0xe00000003L, active7, 0L, active10, 0L);
      case 70:
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 95);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 192, 95);
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 271, 95);
         else if ((active5 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 325, 95);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L, active5, 0L, active6, 0L, active7, 0L, active10, 0x200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 72:
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 272, 95);
         else if ((active5 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 326, 95);
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x7000000L, active6, 0x1800003cL, active7, 0L, active10, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x1f8000000000000L, active2, 0xc100f8000000000L, active3, 0x7f8000000L, active4, 0x60000L, active5, 0x18000080L, active6, 0x200000c0L, active7, 0L, active10, 0x800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c018003ff00000L, active1, 0x4000000000000000L, active2, 0x20000000000000L, active3, 0L, active4, 0x80000L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0x8000000000000002L, active4, 0L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 78:
      case 110:
         if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 256, 95);
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000L, active1, 0L, active2, 0x3ffffffL, active3, 0x7ff8L, active4, 0L, active5, 0L, active6, 0x7e000L, active7, 0L, active10, 0x400L);
      case 79:
      case 111:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x100L) != 0L)
         {
            jjmatchedKind = 392;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xfe00200000000000L, active1, 0x200000001ffffffL, active2, 0x4300004000000L, active3, 0x103c7800000000L, active4, 0x700000L, active5, 0x7fe0000100L, active6, 0xc0000200L, active7, 0L, active10, 0L);
      case 80:
      case 112:
         if ((active6 & 0x80000L) != 0L)
         {
            jjmatchedKind = 403;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x6L, active5, 0x38000000000L, active6, 0x100000L, active7, 0L, active10, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x18000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 82:
      case 114:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe00000000L, active1, 0L, active2, 0x180400020000000L, active3, 0L, active4, 0x1ff800030L, active5, 0L, active6, 0x100000c00L, active7, 0L, active10, 0x1000L);
      case 83:
      case 115:
         if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 207, 95);
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0L, active2, 0x40000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0xe00000L, active7, 0L, active10, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 95);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L, active5, 0x1fc0000000000L, active6, 0L, active7, 0L, active10, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x400000002000000L, active2, 0x1800000000000L, active3, 0x3e0c00000070000L, active4, 0x1e00000080L, active5, 0x7e000000000200L, active6, 0L, active7, 0L, active10, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x180000000L, active3, 0L, active4, 0x100L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800L, active1, 0L, active2, 0x1e00000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active7, 0L, active10, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 95);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x380000000000000L, active6, 0x1000L, active7, 0L, active10, 0L);
      case 124:
         if ((active10 & 0x100L) != 0L)
            return jjStopAtPos(1, 648);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6, active7, 0L, 0L, active10);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old7, long active7, long old10, long active10)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active7 &= old7) | (active10 &= old10)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6, old7, 0L, 0L, old10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x70080000000000L, active1, 0L, active2, 0x200000080000001L, active3, 0x800000L, active4, 0x8000000000L, active5, 0x7d8001001000L, active6, 0x200404L, active10, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x3fc00000000L, active2, 0x4000000000000L, active3, 0x200000L, active4, 0L, active5, 0x41e000000000000L, active6, 0L, active10, 0L);
      case 67:
      case 99:
         if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000c000L, active1, 0x10000c0100000000L, active2, 0x200000000L, active3, 0x1000001800000000L, active4, 0x1f0000040200L, active5, 0x6000L, active6, 0L, active10, 0L);
      case 68:
      case 100:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 95);
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000020000L, active1, 0L, active2, 0x7ffffcL, active3, 0xc0000000038L, active4, 0x200000000410L, active5, 0L, active6, 0L, active10, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 406, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0xc00001800L, active1, 0L, active2, 0x8080000100000000L, active3, 0L, active4, 0x400400000102L, active5, 0x20000000000L, active6, 0x18000008L, active10, 0L);
      case 70:
      case 102:
         if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 254, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0x1000000L, active4, 0x1800000000000L, active5, 0L, active6, 0L, active10, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L, active2, 0xc00000000000000L, active3, 0x2000000000000L, active4, 0x1820L, active5, 0x8018080L, active6, 0L, active10, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L, active5, 0L, active6, 0L, active10, 0L);
      case 73:
      case 105:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 125, 95);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 127, 95);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 158, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0x80000000000001c0L, active4, 0x900000L, active5, 0x6000000L, active6, 0x100802000L, active10, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc00000000000000L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 76:
      case 108:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0x3000800000000000L, active1, 0x700000000000L, active2, 0x3a000000000L, active3, 0x60c00000000000L, active4, 0x6000000000000L, active5, 0x1800000000020000L, active6, 0x301c000L, active10, 0L);
      case 77:
      case 109:
         if ((active5 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 373, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000000L, active1, 0x3fffL, active2, 0L, active3, 0x380008018000000L, active4, 0x18000000000000L, active5, 0x80000000000400L, active6, 0xc0L, active10, 0L);
      case 78:
      case 110:
         if ((active5 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 329, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0x1040000000000L, active1, 0x8000000001fc000L, active2, 0xb840000000000L, active3, 0x7e2080000L, active4, 0x20002000000000L, active5, 0x3000000000c0000L, active6, 0L, active10, 0L);
      case 79:
      case 111:
         if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x180100000000000L, active1, 0L, active2, 0x2120500000000000L, active3, 0L, active4, 0x19ff000000L, active5, 0x800000000000L, active6, 0x100000L, active10, 0x1600L);
      case 80:
      case 112:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 154, 95);
         else if ((active6 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 393, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0x107e00000L, active1, 0x400800000200000L, active2, 0L, active3, 0x602L, active4, 0xfc0000000000000L, active5, 0x2040000000100000L, active6, 0x1000L, active10, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x600000L, active6, 0L, active10, 0L);
      case 82:
      case 114:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 173, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2c00000L, active2, 0x80020000000L, active3, 0x110000000000L, active4, 0x1000000200004000L, active5, 0xc001001fe0000000L, active6, 0xec4000030L, active10, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2008000000L, active1, 0x407b000000000000L, active2, 0L, active3, 0x20004471800L, active4, 0x6000000000602000L, active5, 0L, active6, 0x20001L, active10, 0x800L);
      case 84:
      case 116:
         if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 244, 95);
         else if ((active5 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 343, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0x208030080000L, active1, 0x400003c000000L, active2, 0x1801800000L, active3, 0x1000000002000L, active4, 0x8000000000000084L, active5, 0x3L, active6, 0x20040000L, active10, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0x18000000L, active3, 0L, active4, 0x80000L, active5, 0x6000000100L, active6, 0x800L, active10, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x180000000000000L, active2, 0x10000002000000L, active3, 0x200000004000L, active4, 0L, active5, 0x4L, active6, 0L, active10, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0x6000000000L, active4, 0L, active5, 0x18L, active6, 0L, active10, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0L, active6, 0x2L, active10, 0L);
      case 89:
      case 121:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 95);
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 212, 95);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000L, active6, 0L, active10, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old10, long active10)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active10 &= old10)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, old10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L, active2, 0x20000000003ffffcL, active3, 0x6000000000L, active4, 0L, active5, 0xe000000000000L, active6, 0L, active10, 0L);
      case 65:
      case 97:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0x40800040000L, active1, 0x80c000000000000L, active2, 0x84040018000000L, active3, 0x2000060004000L, active4, 0x2a000000000020L, active5, 0x100000L, active6, 0L, active10, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000000001L, active3, 0x80000000000000L, active4, 0L, active5, 0x80000000000000L, active6, 0L, active10, 0L);
      case 67:
      case 99:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 376;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x81100000001000L, active1, 0x1000000000000L, active2, 0x1800000000000L, active3, 0L, active4, 0xf000000L, active5, 0x200038000000000L, active6, 0L, active10, 0L);
      case 68:
      case 100:
         if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 295, 95);
         else if ((active5 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 338, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0x800000L, active4, 0x2000000400L, active5, 0L, active6, 0x40000000L, active10, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 126, 95);
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 234, 95);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 237, 95);
         else if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 330, 95);
         else if ((active5 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 348, 95);
         else if ((active5 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 381, 95);
         else if ((active6 & 0x40L) != 0L)
         {
            jjmatchedKind = 390;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 395, 95);
         else if ((active6 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 396, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000103008c000L, active1, 0x900030000000L, active2, 0xa011a00800000L, active3, 0xf00100300200018L, active4, 0x6005a30000001050L, active5, 0x20004L, active6, 0x80L, active10, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0x4000L, active5, 0x6000000L, active6, 0L, active10, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10002000000L, active4, 0x270000000L, active5, 0L, active6, 0x200000L, active10, 0L);
      case 72:
      case 104:
         if ((active6 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 413, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0x8007e00000L, active1, 0L, active2, 0xc00000000000000L, active3, 0L, active4, 0L, active5, 0x80L, active6, 0L, active10, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x22000000000L, active1, 0x180640000000000L, active2, 0x10000002400000L, active3, 0x1000018000020L, active4, 0x600004L, active5, 0x1000000000008L, active6, 0x40400L, active10, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 75:
      case 107:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 95);
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1400000000L, active4, 0x200L, active5, 0L, active6, 0x80000000L, active10, 0L);
      case 76:
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 95);
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 302, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x400080000000000L, active2, 0x20080000000L, active3, 0x40000000000002L, active4, 0x1c0000000000000L, active5, 0x1c00000000000000L, active6, 0L, active10, 0L);
      case 77:
      case 109:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 174, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000000L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0x80000000L, active5, 0xc000000000018000L, active6, 0L, active10, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 95);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 257, 95);
         else if ((active5 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 347, 95);
         else if ((active6 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 386, 95);
         else if ((active6 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 387, 95);
         else if ((active6 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 404, 95);
         else if ((active6 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 411;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x1000000L, active2, 0x8000000000000000L, active3, 0L, active4, 0x900000L, active5, 0x1c0000000100L, active6, 0x10800000L, active10, 0L);
      case 79:
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 95);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 205, 95);
         else if ((active6 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 417;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200010000000000L, active1, 0L, active2, 0x20000000L, active3, 0x8000000000L, active4, 0xe101c0000000000L, active5, 0L, active6, 0xc0001c010L, active10, 0x800L);
      case 80:
      case 112:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 367, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60000000003ffcL, active2, 0L, active3, 0x800L, active4, 0x80L, active5, 0x40000000000000L, active6, 0L, active10, 0L);
      case 82:
      case 114:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x30000100020000L, active1, 0x2800000L, active2, 0x101000000L, active3, 0L, active4, 0x100L, active5, 0x206001001010L, active6, 0L, active10, 0L);
      case 83:
      case 115:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 95);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 95);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 218, 95);
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 275, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0x140000000000000L, active1, 0L, active2, 0x82000000000L, active3, 0x20000000000L, active4, 0x2000L, active5, 0L, active6, 0L, active10, 0L);
      case 84:
      case 116:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 162, 95);
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 214, 95);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 216, 95);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 242, 95);
         else if ((active5 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 3;
         }
         else if ((active6 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 384, 95);
         else if ((active6 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 385, 95);
         else if ((active6 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 397, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x20000000f8000L, active2, 0x100000000000L, active3, 0x8000c000000611c0L, active4, 0x1900040000L, active5, 0x10401fc0082000L, active6, 0x100020000L, active10, 0x400L);
      case 85:
      case 117:
         if ((active6 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 389, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x3fc00000000L, active2, 0x100000000000000L, active3, 0x1000080000000600L, active4, 0x9000000400000000L, active5, 0x604003L, active6, 0x3000000L, active10, 0x200L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0x1000L);
      case 89:
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x4000000L, active10, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old10, long active10)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active10 &= old10)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, old10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x3000007cL, active2, 0xc00010000000000L, active3, 0x100200000000L, active4, 0x1000L, active5, 0x1fc0000000L, active6, 0x10000000L, active10, 0L);
      case 65:
      case 97:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0x1030000007e00000L, active1, 0x80000008000L, active2, 0x20000000000004L, active3, 0x20400001000L, active4, 0xc4000000000000L, active5, 0L, active6, 0L, active10, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2004000000000018L, active3, 0xc00000000000020L, active4, 0L, active5, 0x6000021000L, active6, 0x1c000L, active10, 0x1000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000000L, active2, 0x60L, active3, 0L, active4, 0L, active5, 0x1c0000000100L, active6, 0L, active10, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 95);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 165, 95);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 232, 95);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 289, 95);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 290, 95);
         else if ((active4 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 359;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 378, 95);
         else if ((active6 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 405, 95);
         else if ((active6 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 408;
            jjmatchedPos = 4;
         }
         else if ((active6 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 416, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000020000L, active1, 0x1000002910000L, active2, 0x20000000080L, active3, 0x80000000000800L, active4, 0x110f000200L, active5, 0x10001698000L, active6, 0x802000000L, active10, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0x200000000100L, active5, 0L, active6, 0L, active10, 0x400L);
      case 71:
      case 103:
         if ((active6 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 407, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x3fc00000000L, active2, 0L, active3, 0x60000000L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000000000L, active6, 0L, active10, 0L);
      case 73:
      case 105:
         if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 211, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x406000000024000L, active2, 0x200100000000100L, active3, 0xc000008601c2L, active4, 0x8030000000400L, active5, 0xc000020000002010L, active6, 0x84000000L, active10, 0L);
      case 75:
      case 107:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 95);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 95);
         else if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 170, 95);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 213, 95);
         else if ((active6 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 402, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x60000000000000L, active2, 0x10000001L, active3, 0x80000004000L, active4, 0L, active5, 0L, active6, 0x400L, active10, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x800640000000000L, active2, 0x200L, active3, 0L, active4, 0x20000000000000L, active5, 0L, active6, 0L, active10, 0L);
      case 78:
      case 110:
         if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 316, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0x21000040000L, active1, 0x800000000000L, active2, 0x10000800400000L, active3, 0L, active4, 0x20L, active5, 0x1000000000008L, active6, 0L, active10, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000208100000000L, active1, 0x80000000L, active2, 0x400L, active3, 0L, active4, 0x2000004004L, active5, 0x80000000000000L, active6, 0L, active10, 0L);
      case 80:
      case 112:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 184, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L, active2, 0x200000800L, active3, 0L, active4, 0x80000000L, active5, 0L, active6, 0L, active10, 0x800L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0xe000000000000L, active6, 0L, active10, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 95);
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 95);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 95);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 260, 95);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 262, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0x50020000000L, active1, 0xc0000L, active2, 0xa00100200f000L, active3, 0x1300008000000000L, active4, 0xae019c0070000000L, active5, 0x50000000104007L, active6, 0x20000L, active10, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 95);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 95);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 224, 95);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 246, 95);
         else if ((active6 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 391, 95);
         else if ((active6 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 414, 95);
         else if ((active6 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 418, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0x100000000000000L, active2, 0xf0000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 95);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 171, 95);
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 318, 95);
         else if ((active5 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 327, 95);
         else if ((active5 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 365, 95);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L, active2, 0x8081800000000000L, active3, 0x8002000012000400L, active4, 0x2000000f00000L, active5, 0x6000000L, active6, 0L, active10, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x3f81L, active2, 0x80100000L, active3, 0L, active4, 0x40080L, active5, 0x400000000000L, active6, 0x10L, active10, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1006000000000L, active4, 0x10000000000000L, active5, 0L, active6, 0L, active10, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0x2000L, active5, 0L, active6, 0L, active10, 0L);
      case 88:
      case 120:
         if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 89:
      case 121:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 152, 95);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 95);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 312, 95);
         else if ((active5 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 379;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000000L, active6, 0L, active10, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old10, long active10)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active10 &= old10)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, old10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x1fc00000000L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0x6000000L, active6, 0L, active10, 0L);
      case 49:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 96);
         break;
      case 50:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 96);
         break;
      case 51:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 96);
         break;
      case 52:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 96);
         break;
      case 53:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 96);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x60040000000000L, active2, 0x2000080000008L, active3, 0x60000001e0L, active4, 0x10000070000000L, active5, 0x101e0000100000L, active6, 0L, active10, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x1e00000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000040000L, active1, 0x400000010000000L, active2, 0x10000000000L, active3, 0x200000802L, active4, 0xc0000100001000L, active5, 0xc0000000L, active6, 0x10000000L, active10, 0L);
      case 68:
      case 100:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 163, 95);
         else if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 323, 95);
         else if ((active5 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 344, 95);
         else if ((active10 & 0x200L) != 0L)
            return jjStopAtPos(5, 649);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x800000000000L, active2, 0x4L, active3, 0L, active4, 0x180007000200L, active5, 0L, active6, 0L, active10, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 95);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 95);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 95);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 95);
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 240, 95);
         else if ((active5 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000000001f820L, active3, 0x8000080040000010L, active4, 0x21800008100000L, active5, 0x40004000000100L, active6, 0L, active10, 0x800L);
      case 70:
      case 102:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 136, 96);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 150, 95);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000L, active2, 0x400L, active3, 0x60000L, active4, 0L, active5, 0x100000000L, active6, 0L, active10, 0L);
      case 71:
      case 103:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 180, 95);
         else if ((active5 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 368, 95);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000004000L, active2, 0L, active3, 0x20400000000L, active4, 0L, active5, 0L, active6, 0x10L, active10, 0L);
      case 72:
      case 104:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 217, 95);
         else if ((active5 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 332, 95);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x900600000008000L, active2, 0x8009800000000040L, active3, 0x302001000004000L, active4, 0x2200000e00020L, active5, 0x1000000000004000L, active6, 0x20400L, active10, 0L);
      case 75:
      case 107:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 178, 95);
         else if ((active6 & 0x4000L) != 0L)
         {
            jjmatchedKind = 398;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x18000L, active10, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 95);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 95);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 181, 95);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0x100000001000L, active4, 0x100L, active5, 0x80000000000000L, active6, 0L, active10, 0L);
      case 77:
      case 109:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 95);
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 293, 95);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0xe00000000L, active6, 0L, active10, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 95);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 95);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 95);
         else if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20026000000L, active1, 0x3000002030001L, active2, 0x200101000100000L, active3, 0x800000L, active4, 0x8000000000404L, active5, 0xc000000000698003L, active6, 0x84000000L, active10, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc0000L, active2, 0x2000000002000010L, active3, 0L, active4, 0x2000L, active5, 0x2000L, active6, 0L, active10, 0x1400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc00000000000L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 95);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 169, 95);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 247, 95);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000100000L, active2, 0x200000L, active3, 0L, active4, 0x44000L, active5, 0x200001000000000L, active6, 0L, active10, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 95);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 156, 95);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 220, 95);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 252, 95);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 292, 95);
         else if ((active5 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 360, 95);
         else if ((active5 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 366, 95);
         else if ((active6 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 409, 95);
         else if ((active6 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 419, 95);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000020000L, active1, 0x800000L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0x4L, active6, 0L, active10, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 95);
         else if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 263, 95);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 287, 95);
         else if ((active4 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 337, 95);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000001000L, active1, 0x3f80L, active2, 0x200060000L, active3, 0x800000000000000L, active4, 0xc00000000000000L, active5, 0x10L, active6, 0L, active10, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80200L, active3, 0L, active4, 0L, active5, 0xe000000000000L, active6, 0L, active10, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc00000000000080L, active3, 0L, active4, 0x2000030000000000L, active5, 0L, active6, 0L, active10, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 95);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 231, 95);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old10, long active10)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active10 &= old10)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, old10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L, active2, 0x400L, active3, 0x800000040000000L, active4, 0x200L, active5, 0x4000000001L, active6, 0L, active10, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0x402080000001f80L, active2, 0xc00001000031080L, active3, 0x100000000000L, active4, 0x4L, active5, 0xc000000000000000L, active6, 0L, active10, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 67:
      case 99:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 123, 95);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 179, 95);
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x402000000L, active2, 0x2000L, active3, 0x200000000000000L, active4, 0L, active5, 0x10000000280000L, active6, 0L, active10, 0L);
      case 68:
      case 100:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 130, 96);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 196, 95);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 206, 95);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 255, 95);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 283, 95);
         else if ((active5 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 328, 95);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L, active4, 0x8000000000000L, active5, 0L, active6, 0L, active10, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 95);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 95);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 115, 95);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 226, 95);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 233, 95);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 274, 95);
         else if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 306, 95);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 310, 95);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 317, 95);
         else if ((active5 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 324, 95);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000001e00000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000000L, active5, 0xe001600000006L, active6, 0L, active10, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x8000L, active10, 0L);
      case 71:
      case 103:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 172, 95);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 185, 95);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 215, 95);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 266, 95);
         else if ((active6 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 410, 95);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000000L, active10, 0L);
      case 72:
      case 104:
         if ((active6 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 388, 95);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000021100040000L, active1, 0x820800000001L, active2, 0x200200000L, active3, 0x20002L, active4, 0x480080000000000L, active5, 0x80000102000000L, active6, 0L, active10, 0L);
      case 76:
      case 108:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 308, 95);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x41000080000L, active2, 0x228L, active3, 0xc07000001080L, active4, 0L, active5, 0x20000000000L, active6, 0L, active10, 0L);
      case 77:
      case 109:
         if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 270, 95);
         else if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0x60000000L, active5, 0L, active6, 0L, active10, 0L);
      case 78:
      case 110:
         if ((active5 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 333, 95);
         else if ((active10 & 0x800L) != 0L)
            return jjStopAtPos(6, 651);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000008000L, active2, 0x2000000002000000L, active3, 0L, active4, 0x1a00000800000L, active5, 0x1000000000000000L, active6, 0x20400L, active10, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000010000000L, active2, 0x1810000000000L, active3, 0x200000400L, active4, 0x201100L, active5, 0x2000008c4000000L, active6, 0x10000000L, active10, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 82:
      case 114:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 183, 95);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 276, 95);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L, active2, 0x40800L, active3, 0L, active4, 0x2000L, active5, 0x1c0000000000L, active6, 0x10000L, active10, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 95);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 235, 95);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 300, 95);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 309, 95);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 315, 95);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1c000000000L, active2, 0x100000L, active3, 0L, active4, 0L, active5, 0x40000000000000L, active6, 0L, active10, 0L);
      case 84:
      case 116:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 95);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 203, 95);
         else if ((active5 & 0x8000L) != 0L)
         {
            jjmatchedKind = 335;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x30000000000000L, active1, 0x600000100000L, active2, 0x2000080004000L, active3, 0x120L, active4, 0x100000000L, active5, 0x514000L, active6, 0L, active10, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000006000000L, active1, 0x24000L, active2, 0L, active3, 0L, active4, 0x7000000L, active5, 0L, active6, 0L, active10, 0x1400L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0x2000000000000L, active4, 0x2000000400000L, active5, 0L, active6, 0L, active10, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 89:
      case 121:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 210, 95);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20L, active5, 0L, active6, 0L, active10, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old10, long active10)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active10 &= old10)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, old10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40040000000000L, active2, 0L, active3, 0x200000000000000L, active4, 0x20060000000L, active5, 0x20000010000L, active6, 0x80000000L, active10, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0x1000L, active4, 0x20L, active5, 0L, active6, 0L, active10, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 67:
      case 99:
         if ((active5 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 375, 95);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0x800000040000000L, active4, 0x1800000000000L, active5, 0x4000000001L, active6, 0L, active10, 0L);
      case 68:
      case 100:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 140, 96);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 269, 95);
         else if ((active5 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 321, 95);
         else if ((active5 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 322, 95);
         else if ((active5 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 362;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0x180800000000L, active6, 0L, active10, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 95);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 159, 95);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 177, 95);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 197, 95);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 200, 95);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 228, 95);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 238, 95);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 241, 95);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 278, 95);
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 305, 95);
         else if ((active5 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 339, 95);
         else if ((active5 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 340, 95);
         else if ((active5 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 341, 95);
         return jjMoveStringLiteralDfa8_0(active0, 0x30000000000000L, active1, 0x600000000000L, active2, 0x2020L, active3, 0x20000L, active4, 0x8200100000000L, active5, 0L, active6, 0x10000L, active10, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 71:
      case 103:
         if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 279, 95);
         else if ((active5 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 380, 95);
         else if ((active6 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 394, 95);
         else if ((active6 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 401, 95);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1001020100000L, active2, 0x8000000000040040L, active3, 0x80L, active4, 0L, active5, 0x400000L, active6, 0x8000L, active10, 0L);
      case 76:
      case 108:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 131, 96);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 164, 95);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 258, 95);
         else if ((active5 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 382, 95);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xc00000000000080L, active3, 0L, active4, 0L, active5, 0x100000000L, active6, 0L, active10, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x106000000L, active1, 0x10000000L, active2, 0x2000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10000000L, active10, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 95);
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 277, 95);
         else if ((active5 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 345, 96);
         return jjMoveStringLiteralDfa8_0(active0, 0x1080021000040000L, active1, 0x820000000000L, active2, 0x1010000000000L, active3, 0L, active4, 0x480080000000000L, active5, 0x200000040000000L, active6, 0L, active10, 0x1400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400800000L, active2, 0x200000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x410L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L, active2, 0x38000L, active3, 0L, active4, 0x7000000L, active5, 0x280000000L, active6, 0L, active10, 0L);
      case 83:
      case 115:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 95);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 95);
         else if ((active5 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 374, 95);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400000000L, active6, 0L, active10, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 96);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 193, 95);
         else if ((active5 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 372, 95);
         return jjMoveStringLiteralDfa8_0(active0, 0x21c00000L, active1, 0x402080800001f80L, active2, 0x2000000000380200L, active3, 0L, active4, 0L, active5, 0x8000001000000000L, active6, 0L, active10, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1c000000000L, active2, 0x4000L, active3, 0x6200000400L, active4, 0x1000L, active5, 0xe000004000000L, active6, 0L, active10, 0L);
      case 87:
      case 119:
         if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 264, 95);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 89:
      case 121:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 95);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 239, 95);
         else if ((active5 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 334, 95);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old10, long active10)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active10 &= old10)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, old10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L, active4, 0L, active5, 0x180000000000L, active6, 0L, active10, 0L);
      case 49:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 118, 96);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0x4001L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0x400000L, active6, 0L, active10, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1c000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000000010000L, active3, 0L, active4, 0x20000000000L, active5, 0L, active6, 0x10000L, active10, 0L);
      case 68:
      case 100:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 95);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 209, 95);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 288, 95);
         else if ((active10 & 0x400L) != 0L)
            return jjStopAtPos(8, 650);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 95);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 149, 96);
         else if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 383, 95);
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000L, active1, 0x400000880000000L, active2, 0x2000000L, active3, 0x200104000000000L, active4, 0x1000006000200L, active5, 0xe000980000000L, active6, 0L, active10, 0L);
      case 71:
      case 103:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 18, 95);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 95);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 95);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 95);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 95);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 95);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 299, 95);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 311, 95);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 314, 95);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000L, active6, 0L, active10, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000001c00000L, active1, 0x2080000001f80L, active2, 0xa200L, active3, 0L, active4, 0x20000000L, active5, 0x200000000000000L, active6, 0L, active10, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000L, active6, 0x8000L, active10, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 78:
      case 110:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 161, 95);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1001400900000L, active2, 0x40000L, active3, 0x200000000L, active4, 0x1000L, active5, 0x20000000000L, active6, 0L, active10, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0x800000040000000L, active4, 0L, active5, 0x4000000001L, active6, 0L, active10, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40010000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10000000L, active10, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 110, 95);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 307, 95);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L, active2, 0x2000000000184000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      case 83:
      case 115:
         if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 301, 95);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L, active5, 0x400000000L, active6, 0x80000000L, active10, 0L);
      case 84:
      case 116:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 145, 96);
         else if ((active5 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 346, 96);
         else if ((active10 & 0x1000L) != 0L)
            return jjStopAtPos(8, 652);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L, active2, 0x10000000020L, active3, 0x1400L, active4, 0x20L, active5, 0x40000000L, active6, 0L, active10, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc00000000000090L, active3, 0L, active4, 0L, active5, 0x1000000000L, active6, 0L, active10, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0L, active5, 0L, active6, 0L, active10, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, active10);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6, long old10, long active10)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6) | (active10 &= old10)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, old10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1c000000000L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0xe000980000000L, active6, 0L);
      case 49:
         if ((active5 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 363, 96);
         break;
      case 50:
         if ((active5 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 364, 96);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000000000080080L, active3, 0L, active4, 0L, active5, 0x20400000000L, active6, 0L);
      case 67:
      case 99:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x1800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 285, 96);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0x200000000000000L, active4, 0L, active5, 0x1L, active6, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 100, 96);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 101, 96);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 133, 96);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 134, 96);
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(9, 199, 95);
         else if ((active5 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 353, 96);
         else if ((active6 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 399, 95);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000L, active2, 0x800000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 84, 95);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 112, 95);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 146, 96);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 144, 96);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000L, active2, 0x100000L, active3, 0x1000L, active4, 0x20L, active5, 0x10000L, active6, 0x10000000L);
      case 76:
      case 108:
         if ((active5 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 342, 95);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 99, 96);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0L, active5, 0x4000000000L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 142, 96);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2040000001f80L, active2, 0x2000000000000000L, active3, 0L, active4, 0x20000000000L, active5, 0L, active6, 0x10000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000000000200L, active3, 0x400L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x6000000L, active1, 0L, active2, 0x10000000800L, active3, 0L, active4, 0L, active5, 0x1040000000L, active6, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 53, 95);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 122, 95);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 230, 96);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 282, 95);
         else if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 304, 95);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000100000000L, active1, 0x420004001L, active2, 0x8010L, active3, 0x200000000L, active4, 0x40001000L, active5, 0L, active6, 0x80000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000L, active2, 0x2000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x1800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 49:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 102, 96);
         else if ((active5 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 369, 96);
         break;
      case 50:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 103, 96);
         else if ((active5 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 370, 96);
         break;
      case 51:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 104, 96);
         else if ((active5 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 371, 96);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 32, 95);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 132, 96);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 138, 96);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 141, 96);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(10, 143, 96);
         else if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(10, 320, 96);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80420000000L, active2, 0L, active3, 0x200000000L, active4, 0x1000L, active5, 0x200000000000000L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400000000L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x6000000L, active1, 0x40000804001L, active2, 0L, active3, 0x200000000000000L, active4, 0x200L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 95, 96);
         break;
      case 76:
      case 108:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 189, 96);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000L, active2, 0x200L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10000000L);
      case 77:
      case 109:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 139, 96);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000010000L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 113, 95);
         else if ((active5 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 356, 96);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1f80L, active2, 0x100000L, active3, 0x40000000L, active4, 0x20000000000L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1010000000000L, active3, 0x1000L, active4, 0x20L, active5, 0x40000000L, active6, 0x80000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0x2000000L, active5, 0x4000000000L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10000L);
      case 83:
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 55, 96);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 187, 96);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 236, 96);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x980000000L, active6, 0L);
      case 84:
      case 116:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 153, 95);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8000000000000080L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1f80L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active5 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 377, 95);
         else if ((active6 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 400, 95);
         break;
      case 69:
      case 101:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(11, 135, 96);
         else if ((active5 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(11, 354, 96);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000000000L, active6, 0x10000000L);
      case 71:
      case 103:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 148, 96);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x8001000000000000L, active3, 0L, active4, 0L, active5, 0x980010000L, active6, 0L);
      case 76:
      case 108:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 168, 96);
         else if ((active5 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 350, 96);
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 93, 96);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 204, 95);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(11, 261, 95);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40400800000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4001L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(11, 225, 96);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 268, 96);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000000L);
      case 83:
      case 115:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 107, 95);
         break;
      case 84:
      case 116:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(11, 147, 96);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 202, 96);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000040000000L, active4, 0x20040000000L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0L, active5, 0x4000000000L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(11, 137, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L, active6, 0x80000000L);
      case 68:
      case 100:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(12, 92, 96);
         else if ((active6 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(12, 412, 96);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000040000000L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(12, 87, 95);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1f00L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 64, 95);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 78, 95);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active5 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 361, 96);
         break;
      case 84:
      case 116:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 106, 96);
         else if ((active5 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 336, 96);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0x800000000000000L, active4, 0L, active5, 0x4000000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x980000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1f00L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 249, 96);
         break;
      case 69:
      case 101:
         if ((active5 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(13, 351, 96);
         else if ((active5 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(13, 352, 96);
         else if ((active5 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(13, 355, 96);
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0x800000000000000L, active4, 0L, active5, 0x4000000000L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80000000L);
      case 76:
      case 108:
         if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(13, 265, 96);
         break;
      case 78:
      case 110:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 191, 95);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000000L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(13, 222, 96);
         break;
      case 83:
      case 115:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(13, 98, 96);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(13, 286, 96);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(14, 72, 96);
         break;
      case 50:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(14, 73, 96);
         break;
      case 51:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(14, 74, 96);
         break;
      case 52:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(14, 75, 96);
         break;
      case 53:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(14, 76, 96);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active6 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(14, 415, 96);
         return jjMoveStringLiteralDfa15_0(active0, 0x1800000L, active1, 0L, active2, 0x1000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 297, 96);
         break;
      case 82:
      case 114:
         if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 251, 96);
         else if ((active5 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 358, 96);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, active2, active3, active4, active5, active6, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(13, old0, old1, old2, old3, old4, old5, old6, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, active2, 0L, active4, 0L, 0L, 0L, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active2, 0L, active4, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L, active2, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(15, 23, 96);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(15, 24, 96);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 176, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, active2, 0L, active4, 0L, 0L, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old2, long active2, long old4, long active4)
{
   if (((active0 &= old0) | (active2 &= old2) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(14, old0, 0L, old2, 0L, old4, 0L, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L, 0L, active4, 0L, 0L, 0L, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(16, 281, 96);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L, 0L, active4, 0L, 0L, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old4, long active4)
{
   if (((active0 &= old0) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L, 0L, old4, 0L, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(18, 26, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec5 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec7 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 89;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 96:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(32, 33);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 37:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(32, 33);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 93:
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 43)
                     jjCheckNAddTwoStates(78, 79);
                  else if (curChar == 10)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(73, 74);
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 10)
                     jjCheckNAddStates(3, 5);
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(68, 69);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(68, 69);
                  }
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(67);
                  }
                  break;
               case 94:
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  break;
               case 90:
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 43)
                     jjCheckNAddTwoStates(78, 79);
                  else if (curChar == 10)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(73, 74);
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 10)
                     jjCheckNAddStates(3, 5);
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(68, 69);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(68, 69);
                  }
                  break;
               case 91:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 39)
                  {
                     if (kind > 638)
                        kind = 638;
                  }
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 92:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 34)
                  {
                     if (kind > 638)
                        kind = 638;
                  }
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 40:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 38:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(32, 33);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  else if (curChar == 36)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 30);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 477)
                        kind = 477;
                     jjCheckNAdd(15);
                  }
                  break;
               case 50:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(32, 33);
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 95:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 24);
                  else if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddStates(25, 33);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(34, 41);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 477)
                        kind = 477;
                     jjCheckNAdd(15);
                  }
                  if ((0x1e000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 0:
                  if (curChar != 62)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(4, 6);
                  break;
               case 4:
                  jjCheckNAddTwoStates(4, 6);
                  break;
               case 5:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 6:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar != 10)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3fe000000000000L & l) != 0L && kind > 476)
                     kind = 476;
                  break;
               case 13:
                  if ((0x1e000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L && kind > 476)
                     kind = 476;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 477)
                     kind = 477;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if (curChar == 61 && kind > 497)
                     kind = 497;
                  break;
               case 18:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 61 && kind > 498)
                     kind = 498;
                  break;
               case 20:
               case 22:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 21:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 23:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 34 && kind > 638)
                     kind = 638;
                  break;
               case 25:
               case 27:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  break;
               case 26:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 28:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 39 && kind > 638)
                     kind = 638;
                  break;
               case 30:
                  if (curChar != 36)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 47:
                  if (curChar == 49 && kind > 637)
                     kind = 637;
                  break;
               case 51:
                  if (curChar == 50 && kind > 637)
                     kind = 637;
                  break;
               case 55:
                  if (curChar == 51 && kind > 637)
                     kind = 637;
                  break;
               case 60:
                  if (curChar == 34)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 34 && kind > 471)
                     kind = 471;
                  break;
               case 63:
                  if (curChar == 39)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 39 && kind > 471)
                     kind = 471;
                  break;
               case 66:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(25, 33);
                  break;
               case 67:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar != 10)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 71:
                  if (curChar == 10)
                     jjCheckNAddStates(3, 5);
                  break;
               case 72:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 73:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 482)
                     kind = 482;
                  jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (curChar != 10)
                     break;
                  if (kind > 482)
                     kind = 482;
                  jjCheckNAddTwoStates(73, 74);
                  break;
               case 75:
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 76:
                  if (curChar == 10)
                     jjCheckNAddStates(0, 2);
                  break;
               case 77:
                  if (curChar == 43)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 78:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 490)
                     kind = 490;
                  jjCheckNAddTwoStates(78, 79);
                  break;
               case 79:
                  if (curChar != 10)
                     break;
                  if (kind > 490)
                     kind = 490;
                  jjCheckNAddTwoStates(78, 79);
                  break;
               case 80:
                  if (curChar != 10)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(34, 41);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 24);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 478)
                     kind = 478;
                  jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 478)
                     kind = 478;
                  jjCheckNAddStates(42, 44);
                  break;
               case 86:
                  if (curChar == 45)
                     jjCheckNAddStates(16, 18);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 96:
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(32, 33);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 91:
               case 26:
                  jjCheckNAddStates(6, 8);
                  break;
               case 92:
               case 21:
                  jjCheckNAddStates(9, 11);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(32, 33);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 89:
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 39:
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 95:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(45, 46);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(47, 49);
                  else if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjAddStates(52, 53);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 35:
                  if ((0x800000008L & l) != 0L && kind > 637)
                     kind = 637;
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 42:
                  if ((0x10000000100000L & l) != 0L && kind > 637)
                     kind = 637;
                  break;
               case 43:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(47, 49);
                  break;
               case 48:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 52:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 56:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 64:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 96:
               case 33:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 37:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 91:
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 92:
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 40:
               case 31:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 38:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 89:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(88, 30);
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(12, 15);
                  break;
               case 50:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 41:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 39:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 95:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 2:
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 639)
                        kind = 639;
                     jjCheckNAddTwoStates(31, 32);
                  }
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(19, 24);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 14:
                  if ((jjbitVec3[i2] & l2) != 0L && kind > 476)
                     kind = 476;
                  break;
               case 30:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 639)
                     kind = 639;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 61:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 64:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 81:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(19, 24);
                  break;
               case 82:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 84:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 478)
                     kind = 478;
                  jjCheckNAdd(85);
                  break;
               case 85:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 478)
                     kind = 478;
                  jjCheckNAddStates(42, 44);
                  break;
               case 87:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(12, 15);
                  break;
               case 88:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(88, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 89 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100003600L & l) == 0L)
                     break;
                  kind = 8;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   switch (pos)
   {
      case 0:
         if ((active7 & 0x3000000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            return 44;
         }
         if ((active7 & 0x4c00000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            return 65;
         }
         if ((active0 & 0x2L) != 0L)
            return 73;
         return -1;
      case 1:
         if ((active7 & 0x4c00000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 1;
            return 65;
         }
         if ((active7 & 0x3000000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 1;
            return 43;
         }
         return -1;
      case 2:
         if ((active7 & 0x3000000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 2;
            return 30;
         }
         if ((active7 & 0x4c00000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 2;
            return 65;
         }
         return -1;
      case 3:
         if ((active7 & 0x7c00000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 3;
            return 65;
         }
         return -1;
      case 4:
         if ((active7 & 0x7c00000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 4;
            return 65;
         }
         return -1;
      case 5:
         if ((active7 & 0x400000000000000L) != 0L)
            return 65;
         if ((active7 & 0x7800000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 5;
            return 65;
         }
         return -1;
      case 6:
         if ((active7 & 0x7800000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 6;
            return 65;
         }
         return -1;
      case 7:
         if ((active7 & 0x7000000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 7;
            return 65;
         }
         if ((active7 & 0x800000000000000L) != 0L)
            return 65;
         return -1;
      case 8:
         if ((active7 & 0x7000000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 8;
            return 65;
         }
         return -1;
      case 9:
         if ((active7 & 0x7000000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 9;
            return 65;
         }
         return -1;
      case 10:
         if ((active7 & 0x7000000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 10;
            return 65;
         }
         return -1;
      case 11:
         if ((active7 & 0x5000000000000000L) != 0L)
            return 65;
         if ((active7 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 511;
            jjmatchedPos = 11;
            return 65;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2, active3, active4, active5, active6, active7), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_3(0, 1, 73);
      case 46:
         return jjStopAtPos(0, 505);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_3(0x400000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_3(0x3000000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_3(0x4000000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_3(0x800000000000000L);
      default :
         return jjMoveNfa_3(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active7)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_3(active7, 0x3000000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_3(active7, 0x800000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_3(active7, 0x4000000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_3(active7, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa2_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 2;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_3(active7, 0x800000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_3(active7, 0x4000000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_3(active7, 0x3400000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa3_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(1, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 3;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_3(active7, 0x3000000000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_3(active7, 0x400000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_3(active7, 0x4000000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_3(active7, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa4_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(2, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_3(active7, 0x3000000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_3(active7, 0x4000000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_3(active7, 0x400000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_3(active7, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(3, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa5_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(3, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 5;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_3(active7, 0x2000000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_3(active7, 0x800000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_3(active7, 0x4000000000000000L);
      case 82:
      case 114:
         if ((active7 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 506, 65);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_3(active7, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(4, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa6_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(4, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 6;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_3(active7, 0x4000000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_3(active7, 0x2000000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_3(active7, 0x1000000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_3(active7, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(5, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa7_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(5, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_3(active7, 0x4000000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_3(active7, 0x1000000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_3(active7, 0x2000000000000000L);
      case 89:
      case 121:
         if ((active7 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_3(7, 507, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_3(6, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa8_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(6, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 8;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_3(active7, 0x2000000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_3(active7, 0x5000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(7, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa9_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(7, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 9;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_3(active7, 0x6000000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_3(active7, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(8, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa10_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(8, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_3(active7, 0x1000000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_3(active7, 0x2000000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_3(active7, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(9, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa11_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(9, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_3(active7, 0x2000000000000000L);
      case 78:
      case 110:
         if ((active7 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_3(11, 508, 65);
         else if ((active7 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_3(11, 510, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_3(10, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa12_3(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_3(10, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(11, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 12;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active7 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_3(12, 509, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_3(11, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 73;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
               case 65:
                  if ((0xffffbfffffffdbffL & l) == 0L)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  break;
               case 44:
                  if ((0xffffbfffffffdbffL & l) == 0L)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  break;
               case 73:
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(6, 5);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(6, 5);
                  }
                  break;
               case 4:
                  if ((0xffffbfffffffdbffL & l) != 0L)
                  {
                     if (kind > 511)
                        kind = 511;
                     jjCheckNAdd(65);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(6, 5);
                  }
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddStates(58, 60);
                  }
                  else if (curChar == 42)
                     jjAddStates(61, 62);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 43:
                  if ((0xffffbfffffffdbffL & l) == 0L)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  break;
               case 0:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(1, 3);
                  break;
               case 1:
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar != 10)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(6, 5);
                  break;
               case 6:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(6, 5);
                  break;
               case 8:
                  if ((0x800000100003200L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 10:
                  if ((0x800000100003200L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 11:
                  if (curChar != 46)
                     break;
                  if (kind > 502)
                     kind = 502;
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 502)
                     kind = 502;
                  jjCheckNAdd(12);
                  break;
               case 31:
                  if ((0x800000100003200L & l) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 33:
                  if ((0x800000100003200L & l) != 0L)
                     jjAddStates(69, 70);
                  break;
               case 34:
                  if (curChar != 46)
                     break;
                  if (kind > 503)
                     kind = 503;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 503)
                     kind = 503;
                  jjCheckNAdd(35);
                  break;
               case 47:
                  if ((0x800000100003200L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 49:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 504)
                     kind = 504;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 66:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(58, 60);
                  break;
               case 67:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if (curChar == 42)
                     jjAddStates(61, 62);
                  break;
               case 69:
                  if (curChar != 62)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if (curChar != 62)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(72);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 44:
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 4:
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 43:
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 1:
                  jjAddStates(73, 74);
                  break;
               case 7:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 13:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 14:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(69, 70);
                  break;
               case 36:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 37:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 45:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 48:
                  if ((0x400000004000L & l) == 0L)
                     break;
                  if (kind > 504)
                     kind = 504;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 50:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 58:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  break;
               case 70:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (kind > 511)
                     kind = 511;
                  jjstateSet[jjnewStateCnt++] = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
               case 65:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  break;
               case 44:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjCheckNAdd(65);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 70:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 511)
                     kind = 511;
                  jjstateSet[jjnewStateCnt++] = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 73 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2, active3, active4, active5, active6, active7, active8), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_5(0x2L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active8)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8);
      return 1;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active8 & 0x2L) != 0L)
            return jjStopAtPos(1, 513);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2012c1000000000L & l) != 0L)
                  {
                     if (kind > 512)
                        kind = 512;
                     jjCheckNAddStates(75, 79);
                  }
                  else if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 514)
                        kind = 514;
                     jjCheckNAddTwoStates(18, 19);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 514)
                        kind = 514;
                     jjCheckNAddTwoStates(18, 19);
                  }
                  if ((0x401000000000L & l) != 0L)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x2012c1000000000L & l) == 0L)
                     break;
                  if (kind > 512)
                     kind = 512;
                  jjCheckNAddStates(75, 79);
                  break;
               case 2:
                  if (curChar == 40)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar != 41)
                     break;
                  if (kind > 512)
                     kind = 512;
                  jjCheckNAddStates(80, 83);
                  break;
               case 5:
                  if ((0x400d00000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x2012c1000000000L & l) == 0L)
                     break;
                  if (kind > 512)
                     kind = 512;
                  jjCheckNAddStates(84, 88);
                  break;
               case 7:
                  if (curChar == 40)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar != 41)
                     break;
                  if (kind > 512)
                     kind = 512;
                  jjCheckNAddStates(89, 92);
                  break;
               case 18:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  kind = 514;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar != 10)
                     break;
                  kind = 514;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x54900a6054900a6L & l) != 0L)
                  {
                     if (kind > 512)
                        kind = 512;
                     jjCheckNAddStates(75, 79);
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 1:
                  if ((0x54900a6054900a6L & l) == 0L)
                     break;
                  if (kind > 512)
                     kind = 512;
                  jjCheckNAddStates(75, 79);
                  break;
               case 6:
                  if ((0x54900a6054900a6L & l) == 0L)
                     break;
                  if (kind > 512)
                     kind = 512;
                  jjCheckNAddStates(84, 88);
                  break;
               case 10:
                  if ((0x4000000040000L & l) != 0L && kind > 512)
                     kind = 512;
                  break;
               case 11:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x400000004L & l) != 0L && kind > 512)
                     kind = 512;
                  break;
               case 13:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(1);
                  break;
               case 15:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(1);
                  break;
               case 17:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000L) != 0L || (active8 & 0xfff7fc1ffffffff8L) != 0L || (active9 & 0x3ffff801ffffffL) != 0L)
         {
            jjmatchedKind = 641;
            return 112;
         }
         if ((active7 & 0x100000000000L) != 0L)
            return 3;
         if ((active7 & 0x10000000000L) != 0L)
            return 113;
         if ((active8 & 0x8000000000000L) != 0L || (active9 & 0x7fe000000L) != 0L)
         {
            jjmatchedKind = 641;
            return 75;
         }
         if ((active7 & 0x4000000000L) != 0L)
            return 114;
         if ((active0 & 0x2L) != 0L)
            return 115;
         if ((active7 & 0x8080000000000L) != 0L)
            return 0;
         if ((active7 & 0x800000000000L) != 0L)
            return 9;
         if ((active7 & 0x1000000000L) != 0L)
            return 116;
         if ((active7 & 0x200000000000L) != 0L)
            return 112;
         if ((active8 & 0x3e000000000L) != 0L)
         {
            jjmatchedKind = 641;
            return 18;
         }
         if ((active7 & 0x20400000000000L) != 0L)
            return 11;
         if ((active0 & 0x200L) != 0L)
            return 117;
         return -1;
      case 1:
         if ((active8 & 0x8000000000000L) != 0L || (active9 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 641;
               jjmatchedPos = 1;
            }
            return 74;
         }
         if ((active8 & 0x8000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 641;
               jjmatchedPos = 1;
            }
            return 17;
         }
         if ((active8 & 0x77e00010002180L) != 0L || (active9 & 0x20000000ecL) != 0L)
            return 112;
         if ((active0 & 0x2000L) != 0L || (active8 & 0xff801f7fefffde78L) != 0L || (active9 & 0x3fffddffffff13L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 641;
               jjmatchedPos = 1;
            }
            return 112;
         }
         return -1;
      case 2:
         if ((active8 & 0x8000000000000L) != 0L || (active9 & 0x200000000L) != 0L)
            return 73;
         if ((active8 & 0x4000008080000168L) != 0L || (active9 & 0x20041100200L) != 0L)
            return 112;
         if ((active0 & 0x2000L) != 0L || (active8 & 0xbfb79f7f6fffde10L) != 0L || (active9 & 0x3ffdddbeeffd9bL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 641;
               jjmatchedPos = 2;
            }
            return 112;
         }
         return -1;
      case 3:
         if ((active8 & 0xa81f9a6f4bbf9e10L) != 0L || (active9 & 0x19bdcdbee9fd82L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 641;
               jjmatchedPos = 3;
            }
            return 112;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 641;
               jjmatchedPos = 3;
            }
            return 21;
         }
         if ((active8 & 0x17a0051024404000L) != 0L || (active9 & 0x26401000060019L) != 0L)
            return 112;
         return -1;
      case 4:
         if ((active8 & 0x801086040008210L) != 0L || (active9 & 0x9848c80014080L) != 0L)
            return 112;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 4;
            return 21;
         }
         if ((active8 & 0xa01e920f0bbf1c00L) != 0L || (active9 & 0x3039413ee8bd02L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 4;
            return 112;
         }
         return -1;
      case 5:
         if ((active8 & 0x8004100802220000L) != 0L || (active9 & 0x90010282102L) != 0L)
            return 112;
         if ((active8 & 0x201a8207099d1c00L) != 0L || (active9 & 0x3030412ec09c00L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 5;
            return 112;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 5;
            return 21;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 641;
               jjmatchedPos = 6;
            }
            return 21;
         }
         if ((active8 & 0x1a020708080800L) != 0L || (active9 & 0x20004102808800L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 641;
               jjmatchedPos = 6;
            }
            return 112;
         }
         if ((active8 & 0x2000800001951400L) != 0L || (active9 & 0x1030002c401400L) != 0L)
            return 112;
         return -1;
      case 7:
         if ((active8 & 0x20008080000L) != 0L || (active9 & 0x20000100800800L) != 0L)
            return 112;
         if ((active0 & 0x2000L) != 0L || (active9 & 0x100000000000L) != 0L)
            return 21;
         if ((active8 & 0x1a000700000800L) != 0L || (active9 & 0x4002008000L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 7;
            return 112;
         }
         return -1;
      case 8:
         if ((active8 & 0x12000700000000L) != 0L || (active9 & 0x2008000L) != 0L)
            return 112;
         if ((active8 & 0x8000000000800L) != 0L || (active9 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 641;
               jjmatchedPos = 8;
            }
            return 112;
         }
         return -1;
      case 9:
         if ((active8 & 0x8000200000800L) != 0L || (active9 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 9;
            return 112;
         }
         return -1;
      case 10:
         if ((active8 & 0x200000800L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 10;
            return 112;
         }
         if ((active8 & 0x8000000000000L) != 0L || (active9 & 0x4000000000L) != 0L)
            return 112;
         return -1;
      case 11:
         if ((active8 & 0x200000800L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 11;
            return 112;
         }
         return -1;
      case 12:
         if ((active8 & 0x200000800L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 12;
            return 112;
         }
         return -1;
      case 13:
         if ((active8 & 0x800L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 13;
            return 112;
         }
         if ((active8 & 0x200000000L) != 0L)
            return 112;
         return -1;
      case 14:
         if ((active8 & 0x800L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 14;
            return 112;
         }
         return -1;
      case 15:
         if ((active8 & 0x800L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 15;
            return 112;
         }
         return -1;
      case 16:
         if ((active8 & 0x800L) != 0L)
         {
            jjmatchedKind = 641;
            jjmatchedPos = 16;
            return 112;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7, long active8, long active9)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2, active3, active4, active5, active6, active7, active8, active9), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_2(0, 1, 115);
      case 33:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x10000000000000L, 0x0L, 0x0L);
      case 34:
         return jjStartNfaWithStates_2(0, 486, 114);
      case 36:
         return jjStartNfaWithStates_2(0, 493, 112);
      case 39:
         return jjStartNfaWithStates_2(0, 488, 113);
      case 40:
         return jjStopAtPos(0, 480);
      case 41:
         return jjStopAtPos(0, 483);
      case 42:
         jjmatchedKind = 491;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x8000000000000L, 0x0L, 0x0L);
      case 43:
         return jjStopAtPos(0, 489);
      case 44:
         return jjStopAtPos(0, 479);
      case 45:
         return jjStopAtPos(0, 481);
      case 46:
         return jjStartNfaWithStates_2(0, 9, 117);
      case 47:
         return jjStartNfaWithStates_2(0, 492, 3);
      case 58:
         return jjStartNfaWithStates_2(0, 484, 116);
      case 60:
         jjmatchedKind = 494;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20000000000000L, 0x0L, 0x0L);
      case 61:
         return jjStopAtPos(0, 496);
      case 62:
         return jjStartNfaWithStates_2(0, 495, 9);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x1f8L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x3e00L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x3fc000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x1fc00000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_2(0x2000L, 0x0L, 0x1fe0000000L, 0x10000000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x3e000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0xc0000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x100000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x77e00000000000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x80000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x700000000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x1800000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0xe000000000000000L, 0x3L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x3fcL);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0xfc00L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x1ff0000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x8000000000000L, 0x7fe000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x7800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x78000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x380000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x2fc00000000000L);
      case 124:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x400000L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_2(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active7, long active8, long active9)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, 0L, 0L, 0L, 0L, 0L, 0L, active7, active8, active9);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active7 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 499);
         break;
      case 61:
         if ((active7 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 500);
         break;
      case 62:
         if ((active7 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 501);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x2000100000400000L, active9, 0x380802010400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x2007800600L, active9, 0x7c7e0000L);
      case 70:
      case 102:
         if ((active8 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 557, 112);
         else if ((active9 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(1, 578, 112);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x4000L, active9, 0x21c01080000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x900000008000800L, active9, 0x2000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x4060008018L, active9, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0L, active9, 0x100000000L);
      case 78:
      case 110:
         if ((active8 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 558;
            jjmatchedPos = 1;
         }
         else if ((active9 & 0x40L) != 0L)
         {
            jjmatchedKind = 582;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x2000L, active7, 0L, active8, 0x37800080000060L, active9, 0x8000000008L);
      case 79:
      case 111:
         if ((active8 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(1, 540, 112);
         else if ((active9 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 613, 112);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0xd6800480000f1000L, active9, 0x4000001800800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0L, active9, 0x10000000010L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x8000000000000L, active9, 0x200000000L);
      case 82:
      case 114:
         if ((active9 & 0x20L) != 0L)
         {
            jjmatchedKind = 581;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x90000000000L, active9, 0x800400000f080L);
      case 83:
      case 115:
         if ((active8 & 0x80L) != 0L)
         {
            jjmatchedKind = 519;
            jjmatchedPos = 1;
         }
         else if ((active8 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 566, 112);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x100L, active9, 0x60000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0L, active9, 0x400000100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x20000300000L, active9, 0x203L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active7, 0L, active8, 0x1f00000000L, active9, 0x10000000000000L);
      case 89:
      case 121:
         if ((active8 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(1, 525, 112);
         break;
      case 124:
         if ((active7 & 0x400000L) != 0L)
            return jjStopAtPos(1, 470);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, 0L, 0L, 0L, 0L, 0L, 0L, active7, active8, active9);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old7, long active7, long old8, long active8, long old9, long active9)
{
   if (((active0 &= old0) | (active7 &= old7) | (active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(0, old0, 0L, 0L, 0L, 0L, 0L, 0L, old7, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x4000L, active9, 0x4580062000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0L, active9, 0x800000000L);
      case 67:
      case 99:
         if ((active8 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(2, 520, 112);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x200800700800000L, active9, 0x4080400L);
      case 68:
      case 100:
         if ((active8 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(2, 517, 112);
         else if ((active8 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 543;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0x2000L, active8, 0x1003000000000000L, active9, 0x10000000080L);
      case 69:
      case 101:
         if ((active9 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 617, 112);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0L, active9, 0x30c01000001010L);
      case 70:
      case 102:
         if ((active9 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(2, 596, 112);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x1000000L, active9, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x200L, active9, 0x8000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0L, active9, 0x100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x80001800000000L, active9, 0x9048000014000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x100000000000000L, active9, 0L);
      case 76:
      case 108:
         if ((active8 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(2, 515, 112);
         else if ((active9 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 609;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x8000002000000L, active9, 0x80010800009L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x30000L, active9, 0x2L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x8000200000c0800L, active9, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x400094000009000L, active9, 0x8000L);
      case 82:
      case 114:
         if ((active8 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 551, 112);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x300000L, active9, 0x4300000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x400006c000000L, active9, 0x20000800L);
      case 84:
      case 116:
         if ((active8 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 574, 112);
         else if ((active9 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(2, 585, 112);
         else if ((active9 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(2, 606, 112);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x2030042000400410L, active9, 0x2000000200000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x100000000000L, active9, 0x2400000L);
      case 87:
      case 119:
         if ((active9 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(2, 600, 112);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active8, 0x8000000000000000L, active9, 0L);
      case 89:
      case 121:
         if ((active8 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(2, 518, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old8, long active8, long old9, long active9)
{
   if (((active0 &= old0) | (active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(1, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000L, active8, 0L, active9, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x8000000000000L, active9, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x8000004001000800L, active9, 0x10000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0L, active9, 0x2L);
      case 67:
      case 99:
         if ((active8 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(3, 538, 112);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x22000000000L, active9, 0x10300000008000L);
      case 68:
      case 100:
         if ((active9 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(3, 593, 112);
         break;
      case 69:
      case 101:
         if ((active8 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(3, 534, 112);
         else if ((active8 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(3, 541, 112);
         else if ((active8 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 568, 112);
         else if ((active8 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 572, 112);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x15000302000010L, active9, 0x12400180L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0L, active9, 0x2000L);
      case 72:
      case 104:
         if ((active9 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 625, 112);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x2100040000200L, active9, 0x800L);
      case 75:
      case 107:
         if ((active8 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 569, 112);
         else if ((active9 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 626, 112);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0L, active9, 0x400L);
      case 76:
      case 108:
         if ((active9 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(3, 576, 112);
         else if ((active9 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(3, 594, 112);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x800400801000L, active9, 0x1000900800000L);
      case 77:
      case 109:
         if ((active8 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 552, 112);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x30000L, active9, 0x8000000L);
      case 78:
      case 110:
         if ((active8 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 567, 112);
         else if ((active9 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(3, 580, 112);
         else if ((active9 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 612, 112);
         else if ((active9 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 622;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x40000L, active9, 0x20044000000000L);
      case 79:
      case 111:
         if ((active8 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 554, 112);
         else if ((active8 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 565, 112);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0L, active9, 0x8000084000L);
      case 80:
      case 112:
         if ((active8 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 570, 112);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0L, active9, 0x1000L);
      case 82:
      case 114:
         if ((active8 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(3, 526, 112);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x100000L, active9, 0x800480000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x800288000L, active9, 0x20010000L);
      case 84:
      case 116:
         if ((active8 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 548, 112);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x8000000L, active9, 0x8000004000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x2800080000000000L, active9, 0x80000200000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active8, 0x400L, active9, 0L);
      case 89:
      case 121:
         if ((active9 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(3, 579, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_2(2, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0, long old8, long active8, long old9, long active9)
{
   if (((active0 &= old0) | (active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(2, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0x800000L, active9, 0x1400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0L, active9, 0x800000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0x2000000000000L, active9, 0x10000000L);
      case 69:
      case 101:
         if ((active8 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(4, 527, 112);
         else if ((active9 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(4, 592, 112);
         else if ((active9 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(4, 607, 112);
         else if ((active9 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(4, 611, 112);
         else if ((active9 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 623, 112);
         else if ((active9 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 624, 112);
         else if ((active9 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 627, 112);
         return jjMoveStringLiteralDfa5_2(active0, 0x2000L, active8, 0x151400L, active9, 0x20080008008002L);
      case 70:
      case 102:
         if ((active8 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(4, 542, 112);
         break;
      case 71:
      case 103:
         if ((active9 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 618, 112);
         break;
      case 72:
      case 104:
         if ((active8 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 549, 112);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0L, active9, 0x300000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0x8008000008020000L, active9, 0x24000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0L, active9, 0x100000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0L, active9, 0x2000L);
      case 78:
      case 110:
         if ((active8 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(4, 521, 112);
         else if ((active9 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 615, 112);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0x100000000000L, active9, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0x200000L, active9, 0L);
      case 80:
      case 112:
         if ((active8 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 555, 112);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0x300000000L, active9, 0x2000000L);
      case 82:
      case 114:
         if ((active8 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(4, 516, 112);
         else if ((active9 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(4, 583, 112);
         else if ((active9 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(4, 590, 112);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0x2014000000000800L, active9, 0x680100L);
      case 83:
      case 115:
         if ((active8 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 571, 112);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0L, active9, 0x4000000000L);
      case 84:
      case 116:
         if ((active8 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 550, 112);
         else if ((active9 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(4, 610, 112);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0x20802080000L, active9, 0x10000000800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active8, 0x800401000000L, active9, 0x10000000000000L);
      case 88:
      case 120:
         if ((active8 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 560, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0, long old8, long active8, long old9, long active9)
{
   if (((active0 &= old0) | (active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(3, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active9 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(5, 589, 112);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x2002000000081000L, active9, 0x304000800000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x40000L, active9, 0L);
      case 68:
      case 100:
         if ((active9 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(5, 595, 112);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x800000000000L, active9, 0x8000L);
      case 69:
      case 101:
         if ((active8 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(5, 537, 112);
         else if ((active9 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 616, 112);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x400L, active9, 0L);
      case 71:
      case 103:
         if ((active8 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 556, 112);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0L, active9, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x20000000000L, active9, 0x100000800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x1000000L, active9, 0L);
      case 78:
      case 110:
         if ((active9 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(5, 597, 112);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x8000008110000L, active9, 0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0L, active9, 0x26000000L);
      case 82:
      case 114:
         if ((active8 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(5, 533, 112);
         else if ((active9 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(5, 577, 112);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x800000L, active9, 0x1000L);
      case 83:
      case 115:
         if ((active8 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(5, 547, 112);
         else if ((active9 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(5, 584, 112);
         else if ((active9 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 619, 112);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x10000400000000L, active9, 0x400000L);
      case 84:
      case 116:
         if ((active8 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(5, 529, 112);
         else if ((active8 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 562, 112);
         else if ((active8 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 575, 112);
         else if ((active9 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(5, 604, 112);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x300000000L, active9, 0x10000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0L, active9, 0x20000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_2(active0, 0x2000L, active8, 0L, active9, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active8, 0x800L, active9, 0L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0, long old8, long active8, long old9, long active9)
{
   if (((active0 &= old0) | (active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(4, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active8, 0x800L, active9, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active8, 0x8000000L, active9, 0x4000800000L);
      case 69:
      case 101:
         if ((active8 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(6, 535, 112);
         else if ((active8 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 559, 112);
         else if ((active9 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(6, 586, 112);
         else if ((active9 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(6, 588, 112);
         else if ((active9 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(6, 598, 112);
         else if ((active9 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 628, 112);
         return jjMoveStringLiteralDfa7_2(active0, 0x2000L, active8, 0x10000000000000L, active9, 0x20000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active8, 0x700000000L, active9, 0x2000000L);
      case 76:
      case 108:
         if ((active8 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 573, 112);
         break;
      case 78:
      case 110:
         if ((active8 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(6, 522, 112);
         else if ((active8 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(6, 524, 112);
         else if ((active9 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(6, 602, 112);
         else if ((active9 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(6, 605, 112);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active8, 0x80000L, active9, 0x100000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active8, 0x20000000000L, active9, 0L);
      case 82:
      case 114:
         if ((active9 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 621;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active0, 0L, active8, 0L, active9, 0x100000000000L);
      case 84:
      case 116:
         if ((active8 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(6, 528, 112);
         else if ((active8 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(6, 530, 112);
         else if ((active8 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(6, 532, 112);
         else if ((active8 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(6, 536, 112);
         else if ((active9 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(6, 603, 112);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active8, 0xa000000000000L, active9, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active8, 0L, active9, 0x8000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active8, 0L, active9, 0x800L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0, long old8, long active8, long old9, long active9)
{
   if (((active0 &= old0) | (active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(5, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active9 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 620, 21);
         break;
      case 67:
      case 99:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(7, 13, 21);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active8, 0x10000000000000L, active9, 0L);
      case 69:
      case 101:
         if ((active9 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(7, 587, 112);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active8, 0x8000000000000L, active9, 0L);
      case 75:
      case 107:
         if ((active9 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(7, 599, 112);
         break;
      case 78:
      case 110:
         if ((active8 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 553, 112);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active8, 0L, active9, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active8, 0x2000300000000L, active9, 0L);
      case 82:
      case 114:
         if ((active9 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 629, 112);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active8, 0L, active9, 0x8000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active8, 0x800L, active9, 0L);
      case 84:
      case 116:
         if ((active8 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(7, 531, 112);
         else if ((active8 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(7, 539, 112);
         else if ((active9 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(7, 608, 112);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active8, 0L, active9, 0x4000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active8, 0x400000000L, active9, 0L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0, long old8, long active8, long old9, long active9)
{
   if (((active0 &= old0) | (active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(6, old0, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active8 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(8, 546, 112);
         else if ((active9 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(8, 591, 112);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_2(active8, 0x8000000000000L, active9, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_2(active8, 0L, active9, 0x4000000000L);
      case 78:
      case 110:
         if ((active8 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 544;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active8, 0x200000000L, active9, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa9_2(active8, 0x800L, active9, 0L);
      case 82:
      case 114:
         if ((active8 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 561, 112);
         break;
      case 84:
      case 116:
         if ((active8 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 564, 112);
         else if ((active9 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(8, 601, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_2(7, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
}
private int jjMoveStringLiteralDfa9_2(long old8, long active8, long old9, long active9)
{
   if (((active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(7, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_2(active8, 0x200000000L, active9, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_2(active8, 0x8000000000000L, active9, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_2(active8, 0x800L, active9, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_2(active8, 0L, active9, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_2(8, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
}
private int jjMoveStringLiteralDfa10_2(long old8, long active8, long old9, long active9)
{
   if (((active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(8, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_2(active8, 0x800L, active9, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_2(active8, 0x200000000L, active9, 0L);
      case 78:
      case 110:
         if ((active9 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(10, 614, 112);
         break;
      case 82:
      case 114:
         if ((active8 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(10, 563, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_2(9, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, active9);
}
private int jjMoveStringLiteralDfa11_2(long old8, long active8, long old9, long active9)
{
   if (((active8 &= old8) | (active9 &= old9)) == 0L)
      return jjStartNfa_2(9, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, old9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_2(active8, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_2(active8, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_2(10, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
}
private int jjMoveStringLiteralDfa12_2(long old8, long active8)
{
   if (((active8 &= old8)) == 0L)
      return jjStartNfa_2(10, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(11, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_2(active8, 0x200000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_2(active8, 0x800L);
      default :
         break;
   }
   return jjStartNfa_2(11, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
}
private int jjMoveStringLiteralDfa13_2(long old8, long active8)
{
   if (((active8 &= old8)) == 0L)
      return jjStartNfa_2(11, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(12, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active8 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(13, 545, 112);
         return jjMoveStringLiteralDfa14_2(active8, 0x800L);
      default :
         break;
   }
   return jjStartNfa_2(12, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
}
private int jjMoveStringLiteralDfa14_2(long old8, long active8)
{
   if (((active8 &= old8)) == 0L)
      return jjStartNfa_2(12, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(13, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_2(active8, 0x800L);
      default :
         break;
   }
   return jjStartNfa_2(13, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
}
private int jjMoveStringLiteralDfa15_2(long old8, long active8)
{
   if (((active8 &= old8)) == 0L)
      return jjStartNfa_2(13, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(14, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa16_2(active8, 0x800L);
      default :
         break;
   }
   return jjStartNfa_2(14, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
}
private int jjMoveStringLiteralDfa16_2(long old8, long active8)
{
   if (((active8 &= old8)) == 0L)
      return jjStartNfa_2(14, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(15, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_2(active8, 0x800L);
      default :
         break;
   }
   return jjStartNfa_2(15, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
}
private int jjMoveStringLiteralDfa17_2(long old8, long active8)
{
   if (((active8 &= old8)) == 0L)
      return jjStartNfa_2(15, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old8, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(16, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active8 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(17, 523, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_2(16, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active8, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 112;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 73:
                  if ((0x3ff201000000000L & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  break;
               case 113:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(93, 95);
                  else if (curChar == 39)
                  {
                     if (kind > 645)
                        kind = 645;
                  }
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(96, 98);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 109;
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  else if (curChar == 39)
                  {
                     if (kind > 644)
                        kind = 644;
                  }
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if (curChar == 39)
                  {
                     if (kind > 644)
                        kind = 644;
                     jjstateSet[jjnewStateCnt++] = 102;
                  }
                  break;
               case 17:
                  if ((0x3ff201000000000L & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  break;
               case 114:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(99, 101);
                  else if (curChar == 34)
                  {
                     if (kind > 645)
                        kind = 645;
                  }
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(102, 104);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 96;
                  if (curChar == 34)
                  {
                     if (kind > 644)
                        kind = 644;
                  }
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 634)
                        kind = 634;
                     jjCheckNAddStates(105, 111);
                  }
                  else if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddStates(112, 120);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(121, 128);
                  else if (curChar == 34)
                     jjCheckNAddStates(129, 134);
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(135, 142);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 40);
                  else if (curChar == 58)
                     jjCheckNAddTwoStates(23, 24);
                  else if (curChar == 36)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 74:
                  if ((0x3ff201000000000L & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  break;
               case 116:
                  if (curChar == 36)
                  {
                     if (kind > 643)
                        kind = 643;
                     jjCheckNAddStates(143, 145);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 18:
                  if ((0x3ff201000000000L & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  break;
               case 112:
                  if ((0x3ff201000000000L & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  break;
               case 75:
                  if ((0x3ff201000000000L & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 634)
                        kind = 634;
                     jjCheckNAdd(40);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 634)
                        kind = 634;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  break;
               case 115:
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(146, 148);
                  else if (curChar == 43)
                     jjCheckNAddTwoStates(62, 63);
                  else if (curChar == 10)
                     jjCheckNAddStates(146, 148);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(57, 58);
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(149, 151);
                  else if (curChar == 10)
                     jjCheckNAddStates(149, 151);
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(52, 53);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(52, 53);
                  }
                  break;
               case 0:
                  if (curChar != 62)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(4, 6);
                  break;
               case 4:
                  jjCheckNAddTwoStates(4, 6);
                  break;
               case 5:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 6:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 8:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if (curChar == 61 && kind > 497)
                     kind = 497;
                  break;
               case 10:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if (curChar == 61 && kind > 498)
                     kind = 498;
                  break;
               case 13:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(152, 153);
                  break;
               case 20:
                  if (curChar != 36)
                     break;
                  if (kind > 641)
                     kind = 641;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 641)
                     kind = 641;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar != 36)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAddStates(143, 145);
                  break;
               case 25:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 46)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(30, 40);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(154, 155);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddStates(156, 158);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 46)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddStates(105, 111);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(42, 31);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddStates(159, 161);
                  break;
               case 44:
                  if (curChar == 46)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(45, 31);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar == 46)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(112, 120);
                  break;
               case 51:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar != 10)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(149, 151);
                  break;
               case 55:
                  if (curChar == 10)
                     jjCheckNAddStates(149, 151);
                  break;
               case 56:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 57:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 482)
                     kind = 482;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar != 10)
                     break;
                  if (kind > 482)
                     kind = 482;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if ((0x800000100003200L & l) != 0L)
                     jjCheckNAddStates(146, 148);
                  break;
               case 60:
                  if (curChar == 10)
                     jjCheckNAddStates(146, 148);
                  break;
               case 61:
                  if (curChar == 43)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 62:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 490)
                     kind = 490;
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar != 10)
                     break;
                  if (kind > 490)
                     kind = 490;
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
                  if (curChar != 10)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(135, 142);
                  break;
               case 67:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(162, 163);
                  break;
               case 77:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(164, 165);
                  break;
               case 90:
                  if (curChar == 34)
                     jjCheckNAddStates(129, 134);
                  break;
               case 91:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(102, 104);
                  break;
               case 92:
                  if (curChar == 34)
                     jjCheckNAddStates(102, 104);
                  break;
               case 93:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 34 && kind > 644)
                     kind = 644;
                  break;
               case 95:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(99, 101);
                  break;
               case 96:
                  if (curChar == 34)
                     jjCheckNAddStates(99, 101);
                  break;
               case 97:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 34 && kind > 645)
                     kind = 645;
                  break;
               case 99:
                  if (curChar == 39)
                     jjCheckNAddStates(121, 128);
                  break;
               case 100:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 101:
                  if (curChar != 39)
                     break;
                  if (kind > 644)
                     kind = 644;
                  jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 102:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(103, 101);
                  break;
               case 103:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(103, 101);
                  break;
               case 104:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(96, 98);
                  break;
               case 105:
                  if (curChar == 39)
                     jjCheckNAddStates(96, 98);
                  break;
               case 106:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 39 && kind > 644)
                     kind = 644;
                  break;
               case 108:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               case 109:
                  if (curChar == 39)
                     jjCheckNAddStates(93, 95);
                  break;
               case 110:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 39 && kind > 645)
                     kind = 645;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 113:
                  jjCheckNAddStates(93, 95);
                  jjCheckNAddStates(96, 98);
                  jjCheckNAddTwoStates(100, 101);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 114:
                  jjCheckNAddStates(99, 101);
                  jjCheckNAddStates(102, 104);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(166, 168);
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 640)
                        kind = 640;
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 116:
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAddStates(143, 145);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 112:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjAddStates(52, 53);
                  break;
               case 12:
                  if ((0x1000000010L & l) == 0L)
                     break;
                  if (kind > 632)
                     kind = 632;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x800000008000L & l) != 0L && kind > 632)
                     kind = 632;
                  break;
               case 15:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 19:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 641)
                     kind = 641;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 641)
                     kind = 641;
                  jjCheckNAdd(21);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAdd(28);
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(169, 171);
                  break;
               case 65:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(166, 168);
                  break;
               case 66:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 630)
                     kind = 630;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 68:
                  if ((0x800000008000L & l) != 0L && kind > 630)
                     kind = 630;
                  break;
               case 69:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 71:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 76:
                  if ((0x8000000080L & l) == 0L)
                     break;
                  if (kind > 631)
                     kind = 631;
                  jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 78:
                  if ((0x800000008000L & l) != 0L && kind > 631)
                     kind = 631;
                  break;
               case 79:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 81:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x100000001000L & l) != 0L && kind > 640)
                     kind = 640;
                  break;
               case 89:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 91:
                  jjCheckNAddStates(102, 104);
                  break;
               case 95:
                  jjCheckNAddStates(99, 101);
                  break;
               case 100:
                  jjCheckNAddTwoStates(100, 101);
                  break;
               case 103:
                  jjCheckNAddTwoStates(103, 101);
                  break;
               case 104:
                  jjCheckNAddStates(96, 98);
                  break;
               case 108:
                  jjCheckNAddStates(93, 95);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 73:
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  break;
               case 113:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(96, 98);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               case 17:
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  break;
               case 114:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(102, 104);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(99, 101);
                  break;
               case 2:
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((jjbitVec3[i2] & l2) != 0L)
                  {
                     if (kind > 634)
                        kind = 634;
                     jjCheckNAddStates(105, 111);
                  }
                  break;
               case 74:
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  break;
               case 116:
               case 24:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAddStates(143, 145);
                  break;
               case 18:
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  break;
               case 112:
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  break;
               case 75:
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  if ((jjbitVec10[i2] & l2) != 0L)
                  {
                     if (kind > 641)
                        kind = 641;
                     jjCheckNAdd(21);
                  }
                  break;
               case 117:
                  if ((jjbitVec3[i2] & l2) != 0L)
                  {
                     if (kind > 634)
                        kind = 634;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((jjbitVec3[i2] & l2) != 0L)
                  {
                     if (kind > 634)
                        kind = 634;
                     jjCheckNAdd(40);
                  }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 20:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 641)
                     kind = 641;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 641)
                     kind = 641;
                  jjCheckNAdd(21);
                  break;
               case 25:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if ((jjbitVec10[i2] & l2) == 0L)
                     break;
                  if (kind > 643)
                     kind = 643;
                  jjCheckNAdd(28);
                  break;
               case 30:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 34:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddStates(156, 158);
                  break;
               case 36:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddStates(105, 111);
                  break;
               case 42:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(42, 31);
                  break;
               case 43:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddStates(159, 161);
                  break;
               case 45:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(45, 31);
                  break;
               case 46:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 49:
                  if ((jjbitVec3[i2] & l2) == 0L)
                     break;
                  if (kind > 634)
                     kind = 634;
                  jjCheckNAdd(49);
                  break;
               case 91:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(102, 104);
                  break;
               case 95:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(99, 101);
                  break;
               case 100:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(100, 101);
                  break;
               case 103:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(103, 101);
                  break;
               case 104:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(96, 98);
                  break;
               case 108:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 112 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2L) != 0L)
            return 12;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6, long active7)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2, active3, active4, active5, active6, active7), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_1(0, 1, 12);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_1(0xf000000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_1(0x70000000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_1(0x1f80000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_1(0x2000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_1(0x3c000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_1(0x3c0000000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_1(0xfc00000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x7L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x38L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x780L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x7800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x30000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x300000L);
      default :
         return jjMoveNfa_1(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active6, long active7)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_1(active6, 0x402f80000000000L, active7, 0x48181L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_1(active6, 0x1000000000L, active7, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_1(active6, 0x1840000000000000L, active7, 0x300600L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_1(active6, 0x10000000000L, active7, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_1(active6, 0x6001000000000000L, active7, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_1(active6, 0x3c002000000000L, active7, 0x10000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_1(active6, 0x8380020000000000L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_1(active6, 0L, active7, 0x20000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_1(active6, 0L, active7, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_1(active6, 0L, active7, 0x78L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_1(active6, 0x4000000000L, active7, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_1(active6, 0x8000000000L, active7, 0x2000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_1(active6, 0x40000000000L, active7, 0x4006L);
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa2_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(0, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_1(active6, 0x800018000000000L, active7, 0x302000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_1(active6, 0x2000000000000L, active7, 0L);
      case 68:
      case 100:
         if ((active6 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(2, 447);
         else if ((active7 & 0x8L) != 0L)
         {
            jjmatchedKind = 451;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active6, 0x3000000000000000L, active7, 0x10030L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_1(active6, 0L, active7, 0x80040L);
      case 71:
      case 103:
         if ((active6 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 439;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active6, 0x100000000000000L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_1(active6, 0x4000000000L, active7, 0L);
      case 77:
      case 109:
         if ((active7 & 0x200L) != 0L)
            return jjStopAtPos(2, 457);
         else if ((active7 & 0x4000L) != 0L)
            return jjStopAtPos(2, 462);
         return jjMoveStringLiteralDfa3_1(active6, 0L, active7, 0x6L);
      case 78:
      case 110:
         if ((active6 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 446);
         else if ((active7 & 0x800L) != 0L)
            return jjStopAtPos(2, 459);
         else if ((active7 & 0x8000L) != 0L)
            return jjStopAtPos(2, 463);
         return jjMoveStringLiteralDfa3_1(active6, 0x40002000000000L, active7, 0x180L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_1(active6, 0x1000000000L, active7, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_1(active6, 0L, active7, 0x20000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_1(active6, 0x40000000000L, active7, 0x41000L);
      case 83:
      case 115:
         if ((active6 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 425);
         return jjMoveStringLiteralDfa3_1(active6, 0x1000000000000L, active7, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_1(active6, 0x3c380000000000L, active7, 0x1L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_1(active6, 0L, active7, 0x400L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_1(active6, 0x200000000000000L, active7, 0L);
      case 88:
      case 120:
         if ((active6 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 442);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_1(active6, 0xc00000000000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa3_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(1, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_1(active6, 0xc00000000000L, active7, 0x30L);
      case 49:
         return jjMoveStringLiteralDfa4_1(active6, 0x100000000000000L, active7, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_1(active6, 0L, active7, 0x10000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_1(active6, 0L, active7, 0x80L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_1(active6, 0x23c380000000000L, active7, 0x20400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_1(active6, 0x40000000000000L, active7, 0x100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_1(active6, 0x1000000000000000L, active7, 0x40001L);
      case 78:
      case 110:
         if ((active6 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 422);
         else if ((active6 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 423);
         else if ((active6 & 0x800000000000000L) != 0L)
            return jjStopAtPos(3, 443);
         return jjMoveStringLiteralDfa4_1(active6, 0L, active7, 0x82000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_1(active6, 0x1000000000000L, active7, 0L);
      case 82:
      case 114:
         if ((active6 & 0x10000000000L) != 0L)
            return jjStopAtPos(3, 424);
         return jjMoveStringLiteralDfa4_1(active6, 0x2000040000000000L, active7, 0x300000L);
      case 83:
      case 115:
         if ((active6 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 420);
         return jjMoveStringLiteralDfa4_1(active6, 0L, active7, 0x40L);
      case 84:
      case 116:
         if ((active7 & 0x1000L) != 0L)
            return jjStopAtPos(3, 460);
         return jjMoveStringLiteralDfa4_1(active6, 0x2000000000000L, active7, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_1(active6, 0x2000000000L, active7, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_1(active6, 0L, active7, 0x6L);
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa4_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(2, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_1(active6, 0x180000000000L, active7, 0x180000L);
      case 48:
         if ((active6 & 0x100000000000000L) != 0L)
            return jjStopAtPos(4, 440);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_1(active6, 0x3000000000000000L, active7, 0x40006L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_1(active6, 0L, active7, 0x2000L);
      case 69:
      case 101:
         if ((active7 & 0x100L) != 0L)
            return jjStopAtPos(4, 456);
         return jjMoveStringLiteralDfa5_1(active6, 0x40000000000L, active7, 0x40L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_1(active6, 0x3c000000000000L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_1(active6, 0x2000000000L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_1(active6, 0x1000000000000L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_1(active6, 0L, active7, 0x30L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_1(active6, 0x2400000000000L, active7, 0x81L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_1(active6, 0x200000000000000L, active7, 0x20400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_1(active6, 0x40800000000000L, active7, 0x10000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_1(active6, 0x200000000000L, active7, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_1(active6, 0L, active7, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa5_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(3, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_1(active6, 0x200000000000000L, active7, 0x20000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active6, 0x1200000000000L, active7, 0x2010L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_1(active6, 0L, active7, 0x80000L);
      case 69:
      case 101:
         if ((active7 & 0x10000L) != 0L)
            return jjStopAtPos(5, 464);
         return jjMoveStringLiteralDfa6_1(active6, 0x3c000000000000L, active7, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_1(active6, 0x400000000000L, active7, 0L);
      case 72:
      case 104:
         if ((active6 & 0x40000000000000L) != 0L)
            return jjStopAtPos(5, 438);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_1(active6, 0L, active7, 0x200020L);
      case 76:
      case 108:
         if ((active7 & 0x2L) != 0L)
         {
            jjmatchedKind = 449;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active6, 0L, active7, 0x4L);
      case 77:
      case 109:
         if ((active7 & 0x80L) != 0L)
            return jjStopAtPos(5, 455);
         break;
      case 78:
      case 110:
         if ((active6 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(5, 444);
         return jjMoveStringLiteralDfa6_1(active6, 0x2000040000000000L, active7, 0x40041L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_1(active6, 0x880000000000L, active7, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_1(active6, 0x2000000000000L, active7, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_1(active6, 0L, active7, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_1(active6, 0x102000000000L, active7, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa6_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(4, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_1(active6, 0xc00000000000L, active7, 0x4L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_1(active6, 0L, active7, 0x1L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_1(active6, 0x200000000000000L, active7, 0x60000L);
      case 69:
      case 101:
         if ((active7 & 0x400L) != 0L)
            return jjStopAtPos(6, 458);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_1(active6, 0x80000000000L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_1(active6, 0x2000000000000000L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_1(active6, 0x2000000000000L, active7, 0L);
      case 76:
      case 108:
         if ((active6 & 0x200000000000L) != 0L)
            return jjStopAtPos(6, 429);
         break;
      case 78:
      case 110:
         if ((active7 & 0x20L) != 0L)
            return jjStopAtPos(6, 453);
         return jjMoveStringLiteralDfa7_1(active6, 0L, active7, 0x200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_1(active6, 0x100000000000L, active7, 0x180000L);
      case 82:
      case 114:
         if ((active6 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 434;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active6, 0x38000000000000L, active7, 0x2000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_1(active6, 0x40000000000L, active7, 0x40L);
      case 88:
      case 120:
         if ((active7 & 0x10L) != 0L)
            return jjStopAtPos(6, 452);
         break;
      case 89:
      case 121:
         if ((active6 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 421);
         return jjMoveStringLiteralDfa7_1(active6, 0x1000000000000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa7_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(5, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_1(active6, 0x391c0000000000L, active7, 0x100040L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_1(active6, 0x202000000000000L, active7, 0x20000L);
      case 67:
      case 99:
         if ((active7 & 0x4L) != 0L)
            return jjStopAtPos(7, 450);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_1(active6, 0L, active7, 0x202000L);
      case 69:
      case 101:
         if ((active6 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(7, 445);
         else if ((active7 & 0x40000L) != 0L)
            return jjStopAtPos(7, 466);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_1(active6, 0x400000000000L, active7, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_1(active6, 0L, active7, 0x1L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_1(active6, 0L, active7, 0x80000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_1(active6, 0x800000000000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_1(6, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa8_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(6, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_1(active6, 0L, active7, 0x2001L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_1(active6, 0x40000000000L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_1(active6, 0x80000000000L, active7, 0L);
      case 76:
      case 108:
         if ((active6 & 0x2000000000000L) != 0L)
            return jjStopAtPos(8, 433);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_1(active6, 0x400000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_1(active6, 0x19000000000000L, active7, 0x200000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_1(active6, 0x20000000000000L, active7, 0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_1(active6, 0x200000000000000L, active7, 0x20000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_1(active6, 0L, active7, 0x40L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa9_1(active6, 0x900000000000L, active7, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_1(7, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa9_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(7, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_1(active6, 0x20040000000000L, active7, 0x40L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_1(active6, 0L, active7, 0x2000L);
      case 69:
      case 101:
         if ((active6 & 0x200000000000000L) != 0L)
            return jjStopAtPos(9, 441);
         else if ((active7 & 0x20000L) != 0L)
            return jjStopAtPos(9, 465);
         break;
      case 70:
      case 102:
         if ((active6 & 0x1000000000000L) != 0L)
            return jjStopAtPos(9, 432);
         return jjMoveStringLiteralDfa10_1(active6, 0x18000000000000L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_1(active6, 0L, active7, 0x80000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_1(active6, 0x80000000000L, active7, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_1(active6, 0L, active7, 0x1L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_1(active6, 0x400000000000L, active7, 0L);
      case 87:
      case 119:
         if ((active7 & 0x200000L) != 0L)
            return jjStopAtPos(9, 469);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa10_1(active6, 0x900000000000L, active7, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_1(8, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa10_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(8, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_1(active6, 0x18000000000000L, active7, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_1(active6, 0x400000000000L, active7, 0x2000L);
      case 70:
      case 102:
         if ((active7 & 0x1L) != 0L)
            return jjStopAtPos(10, 448);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_1(active6, 0L, active7, 0x80040L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_1(active6, 0x20000000000000L, active7, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_1(active6, 0xc0000000000L, active7, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa11_1(active6, 0x900000000000L, active7, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_1(9, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa11_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(9, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa12_1(active6, 0x18800000000000L, active7, 0L);
      case 69:
      case 101:
         if ((active6 & 0x40000000000L) != 0L)
            return jjStopAtPos(11, 426);
         return jjMoveStringLiteralDfa12_1(active6, 0x80000000000L, active7, 0x80000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_1(active6, 0x400000000000L, active7, 0L);
      case 84:
      case 116:
         if ((active6 & 0x20000000000000L) != 0L)
            return jjStopAtPos(11, 437);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_1(active6, 0L, active7, 0x40L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa12_1(active6, 0L, active7, 0x2000L);
      case 89:
      case 121:
         if ((active7 & 0x100000L) != 0L)
            return jjStopAtPos(11, 468);
         return jjMoveStringLiteralDfa12_1(active6, 0x100000000000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_1(10, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa12_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(10, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_1(active6, 0x18000000000000L, active7, 0L);
      case 68:
      case 100:
         if ((active7 & 0x80000L) != 0L)
            return jjStopAtPos(12, 467);
         return jjMoveStringLiteralDfa13_1(active6, 0x800000000000L, active7, 0L);
      case 69:
      case 101:
         if ((active7 & 0x40L) != 0L)
            return jjStopAtPos(12, 454);
         return jjMoveStringLiteralDfa13_1(active6, 0x400000000000L, active7, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa13_1(active6, 0x80000000000L, active7, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_1(active6, 0L, active7, 0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_1(active6, 0x100000000000L, active7, 0L);
      default :
         break;
   }
   return jjStartNfa_1(11, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa13_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(11, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_1(active6, 0L, active7, 0x2000L);
      case 68:
      case 100:
         if ((active6 & 0x800000000000L) != 0L)
            return jjStopAtPos(13, 431);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_1(active6, 0x80000000000L, active7, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa14_1(active6, 0x100000000000L, active7, 0L);
      case 82:
      case 114:
         if ((active6 & 0x400000000000L) != 0L)
            return jjStopAtPos(13, 430);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_1(active6, 0x8000000000000L, active7, 0L);
      case 89:
      case 121:
         if ((active6 & 0x10000000000000L) != 0L)
            return jjStopAtPos(13, 436);
         break;
      default :
         break;
   }
   return jjStartNfa_1(12, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa14_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(12, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 14;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_1(active6, 0x100000000000L, active7, 0L);
      case 69:
      case 101:
         if ((active6 & 0x8000000000000L) != 0L)
            return jjStopAtPos(14, 435);
         break;
      case 82:
      case 114:
         if ((active6 & 0x80000000000L) != 0L)
            return jjStopAtPos(14, 427);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_1(active6, 0L, active7, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(13, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa15_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(13, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
      return 15;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active6 & 0x100000000000L) != 0L)
            return jjStopAtPos(15, 428);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_1(active6, 0L, active7, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(14, 0L, 0L, 0L, 0L, 0L, 0L, active6, active7);
}
private int jjMoveStringLiteralDfa16_1(long old6, long active6, long old7, long active7)
{
   if (((active6 &= old6) | (active7 &= old7)) == 0L)
      return jjStartNfa_1(14, 0L, 0L, 0L, 0L, 0L, 0L, old6, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 16;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_1(active7, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(15, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjMoveStringLiteralDfa17_1(long old7, long active7)
{
   if (((active7 &= old7)) == 0L)
      return jjStartNfa_1(15, 0L, 0L, 0L, 0L, 0L, 0L, 0L, old7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
      return 17;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active7 & 0x2000L) != 0L)
            return jjStopAtPos(17, 461);
         break;
      default :
         break;
   }
   return jjStartNfa_1(16, 0L, 0L, 0L, 0L, 0L, 0L, 0L, active7);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddStates(172, 174);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(9, 8);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 12:
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(9, 8);
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(9, 8);
                  }
                  break;
               case 0:
                  if (curChar != 62)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(4, 6);
                  break;
               case 4:
                  jjCheckNAddTwoStates(4, 6);
                  break;
               case 5:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 6:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 8:
                  if (curChar != 10)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(9, 8);
                  break;
               case 9:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(9, 8);
                  break;
               case 10:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(172, 174);
                  break;
               case 11:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjAddStates(52, 53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(52, 53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   75, 76, 77, 70, 71, 72, 26, 28, 29, 21, 23, 24, 86, 88, 30, 87, 
   86, 30, 87, 82, 83, 86, 88, 30, 87, 67, 68, 69, 70, 71, 72, 75, 
   76, 77, 68, 69, 70, 71, 72, 75, 76, 77, 82, 83, 85, 60, 63, 50, 
   54, 58, 41, 45, 4, 6, 61, 62, 64, 65, 67, 6, 5, 69, 71, 8, 
   19, 10, 11, 31, 42, 33, 34, 47, 56, 1, 3, 1, 2, 5, 11, 13, 
   1, 5, 11, 13, 5, 6, 7, 11, 13, 5, 6, 11, 13, 108, 110, 111, 
   104, 106, 107, 95, 97, 98, 91, 93, 94, 42, 43, 44, 31, 46, 47, 49, 
   51, 52, 53, 54, 55, 56, 59, 60, 61, 100, 101, 104, 106, 107, 108, 110, 
   111, 91, 93, 94, 95, 97, 98, 52, 53, 54, 55, 56, 59, 60, 61, 24, 
   25, 26, 59, 60, 61, 54, 55, 56, 13, 15, 33, 35, 36, 37, 38, 43, 
   44, 31, 67, 69, 77, 79, 75, 87, 89, 32, 33, 35, 11, 9, 8, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\56", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\174\174", null, "\66\66", 
"\67\67", "\67\70", "\70\70", null, null, null, "\54", "\50", "\55", null, "\51", "\72", 
null, "\42", null, "\47", "\53", null, "\52", "\57", "\44", "\74", "\76", "\75", 
null, null, "\52\52", "\41\75", "\74\76", null, null, null, "\56", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\73", 
"\174\174", null, null, null, null, "\43", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "FUNCTION_STATE",
   "EXEC_STATE",
   "IN_COMMENT2",
   "EXEC_PROC_STATE",
   "PICTURE_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffff5fffffffffL, 
   0xfffffffffffffffbL, 0xc5ffffffffffffffL, 0x3ffbL, 
};
static final long[] jjtoSkip = {
   0x1e6L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x4L, 0x2000000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1e6L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x4L, 0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[112];
private final int[] jjstateSet = new int[224];
protected char curChar;
/** Constructor. */
public CobolParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public CobolParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 112; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 646)
       {
          jjmatchedKind = 646;
       }
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
