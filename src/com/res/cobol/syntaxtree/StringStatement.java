//
// Generated by JTB 1.3.2
//

package com.res.cobol.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> &lt;STRING&gt;
 * nodeList -> ( ( Identifier() | Literal() )+ [ &lt;DELIMITED&gt; [ &lt;BY&gt; ] ( Identifier() | Literal() | &lt;SIZE&gt; ) ] )+
 * nodeToken1 -> &lt;INTO&gt;
 * identifier -> Identifier()
 * nodeOptional -> [ [ &lt;WITH&gt; ] &lt;POINTER&gt; QualifiedDataName() ]
 * nodeOptional1 -> [ [ &lt;ON&gt; ] &lt;OVERFLOW&gt; StatementList() ]
 * nodeOptional2 -> [ &lt;NOT&gt; [ &lt;ON&gt; ] &lt;OVERFLOW&gt; StatementList() ]
 * nodeOptional3 -> [ &lt;END_STRING&gt; ]
 * </PRE>
 */
public class StringStatement extends com.res.cobol.RESNode implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public NodeList nodeList;
   public NodeToken nodeToken1;
   public Identifier identifier;
   public NodeOptional nodeOptional;
   public NodeOptional nodeOptional1;
   public NodeOptional nodeOptional2;
   public NodeOptional nodeOptional3;

   public StringStatement(NodeToken n0, NodeList n1, NodeToken n2, Identifier n3, NodeOptional n4, NodeOptional n5, NodeOptional n6, NodeOptional n7) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeList = n1;
      if ( nodeList != null ) nodeList.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      identifier = n3;
      if ( identifier != null ) identifier.setParent(this);
      nodeOptional = n4;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
      nodeOptional1 = n5;
      if ( nodeOptional1 != null ) nodeOptional1.setParent(this);
      nodeOptional2 = n6;
      if ( nodeOptional2 != null ) nodeOptional2.setParent(this);
      nodeOptional3 = n7;
      if ( nodeOptional3 != null ) nodeOptional3.setParent(this);
   }

   public StringStatement() {}

   public void accept(com.res.cobol.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.res.cobol.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.res.cobol.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.res.cobol.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

