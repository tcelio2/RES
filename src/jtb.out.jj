//
// Generated by JTB 1.3.2
//

options {
   STATIC = false;
   BUILD_PARSER = true;
   IGNORE_CASE = true;
   LOOKAHEAD = 2;
   DEBUG_PARSER = true;
   COMMON_TOKEN_ACTION = true;
   USER_CHAR_STREAM = true;
   TOKEN_EXTENDS = "com.res.cobol.RESToken";
}

PARSER_BEGIN(CobolParser)
package com.res.cobol.parser;

import com.res.common.RESConfig;
import com.res.cobol.syntaxtree.*;
import java.util.Vector;


public class CobolParser 
{
   private boolean notFollowedByEndExec()
   {
      int i = 1;
      while ( getToken(i).kind == COBOL_WORD || getToken(i).kind == IN|| getToken(i).kind == OF )
      {
         i = skipSubscripts(++i);
         if ( getToken(i).kind == PLUSCHAR || getToken(i).kind == MINUSCHAR|| getToken(i).kind == ASTERISKCHAR|| getToken(i).kind == SLASHCHAR )
            return false;
      }
      return true;
   }
   private boolean notFollowedByOp()
   {
      int i = 1;
      Token t;
      while ( canBeIdentifierOrNumber(t = getToken(i)) )
      {
         i = skipSubscripts(++i);
         if ( (t = getToken(i)).kind == PLUSCHAR || t.kind == PLUSCHAR_SUBS|| t.kind == MINUSCHAR_SUBS|| t.kind == ASTERISKCHAR|| t.kind == SLASHCHAR )
            return false;
      }
      return true;
   }
   private boolean notFollowedByRelOp()
   {
      int i = 1;
      Token t;
      while ( canBeIdentifierOrNumber(t = getToken(i)) )
      {
         i = skipSubscripts(++i);
         if ( (t = getToken(i)).kind == LESSTHANCHAR || t.kind == MORETHANCHAR|| t.kind == GREATER|| t.kind == LESS|| t.kind == EQUALCHAR|| t.kind == EQUAL|| t.kind == EQUALS|| t.kind == EQUALS|| t.kind == NOTEQUALCHAR|| t.kind == NOT )
            return false;
      }
      return true;
   }
   private boolean canBeIdentifierOrNumber(Token t)
   {
      return t.kind == COBOL_WORD || t.kind == IN|| t.kind == OF|| t.kind == IS|| t.kind == LEVEL_66|| t.kind == LEVEL_77|| t.kind == LEVEL_78|| t.kind == LEVEL_88|| t.kind == LEVEL_NUMBER|| t.kind == INTEGER|| t.kind == COMMA_INTEGER|| t.kind == MINUSCHAR|| t.kind == MINUSCHAR_SUBS|| t.kind == LPARENCHAR|| t.kind == DOTCHAR;
   }
   private int skipSubscripts(int i)
   {
      if ( getToken(i).kind == LPARENCHAR )
      {
         while ( getToken(++i).kind != RPARENCHAR && getToken(i).kind != DOT )
            ;
         if ( getToken(++i).kind == RPARENCHAR )
            i++;
      }
      return i;
   }
    class SkipToEndExec extends NodeList 
   {
      public SkipToEndExec(NodeList n0)
      {
          super();
         super.nodes.addAll(n0.nodes);
         if ( n0 != null )
            super.setParent(this);
      }
      public SkipToEndExec()
      {
         
      }
      public void accept(com.res.cobol.visitor.Visitor v)
      {
         v.visit(this);
      }
      public void setParent(Node n)
      {
         super.setParent(n);
      }
      public Node getParent()
      {
         return super.getParent();
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(CobolParser)

<DEFAULT, FUNCTION_STATE, EXEC_STATE, IN_COMMENT2> SPECIAL_TOKEN :
{
   <EOL: "\n">
   | <SPACECHAR: (" " | "\t" | "\f" | ";" | "\r")+>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

<DEFAULT, FUNCTION_STATE, EXEC_STATE, IN_COMMENT2> SPECIAL_TOKEN :
{
   <COMMENT: "*>" (~["\n", "\r"])*>
   | <SQL_COMMENT: "/*" (~[])* "*/">
   | <SPACE_SEPARATOR: (<SPACECHAR> | <EOL>)+>
}

<EXEC_PROC_STATE> SPECIAL_TOKEN :
{
   <SPACECHAR2: (" " | "\t" | "\f" | "\r" | "\n")+>
}

<EXEC_STATE, DEFAULT> TOKEN :
{
   <DOTCHAR: ".">
}

TOKEN :
{
   <DOT: ("." <SPACE_SEPARATOR>)>
}

TOKEN :
{
   <EXEC: "exec"> : EXEC_STATE
   | <EXECUTE: "execute"> : EXEC_STATE
}

<EXEC_STATE> TOKEN :
{
   <END_EXEC: "end-exec"> : DEFAULT
}

TOKEN :
{
   <ACCEPT: "accept">
   | <ACCESS: "access">
   | <ADD: "add">
   | <ADDRESS: "address">
   | <ADVANCING: "advancing">
   | <AFTER: "after">
   | <ALL: "all">
   | <ALPHABET: "alphabet">
   | <ALPHABETIC: "alphabetic">
   | <ALPHABETIC_LOWER: "alphabetic-lower">
   | <ALPHABETIC_UPPER: "alphabetic-upper">
   | <ALPHANUMERIC: "alphanumeric">
   | <ALPHANUMERIC_EDITED: "alphanumeric-edited">
   | <ALSO: "also">
   | <ALTER: "alter">
   | <ALTERNATE: "alternate">
   | <AND: "and">
   | <ANY: "any">
   | <APPROXIMATE: "approximate">
   | <ARE: "are">
   | <AREA: "area">
   | <AREAS: "areas">
   | <ASCENDING: "ascending">
   | <ASSIGN: "assign">
   | <AT: "at">
   | <AUTHOR: "author"> : IN_COMMENT2
   | <BEFORE: "before">
   | <BEGINNING: "beginning">
   | <BINARY: "binary">
   | <BLANK: "blank">
   | <BLOCK: "block">
   | <BOTTOM: "bottom">
   | <BY: "by">
   | <CALL: "call">
   | <CANCEL: "cancel">
   | <CD: "cd">
   | <CF: "cf">
   | <CH: "ch">
   | <CHARACTER: "character">
   | <CHARACTERS: "characters">
   | <CLASS: "class">
   | <CLOCK_UNITS: "clock-units">
   | <CLOSE: "close">
   | <COBOL: "cobol">
   | <CODE: "code">
   | <CODE_SET: "code-set">
   | <COLLATING: "collating">
   | <COLUMN: "column">
   | <COMMA: "comma">
   | <COMMON: "common">
   | <COMMUNICATION: "communication">
   | <COMP: "comp">
   | <COMP_1: "comp-1">
   | <COMP_2: "comp-2">
   | <COMP_3: "comp-3">
   | <COMP_4: "comp-4">
   | <COMP_5: "comp-5">
   | <COMPUTATIONAL: "computational">
   | <COMPUTATIONAL_1: "computational-1">
   | <COMPUTATIONAL_2: "computational-2">
   | <COMPUTATIONAL_3: "computational-3">
   | <COMPUTATIONAL_4: "computational-4">
   | <COMPUTATIONAL_5: "computational-5">
   | <COMPUTE: "compute">
   | <CONFIGURATION: "configuration">
   | <CONTAINS: "contains">
   | <CONTENT: "content">
   | <CONTINUE: "continue">
   | <CONTROL: "control">
   | <CONTROLS: "controls">
   | <CONVERTING: "converting">
   | <COPY: "copy">
   | <CORR: "corr">
   | <CORRESPONDING: "corresponding">
   | <COUNT: "count">
   | <CURRENCY: "currency">
   | <DATA: "data">
   | <DATE: "date">
   | <DATE_COMPILED: "date-compiled"> : IN_COMMENT2
   | <DATE_WRITTEN: "date-written"> : IN_COMMENT2
   | <DAY: "day">
   | <DAY_OF_WEEK: "day-of-week">
   | <DBCS: "dbcs">
   | <DE: "de">
   | <DEBUG_CONTENTS: "debug-contents">
   | <DEBUG_ITEM: "debug-item">
   | <DEBUG_LINE: "debug-line">
   | <DEBUG_NAME: "debug-name">
   | <DEBUG_SUB_1: "debug-sub-1">
   | <DEBUG_SUB_2: "debug-sub-2">
   | <DEBUG_SUB_3: "debug-sub-3">
   | <DEBUGGING: "debugging">
   | <DECIMAL_POINT: "decimal-point">
   | <DECLARATIVES: "declaratives">
   | <DELETE: "delete">
   | <DELIMITED: "delimited">
   | <DELIMITER: "delimiter">
   | <DEPENDING: "depending">
   | <DESCENDING: "descending">
   | <DESTINATION: "destination">
   | <DETAIL: "detail">
   | <DISABLE: "disable">
   | <DISK: "disk">
   | <DISPLAY: "display">
   | <DISPLAY_1: "display-1">
   | <DIVIDE: "divide">
   | <DIVISION: "division">
   | <DOWN: "down">
   | <DUPLICATES: "duplicates">
   | <DYNAMIC: "dynamic">
   | <EGCS: "egcs">
   | <EGI: "egi">
   | <ELSE: "else">
   | <EMI: "emi">
   | <ENABLE: "enable">
   | <END: "end">
   | <END_ADD: "end-add">
   | <END_CALL: "end-call">
   | <END_COMPUTE: "end-compute">
   | <END_DELETE: "end-delete">
   | <END_DIVIDE: "end-divide">
   | <END_EVALUATE: "end-evaluate">
   | <END_IF: "end-if">
   | <END_MULTIPLY: "end-multiply">
   | <END_OF_PAGE: "end-of-page">
   | <END_PERFORM: "end-perform">
   | <END_READ: "end-read">
   | <END_RECEIVE: "end-receive">
   | <END_RETURN: "end-return">
   | <END_REWRITE: "end-rewrite">
   | <END_SEARCH: "end-search">
   | <END_START: "end-start">
   | <END_STRING: "end-string">
   | <END_SUBTRACT: "end-subtract">
   | <END_UNSTRING: "end-unstring">
   | <END_WRITE: "end-write">
   | <ENDING: "endinf">
   | <ENTER: "enter">
   | <ENTRY: "entry">
   | <ENVIRONMENT: "environment">
   | <EOP: "eop">
   | <EQUAL: "equal">
   | <EQUALS: "equals">
   | <ERROR: "error">
   | <ESI: "esi">
   | <EVALUATE: "evaluate">
   | <EVERY: "every">
   | <EXCEPTION: "exception">
   | <EXIT: "exit">
   | <EXTEND: "extend">
   | <EXTERNAL: "external">
   | <FALSE: "false">
   | <FD: "fd">
   | <FILE: "file">
   | <FILE_CONTROL: "file-control">
   | <FILLER: "filler">
   | <FINAL: "final">
   | <FIRST: "first">
   | <FOOTING: "footing">
   | <FOR: "for">
   | <FROM: "from">
   | <FUNCTION: "function"> : FUNCTION_STATE
   | <FUNCTION_POINTER: "function-pointer">
   | <GENERATE: "generate">
   | <GOBACK: "goback">
   | <GENERIC: "generic">
   | <GIVING: "giving">
   | <GLOBAL: "global">
   | <GO: "go">
   | <GREATER: "greater">
   | <GROUP: "group">
   | <HEADING: "heading">
   | <HIGH_VALUE: "high-value">
   | <HIGH_VALUES: "high-values">
   | <I_O: "i-o">
   | <I_O_CONTROL: "i-o-control">
   | <ID: "id">
   | <IDENTIFICATION: "identification">
   | <IF: "if">
   | <IMPLICIT: "implicit">
   | <IN: "in">
   | <INDEX: "index">
   | <INDEXED: "indexed">
   | <INDICATE: "indicate">
   | <INITIAL: "initial">
   | <INITIALIZE: "initialize">
   | <INITIATE: "initiate">
   | <INPUT: "input">
   | <INPUT_OUTPUT: "input-output">
   | <INSPECT: "inspect">
   | <INSTALLATION: "installation"> : IN_COMMENT2
   | <INTO: "into">
   | <INVALID: "invalid">
   | <IS: "is">
   | <JUST: "just">
   | <JUSTIFIED: "justified">
   | <JUSTIFY: "justify">
   | <KANJI: "kanji">
   | <KEY: "key">
   | <LABEL: "label">
   | <LAST: "last">
   | <LEADING: "leading">
   | <LEFT: "left">
   | <LENGTH: "length">
   | <LESS: "less">
   | <LIMIT: "limit">
   | <LIMITS: "limits">
   | <LINAGE: "linage">
   | <LINAGE_COUNTER: "linage-counter">
   | <LINE: "line">
   | <LINES: "lines">
   | <LINE_COUNTER: "line-counter">
   | <LINKAGE: "linkage">
   | <LOCK: "lock">
   | <LOCKFILE: "lockfile">
   | <LOW_VALUE: "low-value">
   | <LOW_VALUES: "low-values">
   | <MEMORY: "memory">
   | <MERGE: "merge">
   | <MESSAGE: "message">
   | <MODE: "mode">
   | <MODULES: "modules">
   | <MORE_LABELS: "more-labels">
   | <MOVE: "move">
   | <MULTIPLE: "multiple">
   | <MULTIPLY: "multiply">
   | <NATIVE: "native">
   | <NEGATIVE: "negative">
   | <NEXT: "next">
   | <NO: "no">
   | <NOT: "not">
   | <NULL: "null">
   | <NULLS: "nulls">
   | <NUMBER: "number">
   | <NUMERIC: "numeric">
   | <NUMERIC_EDITED: "numeric-edited">
   | <OBJECT: "object">
   | <OBJECT_COMPUTER: "object-computer">
   | <OCCURS: "occurs">
   | <OF: "of">
   | <OFF: "off">
   | <OMITTED: "omitted">
   | <ON: "on">
   | <OPEN: "open">
   | <OPTIONAL: "optional">
   | <OR: "or">
   | <ORDER: "order">
   | <ORGANIZATION: "organization">
   | <OTHER: "other">
   | <OUTPUT: "output">
   | <OVERFLOW: "overflow">
   | <PACKED_DECIMAL: "packed-decimal">
   | <PADDING: "padding">
   | <PAGE: "page">
   | <PAGE_COUNTER: "page-counter">
   | <PASSWORD: "password">
   | <PERFORM: "perform">
   | <PF: "pf">
   | <PH: "ph">
   | <PIC: "pic">
   | <PICTURE: "picture">
   | <PLUS: "plus">
   | <POINTER: "pointer">
   | <POSITION: "position">
   | <POSITIVE: "positive">
   | <PRINTING: "printing">
   | <PROCEDURE: "procedure">
   | <PROCEDURE_POINTER: "procedure-pointer">
   | <PROCEDURES: "procedures">
   | <PROCEED: "proceed">
   | <PROGRAM: "program">
   | <PROGRAM_ID: "program-id">
   | <PROGRAM_STATUS: "program-status">
   | <PROMPT: "prompt">
   | <PROTECTED: "protected">
   | <PURGE: "purge">
   | <QUEUE: "queue">
   | <QUOTE: "quote">
   | <QUOTES: "quotes">
   | <RANDOM: "random">
   | <RD: "rd">
   | <READ: "read">
   | <RECEIVE: "receive">
   | <RECEIVE_CONTROL: "receive-control">
   | <RECORD: "record">
   | <RECORDING: "recording">
   | <RECORDS: "records">
   | <REDEFINES: "redefines">
   | <REEL: "reel">
   | <REFERENCE: "reference">
   | <REFERENCES: "references">
   | <RELATIVE: "relative">
   | <RELEASE: "release">
   | <REMAINDER: "remainder">
   | <REMOVAL: "removal">
   | <RENAMES: "renames">
   | <REPLACE: "replace">
   | <REPLACING: "replacing">
   | <REPLY: "reply">
   | <REPORT: "report">
   | <REPORTING: "reporting">
   | <REPORTS: "reports">
   | <RERUN: "rerun">
   | <RESERVE: "reserve">
   | <RESET: "reset">
   | <RETURN: "return">
   | <RETURN_CODE: "return-code">
   | <RETURNED: "returned">
   | <REVERSED: "reversed">
   | <REWIND: "rewind">
   | <REWRITE: "rewrite">
   | <RF: "rf">
   | <RH: "rh">
   | <RIGHT: "right">
   | <ROUNDED: "rounded">
   | <RUN: "run">
   | <SAME: "same">
   | <SD: "sd">
   | <SEARCH: "search">
   | <SECTION: "section">
   | <SECURITY: "security"> : IN_COMMENT2
   | <SEGMENT: "segment">
   | <SEGMENT_LIMIT: "segment-limit">
   | <SELECT: "select">
   | <SEND: "send">
   | <SENTENCE: "sentence">
   | <SEPARATE: "separate">
   | <SEQUENCE: "sequence">
   | <SEQUENTIAL: "sequential">
   | <SET: "set">
   | <SHARED: "shared">
   | <SHIFT_IN: "shift-in">
   | <SHIFT_OUT: "shift-out">
   | <SIGN: "sign">
   | <SIZE: "size">
   | <SORT: "sort">
   | <SORT_CONTROL: "sort-control">
   | <SORT_CORE_SIZE: "sort-core-size">
   | <SORT_FILE_SIZE: "sort-file-size">
   | <SORT_MERGE: "sort-merge">
   | <SORT_MESSAGE: "sort-message">
   | <SORT_MODE_SIZE: "sort-mode-size">
   | <SORT_RETURN: "sort-return">
   | <SOURCE: "source">
   | <SOURCE_COMPUTER: "source-computer">
   | <SPACE: "space">
   | <SPACES: "spaces">
   | <SPECIAL_NAMES: "special-names">
   | <STANDARD: "standard">
   | <STANDARD_1: "standard-1">
   | <STANDARD_2: "standard-2">
   | <START: "start">
   | <STATUS: "status">
   | <STOP: "stop">
   | <STRING: "string">
   | <SUB_QUEUE_1: "sub-queue-1">
   | <SUB_QUEUE_2: "sub-queue-2">
   | <SUB_QUEUE_3: "sub-queue-3">
   | <SUBTRACT: "subtract">
   | <SUM: "sum">
   | <SUPPRESS: "suppress">
   | <SYMBOLIC: "symbolic">
   | <SYNC: "sync">
   | <SYNCHRONIZED: "synchronized">
   | <TABLE: "table">
   | <TALLY: "tally">
   | <TALLYING: "tallying">
   | <TAPE: "tape">
   | <TERMINAL: "terminal">
   | <TERMINATE: "terminate">
   | <TEST: "test">
   | <TEXT: "text">
   | <THAN: "than">
   | <THEN: "then">
   | <THROUGH: "through">
   | <THRU: "thru">
   | <TIME: "time">
   | <TIMES: "times">
   | <TO: "to">
   | <TOP: "top">
   | <TRAILING: "trailing">
   | <TRUE: "true">
   | <TYPE: "type">
   | <UNIT: "unit">
   | <UNLOCK: "unlock">
   | <UNLOCKFILE: "unlockfile">
   | <UNLOCKRECORD: "unlockrecord">
   | <UNSTRING: "unstring">
   | <UNTIL: "until">
   | <UP: "up">
   | <UPON: "upon">
   | <USAGE: "usage">
   | <USE: "use">
   | <USING: "using">
   | <VALUE: "value">
   | <VALUES: "values">
   | <VARYING: "varying">
   | <WHEN: "when">
   | <WHEN_COMPILED: "when-compiled">
   | <WITH: "with">
   | <WORDS: "words">
   | <WORKING_STORAGE: "working-storage">
   | <WRITE: "write">
   | <ZERO: "zero">
   | <ZEROS: "zeros">
   | <ZEROES: "zeroes">
}

<FUNCTION_STATE> TOKEN :
{
   <F_ACOS: "ACOS"> : DEFAULT
   | <F_ANNUITY: "ANNUITY"> : DEFAULT
   | <F_ASIN: "ASIN"> : DEFAULT
   | <F_ATAN: "ATAN"> : DEFAULT
   | <F_CHAR: "CHAR"> : DEFAULT
   | <F_COS: "COS"> : DEFAULT
   | <F_CURRENT_DATE: "CURRENT-DATE"> : DEFAULT
   | <F_DATE_OF_INTEGER: "DATE-OF-INTEGER"> : DEFAULT
   | <F_DATE_TO_YYYYMMDD: "DATE-TO-YYYYMMDD"> : DEFAULT
   | <F_DATEVAL: "DATEVAL"> : DEFAULT
   | <F_DAY_OF_INTEGER: "DAY-OF-INTEGER"> : DEFAULT
   | <F_DAY_TO_YYYYDDD: "DAY-TO-YYYYDDD"> : DEFAULT
   | <F_DISPLAY_OF: "DISPLAY-OF"> : DEFAULT
   | <F_FACTORIAL: "FACTORIAL"> : DEFAULT
   | <F_INTEGER: "INTEGER"> : DEFAULT
   | <F_INTEGER_OF_DATE: "INTEGER-OF-DATE"> : DEFAULT
   | <F_INTEGER_OF_DAY: "INTEGER-OF-DAY"> : DEFAULT
   | <F_INTEGER_PART: "INTEGER-PART"> : DEFAULT
   | <F_LENGTH: "LENGTH"> : DEFAULT
   | <F_LOG: "LOG"> : DEFAULT
   | <F_LOG10: "LOG10"> : DEFAULT
   | <F_LOWER_CASE: "LOWER-CASE"> : DEFAULT
   | <F_MAX: "MAX"> : DEFAULT
   | <F_MEAN: "MEAN"> : DEFAULT
   | <F_MEDIAN: "MEDIAN"> : DEFAULT
   | <F_MIDRANGE: "MIDRANGE"> : DEFAULT
   | <F_MIN: "MIN"> : DEFAULT
   | <F_MOD: "MOD"> : DEFAULT
   | <F_NATIONAL_OF: "NATIONAL-OF"> : DEFAULT
   | <F_NUMVAL: "NUMVAL"> : DEFAULT
   | <F_NUMVAL_C: "NUMVAL-C"> : DEFAULT
   | <F_ORD: "ORD"> : DEFAULT
   | <F_ORD_MAX: "ORD-MAX"> : DEFAULT
   | <F_ORD_MIN: "ORD-MIN"> : DEFAULT
   | <F_PRESENT_VALUE: "PRESENT-VALUE"> : DEFAULT
   | <F_RANDOM: "RANDOM"> : DEFAULT
   | <F_RANGE: "RANGE"> : DEFAULT
   | <F_REM: "REM"> : DEFAULT
   | <F_REVERSE: "REVERSE"> : DEFAULT
   | <F_SIN: "SIN"> : DEFAULT
   | <F_SQRT: "SQRT"> : DEFAULT
   | <F_STANDARD_DEVIATION: "STANDARD-DEVIATION"> : DEFAULT
   | <F_SUM: "SUM"> : DEFAULT
   | <F_TAN: "TAN"> : DEFAULT
   | <F_UNDATE: "UNDATE"> : DEFAULT
   | <F_UPPER_CASE: "UPPER-CASE"> : DEFAULT
   | <F_VARIANCE: "VARIANCE"> : DEFAULT
   | <F_WHEN_COMPILED: "WHEN-COMPILED"> : DEFAULT
   | <F_YEAR_TO_YYYY: "YEAR-TO-YYYY"> : DEFAULT
   | <F_YEARWINDOW: "YEARWINDOW"> : DEFAULT
}

<EXEC_STATE> TOKEN :
{
   <CONCAT: "||">
}

TOKEN :
{
   <HEXNUMBER: ("X\"" (<DIGIT> | ["a"-"f"])+ "\"" | "X'" (<DIGIT> | ["a"-"f"])+ "'")>
   | <LEVEL_66: "66">
   | <LEVEL_77: "77">
   | <LEVEL_78: "78">
   | <LEVEL_88: "88">
   | <LEVEL_NUMBER: (("0" ["1"-"9"]) | (["1"-"4"] <DIGIT>))>
   | <INTEGER: (["0"-"9"])+>
   | <COMMA_INTEGER: ((<DIGIT>)+ "," (<DIGIT>)+)+>
}

<EXEC_STATE, DEFAULT> TOKEN :
{
   <COMMACHAR: ",">
}

<EXEC_STATE, DEFAULT> TOKEN :
{
   <LPARENCHAR: "(">
   | <MINUSCHAR: "-">
   | <MINUSCHAR_SUBS: (<SPACE_SEPARATOR> "-" <SPACE_SEPARATOR>)>
   | <RPARENCHAR: ")">
   | <COLONCHAR: ":">
   | <#DOUBLEDQUOTECHAR: "\"\"">
   | <QUOTECHAR: "\"">
   | <#DOUBLEDAPOSTROPHE: "''">
   | <APOSTROPHE: "'">
   | <PLUSCHAR: "+">
   | <PLUSCHAR_SUBS: (<SPACE_SEPARATOR> "+" <SPACE_SEPARATOR>)>
   | <ASTERISKCHAR: "*">
   | <SLASHCHAR: "/">
   | <DOLLARCHAR: "$">
   | <LESSTHANCHAR: "<">
   | <MORETHANCHAR: ">">
   | <EQUALCHAR: "=">
   | <MORETHANOREQUAL: <MORETHANCHAR> <EQUALCHAR>>
   | <LESSTHANOREQUAL: <LESSTHANCHAR> <EQUALCHAR>>
   | <POW: "**">
   | <JAVA_NE: "!=">
   | <NOTEQUALCHAR: "<>">
}

<IN_COMMENT2> TOKEN :
{
   <ENVIRONMENT_DIVISION: ("environment" (" " | "\t" | "\f" | ";" | "\r")+ "division" (" " | "\t" | "\f" | ";" | "\r")* "." (" " | "\t" | "\f" | ";" | "\r")*)> : DEFAULT
   | <DATA_DIVISION: ("data" (" " | "\t" | "\f" | ";" | "\r")+ "division" (" " | "\t" | "\f" | ";" | "\r")* "." (" " | "\t" | "\f" | ";" | "\r")*)> : DEFAULT
   | <PROCEDURE_DIVISION: ("procedure" (" " | "\t" | "\f" | ";" | "\r")+ "division" (" " | "\t" | "\f" | ";" | "\r")*)> : DEFAULT
}

<IN_COMMENT2> TOKEN :
{
   <DOT2: ".">
}

<IN_COMMENT2> TOKEN :
{
   <AUTHOR2: "author">
}

<IN_COMMENT2> TOKEN :
{
   <SECURITY2: "security">
}

<IN_COMMENT2> TOKEN :
{
   <DATE_WRITTEN2: "date-written">
}

<IN_COMMENT2> TOKEN :
{
   <DATE_COMPILED2: "date-compiled">
}

<IN_COMMENT2> TOKEN :
{
   <INSTALLATION2: "installation">
}

<IN_COMMENT2> TOKEN :
{
   <COMMENT2: ((~[".", "\r", "\n"])+ | <COMMENT>)>
}

<PICTURE_STATE> TOKEN :
{
   <PICTURE_STRING: (([".", "$"] | "CR" | "DB")? ((["A", "B", "E", "G", "P", "S", "V", "X", "Z", "9", "0", "+", "-", "*", "$"])+ ("(" (["0"-"9"])+ ")")?)+ ((["/", ",", ".", ":"]) ((["A", "B", "E", "G", "P", "S", "V", "X", "Z", "9", "0", "+", "-", "*", "$"])+ ("(" (["0"-"9"])+ ")")?)+)* ("CR" | "DB")?)> : DEFAULT
}

<PICTURE_STATE> TOKEN :
{
   <PICTURE_IS: "is">
}

<PICTURE_STATE> SPECIAL_TOKEN :
{
   <PICTURE_SPACE: (<SPACECHAR> | <EOL>)+>
}

<EXEC_STATE> TOKEN :
{
   <K_ALL: "ALL">
   | <K_ALTER: "ALTER">
   | <K_AND: "AND">
   | <K_ANY: "ANY">
   | <K_AS: "AS">
   | <K_ASC: "ASC">
   | <K_BEGIN: "BEGIN">
   | <K_BETWEEN: "BETWEEN">
   | <K_BINARY_SQL_INTEGER: "BINARY_SQL_INTEGER">
   | <K_BOOLEAN: "BOOLEAN">
   | <K_BY: "BY">
   | <K_CHAR: "CHAR">
   | <K_CLOSE: "CLOSE">
   | <K_COMMENT: "COMMENT">
   | <K_COMMIT: "COMMIT">
   | <K_CONNECT: "CONNECT">
   | <K_CONSTANT: "CONSTANT">
   | <K_CURRENT: "CURRENT">
   | <K_CURSOR: "CURSOR">
   | <K_DATE: "DATE">
   | <K_DECLARE: "DECLARE">
   | <K_DEFAULT: "DEFAULT">
   | <K_DELETE: "DELETE">
   | <K_DESC: "DESC">
   | <K_DISTINCT: "DISTINCT">
   | <K_DO: "DO">
   | <K_ELSE: "ELSE">
   | <K_ELSIF: "ELSIF">
   | <K_END: "END">
   | <K_EXCEPTION: "EXCEPTION">
   | <K_EXCEPTION_INIT: "EXCEPTION_INIT">
   | <K_EXCLUSIVE: "EXCLUSIVE">
   | <K_EXISTS: "EXISTS">
   | <K_EXIT: "EXIT">
   | <K_FETCH: "FETCH">
   | <K_FLOAT: "FLOAT">
   | <K_FOR: "FOR">
   | <K_FROM: "FROM">
   | <K_FUNCTION: "FUNCTION">
   | <K_GOTO: "GOTO">
   | <K_GROUP: "GROUP">
   | <K_HAVING: "HAVING">
   | <K_IF: "IF">
   | <K_IN: "IN">
   | <K_INCLUDE: "INCLUDE">
   | <K_INDEX: "INDEX">
   | <K_INDICATOR: "INDICATOR">
   | <K_INSERT: "INSERT">
   | <K_SQL_INTEGER: "SQL_INTEGER">
   | <K_INTERSECT: "INTERSECT">
   | <K_INTO: "INTO">
   | <K_IS: "IS">
   | <K_JOIN: "JOIN">
   | <K_LIKE: "LIKE">
   | <K_LOCK: "LOCK">
   | <K_LOOP: "LOOP">
   | <K_MINUS: "MINUS">
   | <K_MODE: "MODE">
   | <K_NATURAL: "NATURAL">
   | <K_NOT: "NOT">
   | <K_NOWAIT: "NOWAIT">
   | <K_NULL: "NULL">
   | <K_NUMBER: "NUMBER">
   | <K_OF: "OF">
   | <K_ONLY: "ONLY">
   | <K_OPEN: "OPEN">
   | <K_OR: "OR">
   | <K_ON: "ON">
   | <K_ORDER: "ORDER">
   | <K_OTHERS: "OTHERS">
   | <K_OUT: "OUT">
   | <K_PACKAGE: "PACKAGE">
   | <K_POSITIVE: "POSITIVE">
   | <K_PREPARE: "PREPARE">
   | <K_PRAGMA: "PRAGMA">
   | <K_PRIOR: "PRIOR">
   | <K_PROCEDURE: "PROCEDURE">
   | <K_RAISE: "RAISE">
   | <K_READ: "READ">
   | <K_REAL: "REAL">
   | <K_RECORD: "RECORD">
   | <K_REF: "REF">
   | <K_RETURN: "RETURN">
   | <K_REVERSE: "REVERSE">
   | <K_ROLLBACK: "ROLLBACK">
   | <K_ROW: "ROW">
   | <K_SAVEPOINT: "SAVEPOINT">
   | <K_SECTION: "SECTION">
   | <K_SEGMENT: "SEGMENT">
   | <K_SELECT: "SELECT">
   | <K_SESSION: "SESSION">
   | <K_SET: "SET">
   | <K_SHARE: "SHARE">
   | <K_SMALLINT: "SMALLINT">
   | <K_SQL: "SQL">
   | <K_START: "START">
   | <K_TABLE: "TABLE">
   | <K_THEN: "THEN">
   | <K_TO: "TO">
   | <K_TRANSACTION: "TRANSACTION">
   | <K_UNION: "UNION">
   | <K_UPDATE: "UPDATE">
   | <K_USE: "USE">
   | <K_USING: "USING">
   | <K_VALUES: "VALUES">
   | <K_VARCHAR2: "VARCHAR2">
   | <K_VARCHAR: "VARCHAR">
   | <K_WHEN: "WHEN">
   | <K_WHERE: "WHERE">
   | <K_WHILE: "WHILE">
   | <K_WITH: "WITH">
   | <K_WORK: "WORK">
   | <K_WRITE: "WRITE">
   | <K_EXECUTE: "EXECUTE">
   | <K_WHENEVER: "WHENEVER">
   | <K_SQLERROR: ("SQLERROR" (<DO>)?)> : DEFAULT
   | <K_SQLWARNING: ("SQLWARNING" (<DO>)?)> : DEFAULT
   | <K_FOUND: ("FOUND" (<DO>)?)> : DEFAULT
}

<EXEC_STATE> TOKEN :
{
   <#DO: (([" ", "\t"])+ "DO")>
}

<EXEC_STATE> TOKEN :
{
   <S_NUMBER: <FLOAT> | <FLOAT> (["e", "E"] (["-", "+"])? <FLOAT>)?>
   | <#FLOAT: <SQL_INTEGER> | <SQL_INTEGER> ("." <SQL_INTEGER>)? | "." <SQL_INTEGER>>
   | <#SQL_INTEGER: (<DIGIT>)+>
}

SKIP :
{
   <TRIVIAL: ("END-EXEC" | "EJECT" | "SKIP1" | "SKIP2" | "SKIP3")>
}

TOKEN :
{
   <QUOTEDSTRING: (<QUOTECHAR> (~["\""] | <DOUBLEDQUOTECHAR>)* <QUOTECHAR> | <APOSTROPHE> (~["'"] | <DOUBLEDAPOSTROPHE>)* <APOSTROPHE>)>
   | <COBOL_WORD: ((<DIGIT>)+ (<MINUSCHAR>)*)* (<DIGIT>)* <LETTER> (<LETTER> | <DIGIT>)* ((<MINUSCHAR>)+ (<LETTER> | <DIGIT>)+)*>
}

<EXEC_STATE> TOKEN :
{
   <SQL: <K_SQL>>
   | <S_IDENTIFIER: (<LETTER>)+ (<DIGIT> | <LETTER> | <SPECIAL_CHARS>)*>
   | <#SPECIAL_CHARS: "$" | "_" | "-">
   | <S_BIND: (":" ([" "])* <S_IDENTIFIER> ("." <S_IDENTIFIER>)?)>
   | <S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")* | <QUOTEDSTRING>>
   | <S_QUOTED_IDENTIFIER: <QUOTEDSTRING>>
}

<EXEC_STATE> TOKEN :
{
   <ANY_CHAR: ~[]>
}

TOKEN_MGR_DECLS:{
   public static java.util.ArrayList commentLines = new java.util.ArrayList();
   public static Token lastToken = null;
   public void CommonTokenAction(Token t)
   {
      lastToken = t;
      if ( t.specialToken == null )
         return;
      Token tmp_t = t.specialToken;
      while ( tmp_t.specialToken != null )
         tmp_t = tmp_t.specialToken;
      while ( tmp_t != null )
      {
         if ( tmp_t.kind == CobolParserConstants.COMMENT || tmp_t.kind == CobolParserConstants.COMMENT2 )
            commentLines.add(tmp_t);
         tmp_t = tmp_t.next;
      }
   }
}


CobolWord CobolWord() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<COBOL_WORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CobolWord();} 
   { return new CobolWord(n0); }
}

IntegerConstant IntegerConstant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   
}
{
try {
   (
      n2=<LEVEL_66> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<LEVEL_77> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<LEVEL_78> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<LEVEL_88> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<LEVEL_NUMBER> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<INTEGER> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<COMMA_INTEGER> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new IntegerConstant();} 
   { return new IntegerConstant(n0); }
}

NumericConstant NumericConstant() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeSequence n7;
   IntegerConstant n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   IntegerConstant n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   IntegerConstant n16;
   IntegerConstant n17;

   
}
{
try {
   (
      (
         n3=<PLUSCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<MINUSCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      )
      { n0.addNode(n1); }
   )?
   (
      (
         LOOKAHEAD(IntegerConstant() <DOTCHAR>)
         { n7 = new NodeSequence(4); }
         n8=IntegerConstant()
         { n7.addNode(n8); }
         n10=<DOTCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n7.addNode(n9); }
         (
            n12=IntegerConstant()
            { n11.addNode(n12); }
         )?
         { n7.addNode(n11); }
         { n6 = new NodeChoice(n7, 0); }
      |
         LOOKAHEAD(<DOTCHAR>)
         { n13 = new NodeSequence(3); }
         n15=<DOTCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
         n16=IntegerConstant()
         { n13.addNode(n16); }
         { n6 = new NodeChoice(n13, 1); }
      |
         LOOKAHEAD(IntegerConstant())
         n17=IntegerConstant()
         { n6 = new NodeChoice(n17, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new NumericConstant();} 
   { return new NumericConstant(n0,n6); }
}

LevelNumber LevelNumber() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<LEVEL_NUMBER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new LevelNumber();} 
   { return new LevelNumber(n0); }
}

FigurativeConstant FigurativeConstant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
try {
   (
      n2=<ZERO> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<ZEROS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<ZEROES> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<SPACE> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<SPACES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<HIGH_VALUE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<HIGH_VALUES> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<LOW_VALUE> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<LOW_VALUES> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<QUOTE> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<QUOTES> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<NULL> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<NULLS> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new FigurativeConstant();} 
   { return new FigurativeConstant(n0); }
}

NonNumericConstant NonNumericConstant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
try {
   (
      (
         n2=<QUOTEDSTRING> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<HEXNUMBER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new NonNumericConstant();} 
   { return new NonNumericConstant(n0); }
}

Literal Literal() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NonNumericConstant n4;
   NumericConstant n5;
   FigurativeConstant n6;
   IntrinsicFunction n7;
   SpecialRegister n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeChoice n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   FileName n19;

   
}
{
try {
   (
      n2=<ALL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      (
         n4=NonNumericConstant()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=NumericConstant()
         { n3 = new NodeChoice(n5, 1); }
      |
         n6=FigurativeConstant()
         { n3 = new NodeChoice(n6, 2); }
      |
         LOOKAHEAD(<FUNCTION>)
         n7=IntrinsicFunction()
         { n3 = new NodeChoice(n7, 3); }
      |
         n8=SpecialRegister()
         { n3 = new NodeChoice(n8, 4); }
      |
         LOOKAHEAD(<LINAGE_COUNTER>)
         { n9 = new NodeSequence(3); }
         n11=<LINAGE_COUNTER> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            { n13 = new NodeSequence(2); }
            (
               (
                  n16=<IN> { n15 = JTBToolkit.makeNodeToken(n16); }
                  { n14 = new NodeChoice(n15, 0); }
               |
                  n18=<OF> { n17 = JTBToolkit.makeNodeToken(n18); }
                  { n14 = new NodeChoice(n17, 1); }
               )
               
            )
            { n13.addNode(n14); }
            n19=FileName()
            { n13.addNode(n19); }
            { n12.addNode(n13); }
         )?
         { n9.addNode(n12); }
         { n3 = new NodeChoice(n9, 5); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new Literal();} 
   { return new Literal(n0,n3); }
}

Condition Condition() :
{
   CombinableCondition n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   CombinableCondition n9;
   AbbreviationRest n10;

   
}
{
try {
   n0=CombinableCondition()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<AND> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<OR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      (
         (
            LOOKAHEAD(CombinableCondition())
            n9=CombinableCondition()
            { n8 = new NodeChoice(n9, 0); }
         |
            LOOKAHEAD(AbbreviationRest())
            n10=AbbreviationRest()
            { n8 = new NodeChoice(n10, 1); }
         )
         
      )
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new Condition();} 
   { return new Condition(n0,n1); }
}

CombinableCondition CombinableCondition() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   SimpleCondition n3;

   
}
{
try {
   (
      n2=<NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=SimpleCondition()
   
} catch(ParseException e) {
	error_skipto(DOT); return new CombinableCondition();} 
   { return new CombinableCondition(n0,n3); }
}

SimpleCondition SimpleCondition() :
{
   NodeChoice n0;
   ClassCondition n1;
   RelationCondition n2;
   ConditionNameCondition n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Condition n7;
   NodeToken n8;
   Token n9;

   
}
{
try {
   (
      (
         LOOKAHEAD(ClassCondition())
         n1=ClassCondition()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(RelationCondition())
         n2=RelationCondition()
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(2147483647, ConditionNameCondition(), { notFollowedByOp() })
         n3=ConditionNameCondition()
         { n0 = new NodeChoice(n3, 2); }
      |
         { n4 = new NodeSequence(3); }
         n6=<LPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=Condition()
         { n4.addNode(n7); }
         n9=<RPARENCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n4.addNode(n8); }
         { n0 = new NodeChoice(n4, 3); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SimpleCondition();} 
   { return new SimpleCondition(n0); }
}

ClassCondition ClassCondition() :
{
   Identifier n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   ClassName n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   
}
{
try {
   n0=Identifier()
   (
      n3=<IS> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   (
      n6=<NOT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      (
         n9=<NUMERIC> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<ALPHABETIC> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n13=<ALPHABETIC_LOWER> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7 = new NodeChoice(n12, 2); }
      |
         n15=<ALPHABETIC_UPPER> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n7 = new NodeChoice(n14, 3); }
      |
         n16=ClassName()
         { n7 = new NodeChoice(n16, 4); }
      |
         n18=<DBCS> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n7 = new NodeChoice(n17, 5); }
      |
         n20=<KANJI> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n7 = new NodeChoice(n19, 6); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new ClassCondition();} 
   { return new ClassCondition(n0,n1,n4,n7); }
}

ConditionNameCondition ConditionNameCondition() :
{
   ConditionNameReference n0;

   
}
{
try {
   n0=ConditionNameReference()
   
} catch(ParseException e) {
	error_skipto(DOT); return new ConditionNameCondition();} 
   { return new ConditionNameCondition(n0); }
}

RelationCondition RelationCondition() :
{
   ArithmeticExpression n0;
   NodeChoice n1;
   NodeSequence n2;
   RelationalOperator n3;
   ArithmeticExpression n4;
   SignCondition n5;

   
}
{
try {
   n0=ArithmeticExpression()
   (
      (
         LOOKAHEAD(RelationalOperator())
         { n2 = new NodeSequence(3); }
         n3=RelationalOperator()
         { n2.addNode(n3); }
         n4=ArithmeticExpression()
         { n2.addNode(n4); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=SignCondition()
         { n1 = new NodeChoice(n5, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new RelationCondition();} 
   { return new RelationCondition(n0,n1); }
}

SignCondition SignCondition() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   
}
{
try {
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<NOT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n8=<POSITIVE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n10=<NEGATIVE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n6 = new NodeChoice(n9, 1); }
      |
         (
            (
               n13=<ZERO> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n11 = new NodeChoice(n12, 0); }
            |
               n15=<ZEROS> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n11 = new NodeChoice(n14, 1); }
            |
               n17=<ZEROES> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n11 = new NodeChoice(n16, 2); }
            )
            
         )
         { n6 = new NodeChoice(n11, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SignCondition();} 
   { return new SignCondition(n0,n3,n6); }
}

RelationalOperator RelationalOperator() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeOptional n32 = new NodeOptional();
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   NodeOptional n40 = new NodeOptional();
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeSequence n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48 = new NodeOptional();
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeSequence n53;
   NodeChoice n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeOptional n59 = new NodeOptional();
   NodeToken n60;
   Token n61;
   NodeSequence n62;
   NodeToken n63;
   Token n64;
   NodeOptional n65 = new NodeOptional();
   NodeToken n66;
   Token n67;
   NodeToken n68;
   Token n69;

   
}
{
try {
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<NOT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         LOOKAHEAD(3)
         { n7 = new NodeSequence(6); }
         n9=<GREATER> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<THAN> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         n14=<OR> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n7.addNode(n13); }
         n16=<EQUAL> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n7.addNode(n15); }
         (
            n19=<TO> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
         )?
         { n7.addNode(n17); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n21=<MORETHANOREQUAL> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n6 = new NodeChoice(n20, 1); }
      |
         LOOKAHEAD(3)
         { n22 = new NodeSequence(6); }
         n24=<LESS> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
         (
            n27=<THAN> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
         )?
         { n22.addNode(n25); }
         n29=<OR> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n22.addNode(n28); }
         n31=<EQUAL> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n22.addNode(n30); }
         (
            n34=<TO> { n33 = JTBToolkit.makeNodeToken(n34); }
            { n32.addNode(n33); }
         )?
         { n22.addNode(n32); }
         { n6 = new NodeChoice(n22, 2); }
      |
         n36=<LESSTHANOREQUAL> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n6 = new NodeChoice(n35, 3); }
      |
         LOOKAHEAD(3)
         { n37 = new NodeSequence(3); }
         n39=<GREATER> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n37.addNode(n38); }
         (
            n42=<THAN> { n41 = JTBToolkit.makeNodeToken(n42); }
            { n40.addNode(n41); }
         )?
         { n37.addNode(n40); }
         { n6 = new NodeChoice(n37, 4); }
      |
         n44=<MORETHANCHAR> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n6 = new NodeChoice(n43, 5); }
      |
         LOOKAHEAD(3)
         { n45 = new NodeSequence(3); }
         n47=<LESS> { n46 = JTBToolkit.makeNodeToken(n47); }
         { n45.addNode(n46); }
         (
            n50=<THAN> { n49 = JTBToolkit.makeNodeToken(n50); }
            { n48.addNode(n49); }
         )?
         { n45.addNode(n48); }
         { n6 = new NodeChoice(n45, 6); }
      |
         n52=<LESSTHANCHAR> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n6 = new NodeChoice(n51, 7); }
      |
         { n53 = new NodeSequence(2); }
         (
            (
               n56=<EQUAL> { n55 = JTBToolkit.makeNodeToken(n56); }
               { n54 = new NodeChoice(n55, 0); }
            |
               n58=<EQUALS> { n57 = JTBToolkit.makeNodeToken(n58); }
               { n54 = new NodeChoice(n57, 1); }
            )
            
         )
         { n53.addNode(n54); }
         (
            n61=<TO> { n60 = JTBToolkit.makeNodeToken(n61); }
            { n59.addNode(n60); }
         )?
         { n53.addNode(n59); }
         { n6 = new NodeChoice(n53, 8); }
      |
         { n62 = new NodeSequence(2); }
         n64=<EQUALCHAR> { n63 = JTBToolkit.makeNodeToken(n64); }
         { n62.addNode(n63); }
         (
            n67=<TO> { n66 = JTBToolkit.makeNodeToken(n67); }
            { n65.addNode(n66); }
         )?
         { n62.addNode(n65); }
         { n6 = new NodeChoice(n62, 9); }
      |
         n69=<NOTEQUALCHAR> { n68 = JTBToolkit.makeNodeToken(n69); }
         { n6 = new NodeChoice(n68, 10); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new RelationalOperator();} 
   { return new RelationalOperator(n0,n3,n6); }
}

AbbreviationRest AbbreviationRest() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeOptional n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   RelationalOperator n6;
   AbbreviationLeaf n7;

   
}
{
try {
   (
      { n2 = new NodeOptional(); }
      { n5 = new NodeOptional(); }
      { n1 = new NodeSequence(3); }
      (
         n4=<NOT> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
      )?
      { n1.addNode(n2); }
      (
         n6=RelationalOperator()
         { n5.addNode(n6); }
      )?
      { n1.addNode(n5); }
      n7=AbbreviationLeaf()
      { n1.addNode(n7); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new AbbreviationRest();} 
   { return new AbbreviationRest(n0); }
}

AbbreviationLeaf AbbreviationLeaf() :
{
   NodeChoice n0;
   ArithmeticExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ArithmeticExpression n5;
   AbbreviationRest n6;
   NodeToken n7;
   Token n8;

   
}
{
try {
   (
      (
         n1=ArithmeticExpression()
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(4); }
         n4=<LPARENCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=ArithmeticExpression()
         { n2.addNode(n5); }
         n6=AbbreviationRest()
         { n2.addNode(n6); }
         n8=<RPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2.addNode(n7); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new AbbreviationLeaf();} 
   { return new AbbreviationLeaf(n0); }
}

ProcedureName ProcedureName() :
{
   NodeChoice n0;
   NodeSequence n1;
   ParagraphName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   SectionName n10;
   SectionName n11;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(2); }
         n2=ParagraphName()
         { n1.addNode(n2); }
         (
            { n4 = new NodeSequence(2); }
            (
               (
                  n7=<IN> { n6 = JTBToolkit.makeNodeToken(n7); }
                  { n5 = new NodeChoice(n6, 0); }
               |
                  n9=<OF> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n5 = new NodeChoice(n8, 1); }
               )
               
            )
            { n4.addNode(n5); }
            n10=SectionName()
            { n4.addNode(n10); }
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n11=SectionName()
         { n0 = new NodeChoice(n11, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new ProcedureName();} 
   { return new ProcedureName(n0); }
}

Identifier Identifier() :
{
   NodeChoice n0;
   NodeSequence n1;
   QualifiedDataName n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Subscript n7;
   NodeListOptional n8;
   NodeSequence n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   Subscript n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   LeftmostCharacterPosition n20;
   NodeToken n21;
   Token n22;
   NodeOptional n23;
   Length n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(3); }
         n2=QualifiedDataName()
         { n1.addNode(n2); }
         (
            LOOKAHEAD(<LPARENCHAR> Subscript() ( [ <COMMACHAR> ] Subscript() )* <RPARENCHAR>)
            { n8 = new NodeListOptional(); }
            { n4 = new NodeSequence(4); }
            n6=<LPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
            n7=Subscript()
            { n4.addNode(n7); }
            (
               LOOKAHEAD({ getToken(1).kind != RPARENCHAR })
               { n10 = new NodeOptional(); }
               { n9 = new NodeSequence(2); }
               (
                  n12=<COMMACHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
                  { n10.addNode(n11); }
               )?
               { n9.addNode(n10); }
               n13=Subscript()
               { n9.addNode(n13); }
               { n8.addNode(n9); }
            )*
            { n8.nodes.trimToSize(); }
            { n4.addNode(n8); }
            n15=<RPARENCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n4.addNode(n14); }
            { n3.addNode(n4); }
         )*
         { n3.nodes.trimToSize(); }
         { n1.addNode(n3); }
         (
            LOOKAHEAD(<LPARENCHAR> LeftmostCharacterPosition() <COLONCHAR>)
            { n23 = new NodeOptional(); }
            { n17 = new NodeSequence(5); }
            n19=<LPARENCHAR> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
            n20=LeftmostCharacterPosition()
            { n17.addNode(n20); }
            n22=<COLONCHAR> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n17.addNode(n21); }
            (
               n24=Length()
               { n23.addNode(n24); }
            )?
            { n17.addNode(n23); }
            n26=<RPARENCHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
            { n17.addNode(n25); }
            { n16.addNode(n17); }
         )?
         { n1.addNode(n16); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n28=<RETURN_CODE> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n0 = new NodeChoice(n27, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new Identifier();} 
   { return new Identifier(n0); }
}

QualifiedDataName QualifiedDataName() :
{
   NodeSequence n0;
   DataName n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   DataName n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   FileName n17;

   
}
{
try {
   (
      { n0 = new NodeSequence(3); }
      n1=DataName()
      { n0.addNode(n1); }
      (
         { n3 = new NodeSequence(2); }
         (
            (
               n6=<IN> { n5 = JTBToolkit.makeNodeToken(n6); }
               { n4 = new NodeChoice(n5, 0); }
            |
               n8=<OF> { n7 = JTBToolkit.makeNodeToken(n8); }
               { n4 = new NodeChoice(n7, 1); }
            )
            
         )
         { n3.addNode(n4); }
         n9=DataName()
         { n3.addNode(n9); }
         { n2.addNode(n3); }
      )*
      { n2.nodes.trimToSize(); }
      { n0.addNode(n2); }
      (
         { n11 = new NodeSequence(2); }
         (
            (
               n14=<IN> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12 = new NodeChoice(n13, 0); }
            |
               n16=<OF> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n12 = new NodeChoice(n15, 1); }
            )
            
         )
         { n11.addNode(n12); }
         n17=FileName()
         { n11.addNode(n17); }
         { n10.addNode(n11); }
      )?
      { n0.addNode(n10); }
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new QualifiedDataName();} 
   { return new QualifiedDataName(n0); }
}

IntrinsicFunction IntrinsicFunction() :
{
   NodeSequence n0;
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   NodeToken n52;
   Token n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   NodeToken n64;
   Token n65;
   NodeToken n66;
   Token n67;
   NodeToken n68;
   Token n69;
   NodeToken n70;
   Token n71;
   NodeToken n72;
   Token n73;
   NodeToken n74;
   Token n75;
   NodeToken n76;
   Token n77;
   NodeToken n78;
   Token n79;
   NodeToken n80;
   Token n81;
   NodeToken n82;
   Token n83;
   NodeToken n84;
   Token n85;
   NodeToken n86;
   Token n87;
   NodeToken n88;
   Token n89;
   NodeToken n90;
   Token n91;
   NodeToken n92;
   Token n93;
   NodeToken n94;
   Token n95;
   NodeToken n96;
   Token n97;
   NodeToken n98;
   Token n99;
   NodeToken n100;
   Token n101;
   NodeToken n102;
   Token n103;
   NodeOptional n104 = new NodeOptional();
   NodeSequence n105;
   NodeToken n106;
   Token n107;
   NodeOptional n108;
   NodeChoice n109;
   NodeSequence n110;
   QualifiedDataName n111;
   NodeToken n112;
   Token n113;
   NodeList n114;
   NodeSequence n115;
   NodeToken n116;
   Token n117;
   NodeOptional n118;
   NodeToken n119;
   Token n120;
   NodeToken n121;
   Token n122;
   NodeSequence n123;
   FunctionArgument n124;
   NodeListOptional n125;
   NodeSequence n126;
   NodeOptional n127;
   NodeToken n128;
   Token n129;
   FunctionArgument n130;
   NodeToken n131;
   Token n132;

   
}
{
try {
   (
      { n0 = new NodeSequence(3); }
      n2=<FUNCTION> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
      (
         (
            n5=<F_ACOS> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<F_ANNUITY> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<F_ASIN> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         |
            n11=<F_ATAN> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n3 = new NodeChoice(n10, 3); }
         |
            n13=<F_CHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n3 = new NodeChoice(n12, 4); }
         |
            n15=<F_COS> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n3 = new NodeChoice(n14, 5); }
         |
            n17=<F_CURRENT_DATE> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n3 = new NodeChoice(n16, 6); }
         |
            n19=<F_DATE_OF_INTEGER> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n3 = new NodeChoice(n18, 7); }
         |
            n21=<F_DATE_TO_YYYYMMDD> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n3 = new NodeChoice(n20, 8); }
         |
            n23=<F_DATEVAL> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n3 = new NodeChoice(n22, 9); }
         |
            n25=<F_DAY_OF_INTEGER> { n24 = JTBToolkit.makeNodeToken(n25); }
            { n3 = new NodeChoice(n24, 10); }
         |
            n27=<F_DAY_TO_YYYYDDD> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n3 = new NodeChoice(n26, 11); }
         |
            n29=<F_DISPLAY_OF> { n28 = JTBToolkit.makeNodeToken(n29); }
            { n3 = new NodeChoice(n28, 12); }
         |
            n31=<F_FACTORIAL> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n3 = new NodeChoice(n30, 13); }
         |
            n33=<F_INTEGER> { n32 = JTBToolkit.makeNodeToken(n33); }
            { n3 = new NodeChoice(n32, 14); }
         |
            n35=<F_INTEGER_OF_DATE> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n3 = new NodeChoice(n34, 15); }
         |
            n37=<F_INTEGER_OF_DAY> { n36 = JTBToolkit.makeNodeToken(n37); }
            { n3 = new NodeChoice(n36, 16); }
         |
            n39=<F_INTEGER_PART> { n38 = JTBToolkit.makeNodeToken(n39); }
            { n3 = new NodeChoice(n38, 17); }
         |
            n41=<F_LENGTH> { n40 = JTBToolkit.makeNodeToken(n41); }
            { n3 = new NodeChoice(n40, 18); }
         |
            n43=<F_LOG> { n42 = JTBToolkit.makeNodeToken(n43); }
            { n3 = new NodeChoice(n42, 19); }
         |
            n45=<F_LOG10> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n3 = new NodeChoice(n44, 20); }
         |
            n47=<F_LOWER_CASE> { n46 = JTBToolkit.makeNodeToken(n47); }
            { n3 = new NodeChoice(n46, 21); }
         |
            n49=<F_MAX> { n48 = JTBToolkit.makeNodeToken(n49); }
            { n3 = new NodeChoice(n48, 22); }
         |
            n51=<F_MEAN> { n50 = JTBToolkit.makeNodeToken(n51); }
            { n3 = new NodeChoice(n50, 23); }
         |
            n53=<F_MEDIAN> { n52 = JTBToolkit.makeNodeToken(n53); }
            { n3 = new NodeChoice(n52, 24); }
         |
            n55=<F_MIDRANGE> { n54 = JTBToolkit.makeNodeToken(n55); }
            { n3 = new NodeChoice(n54, 25); }
         |
            n57=<F_MIN> { n56 = JTBToolkit.makeNodeToken(n57); }
            { n3 = new NodeChoice(n56, 26); }
         |
            n59=<F_MOD> { n58 = JTBToolkit.makeNodeToken(n59); }
            { n3 = new NodeChoice(n58, 27); }
         |
            n61=<F_NATIONAL_OF> { n60 = JTBToolkit.makeNodeToken(n61); }
            { n3 = new NodeChoice(n60, 28); }
         |
            n63=<F_NUMVAL> { n62 = JTBToolkit.makeNodeToken(n63); }
            { n3 = new NodeChoice(n62, 29); }
         |
            n65=<F_NUMVAL_C> { n64 = JTBToolkit.makeNodeToken(n65); }
            { n3 = new NodeChoice(n64, 30); }
         |
            n67=<F_ORD> { n66 = JTBToolkit.makeNodeToken(n67); }
            { n3 = new NodeChoice(n66, 31); }
         |
            n69=<F_ORD_MAX> { n68 = JTBToolkit.makeNodeToken(n69); }
            { n3 = new NodeChoice(n68, 32); }
         |
            n71=<F_ORD_MIN> { n70 = JTBToolkit.makeNodeToken(n71); }
            { n3 = new NodeChoice(n70, 33); }
         |
            n73=<F_PRESENT_VALUE> { n72 = JTBToolkit.makeNodeToken(n73); }
            { n3 = new NodeChoice(n72, 34); }
         |
            n75=<F_RANDOM> { n74 = JTBToolkit.makeNodeToken(n75); }
            { n3 = new NodeChoice(n74, 35); }
         |
            n77=<F_RANGE> { n76 = JTBToolkit.makeNodeToken(n77); }
            { n3 = new NodeChoice(n76, 36); }
         |
            n79=<F_REM> { n78 = JTBToolkit.makeNodeToken(n79); }
            { n3 = new NodeChoice(n78, 37); }
         |
            n81=<F_REVERSE> { n80 = JTBToolkit.makeNodeToken(n81); }
            { n3 = new NodeChoice(n80, 38); }
         |
            n83=<F_SIN> { n82 = JTBToolkit.makeNodeToken(n83); }
            { n3 = new NodeChoice(n82, 39); }
         |
            n85=<F_SQRT> { n84 = JTBToolkit.makeNodeToken(n85); }
            { n3 = new NodeChoice(n84, 40); }
         |
            n87=<F_STANDARD_DEVIATION> { n86 = JTBToolkit.makeNodeToken(n87); }
            { n3 = new NodeChoice(n86, 41); }
         |
            n89=<F_SUM> { n88 = JTBToolkit.makeNodeToken(n89); }
            { n3 = new NodeChoice(n88, 42); }
         |
            n91=<F_TAN> { n90 = JTBToolkit.makeNodeToken(n91); }
            { n3 = new NodeChoice(n90, 43); }
         |
            n93=<F_UNDATE> { n92 = JTBToolkit.makeNodeToken(n93); }
            { n3 = new NodeChoice(n92, 44); }
         |
            n95=<F_UPPER_CASE> { n94 = JTBToolkit.makeNodeToken(n95); }
            { n3 = new NodeChoice(n94, 45); }
         |
            n97=<F_VARIANCE> { n96 = JTBToolkit.makeNodeToken(n97); }
            { n3 = new NodeChoice(n96, 46); }
         |
            n99=<F_WHEN_COMPILED> { n98 = JTBToolkit.makeNodeToken(n99); }
            { n3 = new NodeChoice(n98, 47); }
         |
            n101=<F_YEAR_TO_YYYY> { n100 = JTBToolkit.makeNodeToken(n101); }
            { n3 = new NodeChoice(n100, 48); }
         |
            n103=<F_YEARWINDOW> { n102 = JTBToolkit.makeNodeToken(n103); }
            { n3 = new NodeChoice(n102, 49); }
         )
         
      )
      { n0.addNode(n3); }
      (
         { n108 = new NodeOptional(); }
         { n105 = new NodeSequence(3); }
         n107=<LPARENCHAR> { n106 = JTBToolkit.makeNodeToken(n107); }
         { n105.addNode(n106); }
         (
            { n114 = new NodeList(); }
            { n125 = new NodeListOptional(); }
            (
               LOOKAHEAD(QualifiedDataName() <LPARENCHAR> ( <ALL> [ <COMMACHAR> ] )+ <RPARENCHAR>)
               { n110 = new NodeSequence(5); }
               n111=QualifiedDataName()
               { n110.addNode(n111); }
               n113=<LPARENCHAR> { n112 = JTBToolkit.makeNodeToken(n113); }
               { n110.addNode(n112); }
               (
                  { n118 = new NodeOptional(); }
                  { n115 = new NodeSequence(2); }
                  n117=<ALL> { n116 = JTBToolkit.makeNodeToken(n117); }
                  { n115.addNode(n116); }
                  (
                     n120=<COMMACHAR> { n119 = JTBToolkit.makeNodeToken(n120); }
                     { n118.addNode(n119); }
                  )?
                  { n115.addNode(n118); }
                  { n114.addNode(n115); }
               )+
               { n114.nodes.trimToSize(); }
               { n110.addNode(n114); }
               n122=<RPARENCHAR> { n121 = JTBToolkit.makeNodeToken(n122); }
               { n110.addNode(n121); }
               { n109 = new NodeChoice(n110, 0); }
            |
               LOOKAHEAD(FunctionArgument())
               { n123 = new NodeSequence(3); }
               n124=FunctionArgument()
               { n123.addNode(n124); }
               (
                  LOOKAHEAD([ <COMMACHAR> ] FunctionArgument())
                  { n127 = new NodeOptional(); }
                  { n126 = new NodeSequence(2); }
                  (
                     n129=<COMMACHAR> { n128 = JTBToolkit.makeNodeToken(n129); }
                     { n127.addNode(n128); }
                  )?
                  { n126.addNode(n127); }
                  n130=FunctionArgument()
                  { n126.addNode(n130); }
                  { n125.addNode(n126); }
               )*
               { n125.nodes.trimToSize(); }
               { n123.addNode(n125); }
               { n109 = new NodeChoice(n123, 1); }
            )
            { n108.addNode(n109); }
         )?
         { n105.addNode(n108); }
         n132=<RPARENCHAR> { n131 = JTBToolkit.makeNodeToken(n132); }
         { n105.addNode(n131); }
         { n104.addNode(n105); }
      )?
      { n0.addNode(n104); }
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new IntrinsicFunction();} 
   { return new IntrinsicFunction(n0); }
}

FunctionArgument FunctionArgument() :
{
   NodeChoice n0;
   Identifier n1;
   Literal n2;
   ArithmeticExpression n3;

   
}
{
try {
   (
      LOOKAHEAD(Identifier(), { notFollowedByOp() })
      n1=Identifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(Literal(), { notFollowedByOp() })
      n2=Literal()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(ArithmeticExpression())
      n3=ArithmeticExpression()
      { n0 = new NodeChoice(n3, 2); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new FunctionArgument();} 
   { return new FunctionArgument(n0); }
}

Length Length() :
{
   ArithmeticExpression n0;

   
}
{
try {
   n0=ArithmeticExpression()
   
} catch(ParseException e) {
	error_skipto(DOT); return new Length();} 
   { return new Length(n0); }
}

LeftmostCharacterPosition LeftmostCharacterPosition() :
{
   ArithmeticExpression n0;

   
}
{
try {
   n0=ArithmeticExpression()
   
} catch(ParseException e) {
	error_skipto(DOT); return new LeftmostCharacterPosition();} 
   { return new LeftmostCharacterPosition(n0); }
}

ConditionNameReference ConditionNameReference() :
{
   ConditionName n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   DataName n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   FileName n18;
   NodeListOptional n19 = new NodeListOptional();
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   Subscript n23;
   NodeListOptional n24;
   NodeSequence n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   Subscript n29;
   NodeToken n30;
   Token n31;
   NodeListOptional n32 = new NodeListOptional();
   NodeSequence n33;
   NodeChoice n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   MnemonicName n39;

   
}
{
try {
   n0=ConditionName()
   (
      (
         { n2 = new NodeSequence(3); }
         (
            { n4 = new NodeSequence(2); }
            (
               (
                  n7=<IN> { n6 = JTBToolkit.makeNodeToken(n7); }
                  { n5 = new NodeChoice(n6, 0); }
               |
                  n9=<OF> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n5 = new NodeChoice(n8, 1); }
               )
               
            )
            { n4.addNode(n5); }
            n10=DataName()
            { n4.addNode(n10); }
            { n3.addNode(n4); }
         )*
         { n3.nodes.trimToSize(); }
         { n2.addNode(n3); }
         (
            { n12 = new NodeSequence(2); }
            (
               (
                  n15=<IN> { n14 = JTBToolkit.makeNodeToken(n15); }
                  { n13 = new NodeChoice(n14, 0); }
               |
                  n17=<OF> { n16 = JTBToolkit.makeNodeToken(n17); }
                  { n13 = new NodeChoice(n16, 1); }
               )
               
            )
            { n12.addNode(n13); }
            n18=FileName()
            { n12.addNode(n18); }
            { n11.addNode(n12); }
         )?
         { n2.addNode(n11); }
         (
            { n24 = new NodeListOptional(); }
            { n20 = new NodeSequence(4); }
            n22=<LPARENCHAR> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n20.addNode(n21); }
            n23=Subscript()
            { n20.addNode(n23); }
            (
               { n26 = new NodeOptional(); }
               { n25 = new NodeSequence(2); }
               (
                  n28=<COMMACHAR> { n27 = JTBToolkit.makeNodeToken(n28); }
                  { n26.addNode(n27); }
               )?
               { n25.addNode(n26); }
               n29=Subscript()
               { n25.addNode(n29); }
               { n24.addNode(n25); }
            )*
            { n24.nodes.trimToSize(); }
            { n20.addNode(n24); }
            n31=<RPARENCHAR> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n20.addNode(n30); }
            { n19.addNode(n20); }
         )*
         { n19.nodes.trimToSize(); }
         { n2.addNode(n19); }
         { n1 = new NodeChoice(n2, 0); }
      |
         (
            { n33 = new NodeSequence(2); }
            (
               (
                  n36=<IN> { n35 = JTBToolkit.makeNodeToken(n36); }
                  { n34 = new NodeChoice(n35, 0); }
               |
                  n38=<OF> { n37 = JTBToolkit.makeNodeToken(n38); }
                  { n34 = new NodeChoice(n37, 1); }
               )
               
            )
            { n33.addNode(n34); }
            n39=MnemonicName()
            { n33.addNode(n39); }
            { n32.addNode(n33); }
         )*
         { n32.nodes.trimToSize(); }
         { n1 = new NodeChoice(n32, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new ConditionNameReference();} 
   { return new ConditionNameReference(n0,n1); }
}

Subscript Subscript() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   IntegerConstant n14;
   NodeSequence n15;
   QualifiedDataName n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   IntegerConstant n24;
   NodeSequence n25;
   IndexName n26;
   NodeOptional n27 = new NodeOptional();
   NodeSequence n28;
   NodeChoice n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   IntegerConstant n34;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(2); }
         (
            (
               (
                  (
                     n6=<PLUSCHAR_SUBS> { n5 = JTBToolkit.makeNodeToken(n6); }
                     { n4 = new NodeChoice(n5, 0); }
                  |
                     n8=<PLUSCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
                     { n4 = new NodeChoice(n7, 1); }
                  )
                  
               )
               { n3 = new NodeChoice(n4, 0); }
            |
               (
                  (
                     n11=<MINUSCHAR_SUBS> { n10 = JTBToolkit.makeNodeToken(n11); }
                     { n9 = new NodeChoice(n10, 0); }
                  |
                     n13=<MINUSCHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
                     { n9 = new NodeChoice(n12, 1); }
                  )
                  
               )
               { n3 = new NodeChoice(n9, 1); }
            )
            { n2.addNode(n3); }
         )?
         { n1.addNode(n2); }
         n14=IntegerConstant()
         { n1.addNode(n14); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n15 = new NodeSequence(2); }
         n16=QualifiedDataName()
         { n15.addNode(n16); }
         (
            { n18 = new NodeSequence(2); }
            (
               (
                  n21=<PLUSCHAR_SUBS> { n20 = JTBToolkit.makeNodeToken(n21); }
                  { n19 = new NodeChoice(n20, 0); }
               |
                  n23=<MINUSCHAR_SUBS> { n22 = JTBToolkit.makeNodeToken(n23); }
                  { n19 = new NodeChoice(n22, 1); }
               )
               
            )
            { n18.addNode(n19); }
            n24=IntegerConstant()
            { n18.addNode(n24); }
            { n17.addNode(n18); }
         )?
         { n15.addNode(n17); }
         { n0 = new NodeChoice(n15, 1); }
      |
         { n25 = new NodeSequence(2); }
         n26=IndexName()
         { n25.addNode(n26); }
         (
            { n28 = new NodeSequence(2); }
            (
               (
                  n31=<PLUSCHAR_SUBS> { n30 = JTBToolkit.makeNodeToken(n31); }
                  { n29 = new NodeChoice(n30, 0); }
               |
                  n33=<MINUSCHAR_SUBS> { n32 = JTBToolkit.makeNodeToken(n33); }
                  { n29 = new NodeChoice(n32, 1); }
               )
               
            )
            { n28.addNode(n29); }
            n34=IntegerConstant()
            { n28.addNode(n34); }
            { n27.addNode(n28); }
         )?
         { n25.addNode(n27); }
         { n0 = new NodeChoice(n25, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new Subscript();} 
   { return new Subscript(n0); }
}

Mode Mode() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new Mode();} 
   { return new Mode(n0); }
}

AlphabetName AlphabetName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new AlphabetName();} 
   { return new AlphabetName(n0); }
}

ClassName ClassName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new ClassName();} 
   { return new ClassName(n0); }
}

ConditionName ConditionName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new ConditionName();} 
   { return new ConditionName(n0); }
}

DataName DataName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataName();} 
   { return new DataName(n0); }
}

FileName FileName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new FileName();} 
   { return new FileName(n0); }
}

IndexName IndexName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new IndexName();} 
   { return new IndexName(n0); }
}

MnemonicName MnemonicName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new MnemonicName();} 
   { return new MnemonicName(n0); }
}

RecordName RecordName() :
{
   QualifiedDataName n0;

   
}
{
try {
   n0=QualifiedDataName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new RecordName();} 
   { return new RecordName(n0); }
}

RoutineName RoutineName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new RoutineName();} 
   { return new RoutineName(n0); }
}

SymbolicCharacter SymbolicCharacter() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SymbolicCharacter();} 
   { return new SymbolicCharacter(n0); }
}

LibraryName LibraryName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new LibraryName();} 
   { return new LibraryName(n0); }
}

ProgramName ProgramName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new ProgramName();} 
   { return new ProgramName(n0); }
}

CdName CdName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new CdName();} 
   { return new CdName(n0); }
}

SectionName SectionName() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   CobolWord n13;

   
}
{
try {
   (
      n2=<LEVEL_66> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<LEVEL_77> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<LEVEL_78> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<LEVEL_88> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<LEVEL_NUMBER> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<INTEGER> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n13=CobolWord()
      { n0 = new NodeChoice(n13, 6); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SectionName();} 
   { return new SectionName(n0); }
}

ParagraphName ParagraphName() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   CobolWord n13;

   
}
{
try {
   (
      n2=<LEVEL_66> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<LEVEL_77> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<LEVEL_78> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<LEVEL_88> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<LEVEL_NUMBER> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<INTEGER> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n13=CobolWord()
      { n0 = new NodeChoice(n13, 6); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new ParagraphName();} 
   { return new ParagraphName(n0); }
}

SystemName SystemName() :
{
   CobolWord n0;

   
}
{
try {
   n0=CobolWord()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SystemName();} 
   { return new SystemName(n0); }
}

ComputerName ComputerName() :
{
   SystemName n0;

   
}
{
try {
   n0=SystemName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new ComputerName();} 
   { return new ComputerName(n0); }
}

LanguageName LanguageName() :
{
   SystemName n0;

   
}
{
try {
   n0=SystemName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new LanguageName();} 
   { return new LanguageName(n0); }
}

EnvironmentName EnvironmentName() :
{
   SystemName n0;

   
}
{
try {
   n0=SystemName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new EnvironmentName();} 
   { return new EnvironmentName(n0); }
}

AssignmentName AssignmentName() :
{
   SystemName n0;

   
}
{
try {
   n0=SystemName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new AssignmentName();} 
   { return new AssignmentName(n0); }
}

BasisName BasisName() :
{
   ProgramName n0;

   
}
{
try {
   n0=ProgramName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new BasisName();} 
   { return new BasisName(n0); }
}

SpecialRegister SpecialRegister() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   DataName n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Identifier n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<ADDRESS> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<OF> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n6=DataName()
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(3); }
         n9=<LENGTH> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n11=<OF> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7.addNode(n10); }
         n12=Identifier()
         { n7.addNode(n12); }
         { n0 = new NodeChoice(n7, 1); }
      |
         n14=<DEBUG_LINE> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 2); }
      |
         n16=<DEBUG_NAME> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 3); }
      |
         n18=<DEBUG_CONTENTS> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 4); }
      |
         n20=<DEBUG_ITEM> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 5); }
      |
         n22=<DEBUG_SUB_1> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 6); }
      |
         n24=<DEBUG_SUB_2> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n0 = new NodeChoice(n23, 7); }
      |
         n26=<DEBUG_SUB_3> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n0 = new NodeChoice(n25, 8); }
      |
         n28=<RETURN_CODE> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n0 = new NodeChoice(n27, 9); }
      |
         n30=<SHIFT_OUT> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n0 = new NodeChoice(n29, 10); }
      |
         n32=<SHIFT_IN> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n0 = new NodeChoice(n31, 11); }
      |
         n34=<SORT_CONTROL> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n0 = new NodeChoice(n33, 12); }
      |
         n36=<SORT_CORE_SIZE> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n0 = new NodeChoice(n35, 13); }
      |
         n38=<SORT_FILE_SIZE> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n0 = new NodeChoice(n37, 14); }
      |
         n40=<SORT_MESSAGE> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n0 = new NodeChoice(n39, 15); }
      |
         n42=<SORT_MODE_SIZE> { n41 = JTBToolkit.makeNodeToken(n42); }
         { n0 = new NodeChoice(n41, 16); }
      |
         n44=<SORT_RETURN> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n0 = new NodeChoice(n43, 17); }
      |
         n46=<TALLY> { n45 = JTBToolkit.makeNodeToken(n46); }
         { n0 = new NodeChoice(n45, 18); }
      |
         n48=<WHEN_COMPILED> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n0 = new NodeChoice(n47, 19); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SpecialRegister();} 
   { return new SpecialRegister(n0); }
}

ArithmeticExpression ArithmeticExpression() :
{
   TimesDiv n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   TimesDiv n14;

   
}
{
try {
   n0=TimesDiv()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            (
               (
                  n6=<PLUSCHAR_SUBS> { n5 = JTBToolkit.makeNodeToken(n6); }
                  { n4 = new NodeChoice(n5, 0); }
               |
                  n8=<PLUSCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
                  { n4 = new NodeChoice(n7, 1); }
               )
               
            )
            { n3 = new NodeChoice(n4, 0); }
         |
            (
               (
                  n11=<MINUSCHAR_SUBS> { n10 = JTBToolkit.makeNodeToken(n11); }
                  { n9 = new NodeChoice(n10, 0); }
               |
                  n13=<MINUSCHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
                  { n9 = new NodeChoice(n12, 1); }
               )
               
            )
            { n3 = new NodeChoice(n9, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n14=TimesDiv()
      { n2.addNode(n14); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ArithmeticExpression();} 
   { return new ArithmeticExpression(n0,n1); }
}

TimesDiv TimesDiv() :
{
   Power n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Power n8;

   
}
{
try {
   n0=Power()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<ASTERISKCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<SLASHCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=Power()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new TimesDiv();} 
   { return new TimesDiv(n0,n1); }
}

Power Power() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Basis n12;
   NodeListOptional n13 = new NodeListOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   Basis n17;

   
}
{
try {
   (
      (
         (
            (
               (
                  n4=<PLUSCHAR_SUBS> { n3 = JTBToolkit.makeNodeToken(n4); }
                  { n2 = new NodeChoice(n3, 0); }
               |
                  n6=<PLUSCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
                  { n2 = new NodeChoice(n5, 1); }
               )
               
            )
            { n1 = new NodeChoice(n2, 0); }
         |
            (
               (
                  n9=<MINUSCHAR_SUBS> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n7 = new NodeChoice(n8, 0); }
               |
                  n11=<MINUSCHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
                  { n7 = new NodeChoice(n10, 1); }
               )
               
            )
            { n1 = new NodeChoice(n7, 1); }
         )
         
      )
      { n0.addNode(n1); }
   )?
   n12=Basis()
   (
      { n14 = new NodeSequence(2); }
      n16=<POW> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n17=Basis()
      { n14.addNode(n17); }
      { n13.addNode(n14); }
   )*
   { n13.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new Power();} 
   { return new Power(n0,n12,n13); }
}

Basis Basis() :
{
   NodeChoice n0;
   Identifier n1;
   Literal n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ArithmeticExpression n6;
   NodeToken n7;
   Token n8;

   
}
{
try {
   (
      (
         LOOKAHEAD(Identifier())
         n1=Identifier()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(Literal())
         n2=Literal()
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(<LPARENCHAR>)
         { n3 = new NodeSequence(4); }
         n5=<LPARENCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=ArithmeticExpression()
         { n3.addNode(n6); }
         n8=<RPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new Basis();} 
   { return new Basis(n0); }
}

CommentLine CommentLine() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;

   
}
{
try {
   (
      { n4 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n3=<COMMENT2> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n6=<DOT2> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommentLine();} 
   { return new CommentLine(n0); }
}

CompilationUnit CompilationUnit() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeSequence n1;
   ProgramUnit n2;
   NodeListOptional n3;
   NestedProgramUnit n4;
   NodeOptional n5;
   EndProgramStatement n6;
   NodeToken n7;
   Token n8;

   
}
{
try {
   (
      { n3 = new NodeListOptional(); }
      { n5 = new NodeOptional(); }
      { n1 = new NodeSequence(3); }
      n2=ProgramUnit()
      { n1.addNode(n2); }
      (
         LOOKAHEAD(<IDENTIFICATION> | <ID>)
         n4=NestedProgramUnit()
         { n3.addNode(n4); }
      )*
      { n3.nodes.trimToSize(); }
      { n1.addNode(n3); }
      (
         n6=EndProgramStatement()
         { n5.addNode(n6); }
      )?
      { n1.addNode(n5); }
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n8=<EOF> { 
      n8.beginColumn++; n8.endColumn++;
      n7 = JTBToolkit.makeNodeToken(n8);
   }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CompilationUnit();} 
   { return new CompilationUnit(n0,n7); }
}

ProgramUnit ProgramUnit() :
{
   IdentificationDivision n0;
   NodeOptional n1 = new NodeOptional();
   EnvironmentDivision n2;
   NodeOptional n3 = new NodeOptional();
   DataDivision n4;
   NodeOptional n5 = new NodeOptional();
   ProcedureDivision n6;

   
}
{
try {
   n0=IdentificationDivision()
   (
      n2=EnvironmentDivision()
      { n1.addNode(n2); }
   )?
   (
      n4=DataDivision()
      { n3.addNode(n4); }
   )?
   (
      n6=ProcedureDivision()
      { n5.addNode(n6); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new ProgramUnit();} 
   { return new ProgramUnit(n0,n1,n3,n5); }
}

NestedProgramUnit NestedProgramUnit() :
{
   NestedIdentificationDivision n0;
   NodeOptional n1 = new NodeOptional();
   EnvironmentDivision n2;
   NodeOptional n3 = new NodeOptional();
   DataDivision n4;
   NodeOptional n5 = new NodeOptional();
   ProcedureDivision n6;
   NodeListOptional n7 = new NodeListOptional();
   NestedProgramUnit n8;
   EndProgramStatement n9;

   
}
{
try {
   n0=NestedIdentificationDivision()
   (
      n2=EnvironmentDivision()
      { n1.addNode(n2); }
   )?
   (
      n4=DataDivision()
      { n3.addNode(n4); }
   )?
   (
      n6=ProcedureDivision()
      { n5.addNode(n6); }
   )?
   (
      LOOKAHEAD(<IDENTIFICATION> | <ID>)
      n8=NestedProgramUnit()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   n9=EndProgramStatement()
   
} catch(ParseException e) {
	error_skipto(DOT); return new NestedProgramUnit();} 
   { return new NestedProgramUnit(n0,n1,n3,n5,n7,n9); }
}

EndProgramStatement EndProgramStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ProgramName n4;
   NodeToken n5;
   Token n6;

   
}
{
try {
   n1=<END> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PROGRAM> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ProgramName()
   n6=<DOT> { n5 = JTBToolkit.makeNodeToken(n6); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new EndProgramStatement();} 
   { return new EndProgramStatement(n0,n2,n4,n5); }
}

IdentificationDivision IdentificationDivision() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   ProgramIdParagraph n6;
   NodeListOptional n7 = new NodeListOptional();
   IdentificationDivisionParagraph n8;

   
}
{
try {
   n1=<IDENTIFICATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIVISION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=ProgramIdParagraph()
   (
      n8=IdentificationDivisionParagraph()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new IdentificationDivision();} 
   { return new IdentificationDivision(n0,n2,n4,n6,n7); }
}

NestedIdentificationDivision NestedIdentificationDivision() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NestedProgramIdParagraph n9;
   NodeListOptional n10 = new NodeListOptional();
   IdentificationDivisionParagraph n11;

   
}
{
try {
   (
      (
         n2=<IDENTIFICATION> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ID> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<DIVISION> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=NestedProgramIdParagraph()
   (
      n11=IdentificationDivisionParagraph()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new NestedIdentificationDivision();} 
   { return new NestedIdentificationDivision(n0,n5,n7,n9,n10); }
}

IdentificationDivisionParagraph IdentificationDivisionParagraph() :
{
   NodeChoice n0;
   AuthorParagraph n1;
   InstallationParagraph n2;
   DateWrittenParagraph n3;
   DateCompiledParagraph n4;
   SecurityParagraph n5;

   
}
{
try {
   (
      n1=AuthorParagraph()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=InstallationParagraph()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=DateWrittenParagraph()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DateCompiledParagraph()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=SecurityParagraph()
      { n0 = new NodeChoice(n5, 4); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new IdentificationDivisionParagraph();} 
   { return new IdentificationDivisionParagraph(n0); }
}

ProgramIdParagraph ProgramIdParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ProgramName n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
try {
   n1=<PROGRAM_ID> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ProgramName()
   (
      { n7 = new NodeOptional(); }
      { n12 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      (
         n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      n11=<INITIAL> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      (
         n14=<PROGRAM> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n6.addNode(n12); }
      { n5.addNode(n6); }
   )?
   n16=<DOT> { n15 = JTBToolkit.makeNodeToken(n16); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ProgramIdParagraph();} 
   { return new ProgramIdParagraph(n0,n2,n4,n5,n15); }
}

NestedProgramIdParagraph NestedProgramIdParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ProgramName n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   InitialOrCommon n10;
   NodeOptional n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
try {
   n1=<PROGRAM_ID> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ProgramName()
   (
      { n7 = new NodeOptional(); }
      { n11 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      (
         n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      n10=InitialOrCommon()
      { n6.addNode(n10); }
      (
         n13=<PROGRAM> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
      )?
      { n6.addNode(n11); }
      { n5.addNode(n6); }
   )?
   n15=<DOT> { n14 = JTBToolkit.makeNodeToken(n15); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new NestedProgramIdParagraph();} 
   { return new NestedProgramIdParagraph(n0,n2,n4,n5,n14); }
}

InitialOrCommon InitialOrCommon() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<INITIAL> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<COMMON> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<COMMON> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<INITIAL> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new InitialOrCommon();} 
   { return new InitialOrCommon(n0); }
}

AuthorParagraph AuthorParagraph() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   CommentLine n11;

   
}
{
try {
   (
      (
         n2=<AUTHOR> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<AUTHOR2> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         n7=<DOT2> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      n11=CommentLine()
      { n10.addNode(n11); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new AuthorParagraph();} 
   { return new AuthorParagraph(n0,n5,n10); }
}

InstallationParagraph InstallationParagraph() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   CommentLine n11;

   
}
{
try {
   (
      (
         n2=<INSTALLATION> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<INSTALLATION2> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         n7=<DOT2> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      n11=CommentLine()
      { n10.addNode(n11); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new InstallationParagraph();} 
   { return new InstallationParagraph(n0,n5,n10); }
}

DateWrittenParagraph DateWrittenParagraph() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   CommentLine n11;

   
}
{
try {
   (
      (
         n2=<DATE_WRITTEN> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DATE_WRITTEN2> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         n7=<DOT2> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      n11=CommentLine()
      { n10.addNode(n11); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DateWrittenParagraph();} 
   { return new DateWrittenParagraph(n0,n5,n10); }
}

DateCompiledParagraph DateCompiledParagraph() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   CommentLine n11;

   
}
{
try {
   (
      (
         n2=<DATE_COMPILED> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DATE_COMPILED2> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         n7=<DOT2> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      n11=CommentLine()
      { n10.addNode(n11); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DateCompiledParagraph();} 
   { return new DateCompiledParagraph(n0,n5,n10); }
}

SecurityParagraph SecurityParagraph() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   CommentLine n11;

   
}
{
try {
   (
      (
         n2=<SECURITY> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SECURITY2> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         n7=<DOT2> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      n11=CommentLine()
      { n10.addNode(n11); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SecurityParagraph();} 
   { return new SecurityParagraph(n0,n5,n10); }
}

EnvironmentDivision EnvironmentDivision() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   EnvironmentSection n11;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<ENVIRONMENT> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<DIVISION> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n7=<DOT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n9=<ENVIRONMENT_DIVISION> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n0 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      n11=EnvironmentSection()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new EnvironmentDivision();} 
   { return new EnvironmentDivision(n0,n10); }
}

EnvironmentSection EnvironmentSection() :
{
   NodeChoice n0;
   ConfigurationSection n1;
   InputOutputSection n2;

   
}
{
try {
   (
      n1=ConfigurationSection()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=InputOutputSection()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new EnvironmentSection();} 
   { return new EnvironmentSection(n0); }
}

ConfigurationSection ConfigurationSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   ConfigurationSectionParagraph n7;

   
}
{
try {
   n1=<CONFIGURATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=ConfigurationSectionParagraph()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ConfigurationSection();} 
   { return new ConfigurationSection(n0,n2,n4,n6); }
}

ConfigurationSectionParagraph ConfigurationSectionParagraph() :
{
   NodeChoice n0;
   SourceComputerParagraph n1;
   ObjectComputerParagraph n2;
   SpecialNamesParagraph n3;

   
}
{
try {
   (
      n1=SourceComputerParagraph()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ObjectComputerParagraph()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=SpecialNamesParagraph()
      { n0 = new NodeChoice(n3, 2); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new ConfigurationSectionParagraph();} 
   { return new ConfigurationSectionParagraph(n0); }
}

SourceComputerParagraph SourceComputerParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ComputerName n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
try {
   n1=<SOURCE_COMPUTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ComputerName()
   (
      { n7 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      (
         n9=<WITH> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      n11=<DEBUGGING> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      n13=<MODE> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n6.addNode(n12); }
      { n5.addNode(n6); }
   )?
   n15=<DOT> { n14 = JTBToolkit.makeNodeToken(n15); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SourceComputerParagraph();} 
   { return new SourceComputerParagraph(n0,n2,n4,n5,n14); }
}

ObjectComputerParagraph ObjectComputerParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ComputerName n4;
   NodeListOptional n5 = new NodeListOptional();
   ObjectComputerClause n6;
   NodeToken n7;
   Token n8;

   
}
{
try {
   n1=<OBJECT_COMPUTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ComputerName()
   (
      n6=ObjectComputerClause()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ObjectComputerParagraph();} 
   { return new ObjectComputerParagraph(n0,n2,n4,n5,n7); }
}

ObjectComputerClause ObjectComputerClause() :
{
   NodeChoice n0;
   MemorySizeClause n1;
   CollatingSequenceClause n2;
   SegmentLimitClause n3;
   CharacterSetClause n4;

   
}
{
try {
   (
      n1=MemorySizeClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=CollatingSequenceClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=SegmentLimitClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=CharacterSetClause()
      { n0 = new NodeChoice(n4, 3); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new ObjectComputerClause();} 
   { return new ObjectComputerClause(n0); }
}

MemorySizeClause MemorySizeClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   IntegerConstant n5;
   NodeOptional n6 = new NodeOptional();
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
try {
   n1=<MEMORY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<SIZE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=IntegerConstant()
   (
      (
         n9=<WORDS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<CHARACTERS> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n13=<MODULES> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7 = new NodeChoice(n12, 2); }
      )
      { n6.addNode(n7); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new MemorySizeClause();} 
   { return new MemorySizeClause(n0,n2,n5,n6); }
}

CollatingSequenceClause CollatingSequenceClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   AlphabetName n11;

   
}
{
try {
   (
      n2=<PROGRAM> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<COLLATING> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n7=<SEQUENCE> { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n10=<IS> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n11=AlphabetName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new CollatingSequenceClause();} 
   { return new CollatingSequenceClause(n0,n3,n6,n8,n11); }
}

SegmentLimitClause SegmentLimitClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   IntegerConstant n5;

   
}
{
try {
   n1=<SEGMENT_LIMIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=IntegerConstant()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SegmentLimitClause();} 
   { return new SegmentLimitClause(n0,n2,n5); }
}

CharacterSetClause CharacterSetClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
try {
   n1=<CHARACTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SET> { n2 = JTBToolkit.makeNodeToken(n3); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CharacterSetClause();} 
   { return new CharacterSetClause(n0,n2); }
}

SpecialNamesParagraph SpecialNamesParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   SpecialNameClause n6;
   NodeListOptional n7;
   NodeSequence n8;
   NodeOptional n9;
   NodeToken n10;
   Token n11;
   SpecialNameClause n12;
   NodeToken n13;
   Token n14;

   
}
{
try {
   n1=<SPECIAL_NAMES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n7 = new NodeListOptional(); }
      { n5 = new NodeSequence(3); }
      n6=SpecialNameClause()
      { n5.addNode(n6); }
      (
         { n9 = new NodeOptional(); }
         { n8 = new NodeSequence(2); }
         (
            n11=<COMMACHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
         )?
         { n8.addNode(n9); }
         n12=SpecialNameClause()
         { n8.addNode(n12); }
         { n7.addNode(n8); }
      )*
      { n7.nodes.trimToSize(); }
      { n5.addNode(n7); }
      n14=<DOT> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n5.addNode(n13); }
      { n4.addNode(n5); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SpecialNamesParagraph();} 
   { return new SpecialNamesParagraph(n0,n2,n4); }
}

SpecialNameClause SpecialNameClause() :
{
   NodeChoice n0;
   AlphabetClause n1;
   ClassClause n2;
   CurrencySignClause n3;
   DecimalPointClause n4;
   SymbolicCharactersClause n5;
   EnvironmentNameIsMnemonicNameClause n6;

   
}
{
try {
   (
      n1=AlphabetClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ClassClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=CurrencySignClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DecimalPointClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=SymbolicCharactersClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=EnvironmentNameIsMnemonicNameClause()
      { n0 = new NodeChoice(n6, 5); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SpecialNameClause();} 
   { return new SpecialNameClause(n0); }
}

AlphabetClause AlphabetClause() :
{
   NodeToken n0;
   Token n1;
   AlphabetName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   CobolWord n13;
   NodeList n14 = new NodeList();
   NodeSequence n15;
   Literal n16;
   NodeOptional n17;
   NodeChoice n18;
   NodeSequence n19;
   NodeChoice n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   Literal n25;
   NodeList n26;
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   Literal n30;
   NodeOptional n31;
   NodeToken n32;
   Token n33;
   NodeOptional n34;
   NodeToken n35;
   Token n36;

   
}
{
try {
   n1=<ALPHABET> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AlphabetName()
   (
      n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n8=<STANDARD_1> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n10=<STANDARD_2> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n6 = new NodeChoice(n9, 1); }
      |
         n12=<NATIVE> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n6 = new NodeChoice(n11, 2); }
      |
         n13=CobolWord()
         { n6 = new NodeChoice(n13, 3); }
      |
         (
            { n17 = new NodeOptional(); }
            { n34 = new NodeOptional(); }
            { n15 = new NodeSequence(3); }
            n16=Literal()
            { n15.addNode(n16); }
            (
               { n26 = new NodeList(); }
               (
                  (
                     { n19 = new NodeSequence(2); }
                     (
                        (
                           n22=<THROUGH> { n21 = JTBToolkit.makeNodeToken(n22); }
                           { n20 = new NodeChoice(n21, 0); }
                        |
                           n24=<THRU> { n23 = JTBToolkit.makeNodeToken(n24); }
                           { n20 = new NodeChoice(n23, 1); }
                        )
                        
                     )
                     { n19.addNode(n20); }
                     n25=Literal()
                     { n19.addNode(n25); }
                     { n18 = new NodeChoice(n19, 0); }
                  |
                     (
                        { n31 = new NodeOptional(); }
                        { n27 = new NodeSequence(3); }
                        n29=<ALSO> { n28 = JTBToolkit.makeNodeToken(n29); }
                        { n27.addNode(n28); }
                        n30=Literal()
                        { n27.addNode(n30); }
                        (
                           n33=<COMMACHAR> { n32 = JTBToolkit.makeNodeToken(n33); }
                           { n31.addNode(n32); }
                        )?
                        { n27.addNode(n31); }
                        { n26.addNode(n27); }
                     )+
                     { n26.nodes.trimToSize(); }
                     { n18 = new NodeChoice(n26, 1); }
                  )
                  
               )
               { n17.addNode(n18); }
            )?
            { n15.addNode(n17); }
            (
               n36=<COMMACHAR> { n35 = JTBToolkit.makeNodeToken(n36); }
               { n34.addNode(n35); }
            )?
            { n15.addNode(n34); }
            { n14.addNode(n15); }
         )+
         { n14.nodes.trimToSize(); }
         { n6 = new NodeChoice(n14, 4); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new AlphabetClause();} 
   { return new AlphabetClause(n0,n2,n3,n6); }
}

ClassClause ClassClause() :
{
   NodeToken n0;
   Token n1;
   ClassName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeList n6 = new NodeList();
   NodeSequence n7;
   Literal n8;
   NodeOptional n9;
   NodeSequence n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   Literal n16;

   
}
{
try {
   n1=<CLASS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassName()
   (
      n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      { n9 = new NodeOptional(); }
      { n7 = new NodeSequence(2); }
      n8=Literal()
      { n7.addNode(n8); }
      (
         { n10 = new NodeSequence(2); }
         (
            (
               n13=<THROUGH> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n11 = new NodeChoice(n12, 0); }
            |
               n15=<THRU> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n11 = new NodeChoice(n14, 1); }
            )
            
         )
         { n10.addNode(n11); }
         n16=Literal()
         { n10.addNode(n16); }
         { n9.addNode(n10); }
      )?
      { n7.addNode(n9); }
      { n6.addNode(n7); }
   )+
   { n6.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ClassClause();} 
   { return new ClassClause(n0,n2,n3,n6); }
}

CurrencySignClause CurrencySignClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   Literal n8;

   
}
{
try {
   n1=<CURRENCY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<SIGN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=Literal()
   
} catch(ParseException e) {
	error_skipto(DOT); return new CurrencySignClause();} 
   { return new CurrencySignClause(n0,n2,n5,n8); }
}

DecimalPointClause DecimalPointClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
try {
   n1=<DECIMAL_POINT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<COMMA> { n5 = JTBToolkit.makeNodeToken(n6); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new DecimalPointClause();} 
   { return new DecimalPointClause(n0,n2,n5); }
}

SymbolicCharactersClause SymbolicCharactersClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   NodeSequence n6;
   NodeList n7;
   SymbolicCharacter n8;
   NodeOptional n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeList n15;
   IntegerConstant n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   AlphabetName n21;

   
}
{
try {
   n1=<SYMBOLIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CHARACTERS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      { n7 = new NodeList(); }
      { n9 = new NodeOptional(); }
      { n15 = new NodeList(); }
      { n6 = new NodeSequence(3); }
      (
         n8=SymbolicCharacter()
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n6.addNode(n7); }
      (
         (
            (
               n12=<ARE> { n11 = JTBToolkit.makeNodeToken(n12); }
               { n10 = new NodeChoice(n11, 0); }
            |
               n14=<IS> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n10 = new NodeChoice(n13, 1); }
            )
            
         )
         { n9.addNode(n10); }
      )?
      { n6.addNode(n9); }
      (
         n16=IntegerConstant()
         { n15.addNode(n16); }
      )+
      { n15.nodes.trimToSize(); }
      { n6.addNode(n15); }
      { n5.addNode(n6); }
   )+
   { n5.nodes.trimToSize(); }
   (
      { n18 = new NodeSequence(2); }
      n20=<IN> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      n21=AlphabetName()
      { n18.addNode(n21); }
      { n17.addNode(n18); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SymbolicCharactersClause();} 
   { return new SymbolicCharactersClause(n0,n2,n5,n17); }
}

EnvironmentNameIsMnemonicNameClause EnvironmentNameIsMnemonicNameClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   EnvironmentName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   MnemonicName n6;
   NodeOptional n7 = new NodeOptional();
   SpecialNamesParagraphStatusPhrase n8;
   SpecialNamesParagraphStatusPhrase n9;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(4); }
         n2=EnvironmentName()
         { n1.addNode(n2); }
         (
            n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         n6=MnemonicName()
         { n1.addNode(n6); }
         (
            n8=SpecialNamesParagraphStatusPhrase()
            { n7.addNode(n8); }
         )?
         { n1.addNode(n7); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n9=SpecialNamesParagraphStatusPhrase()
         { n0 = new NodeChoice(n9, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new EnvironmentNameIsMnemonicNameClause();} 
   { return new EnvironmentNameIsMnemonicNameClause(n0); }
}

SpecialNamesParagraphStatusPhrase SpecialNamesParagraphStatusPhrase() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   Condition n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;
   Condition n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   NodeToken n29;
   Token n30;
   Condition n31;
   NodeOptional n32 = new NodeOptional();
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36;
   NodeToken n37;
   Token n38;
   NodeOptional n39;
   NodeToken n40;
   Token n41;
   Condition n42;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(5); }
         n3=<ON> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<STATUS> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         (
            n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n7.addNode(n8); }
         )?
         { n1.addNode(n7); }
         n10=Condition()
         { n1.addNode(n10); }
         (
            { n15 = new NodeOptional(); }
            { n18 = new NodeOptional(); }
            { n12 = new NodeSequence(4); }
            n14=<OFF> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
            (
               n17=<STATUS> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15.addNode(n16); }
            )?
            { n12.addNode(n15); }
            (
               n20=<IS> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18.addNode(n19); }
            )?
            { n12.addNode(n18); }
            n21=Condition()
            { n12.addNode(n21); }
            { n11.addNode(n12); }
         )?
         { n1.addNode(n11); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n22 = new NodeSequence(5); }
         n24=<OFF> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
         (
            n27=<STATUS> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
         )?
         { n22.addNode(n25); }
         (
            n30=<IS> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28.addNode(n29); }
         )?
         { n22.addNode(n28); }
         n31=Condition()
         { n22.addNode(n31); }
         (
            { n36 = new NodeOptional(); }
            { n39 = new NodeOptional(); }
            { n33 = new NodeSequence(4); }
            n35=<ON> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n33.addNode(n34); }
            (
               n38=<STATUS> { n37 = JTBToolkit.makeNodeToken(n38); }
               { n36.addNode(n37); }
            )?
            { n33.addNode(n36); }
            (
               n41=<IS> { n40 = JTBToolkit.makeNodeToken(n41); }
               { n39.addNode(n40); }
            )?
            { n33.addNode(n39); }
            n42=Condition()
            { n33.addNode(n42); }
            { n32.addNode(n33); }
         )?
         { n22.addNode(n32); }
         { n0 = new NodeChoice(n22, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SpecialNamesParagraphStatusPhrase();} 
   { return new SpecialNamesParagraphStatusPhrase(n0); }
}

InputOutputSection InputOutputSection() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeList n8 = new NodeList();
   InputOutputSectionParagraph n9;

   
}
{
try {
   (
      LOOKAHEAD(<INPUT_OUTPUT>)
      { n1 = new NodeSequence(3); }
      n3=<INPUT_OUTPUT> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<SECTION> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      n7=<DOT> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0.addNode(n1); }
   )?
   (
      n9=InputOutputSectionParagraph()
      { n8.addNode(n9); }
   )+
   { n8.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new InputOutputSection();} 
   { return new InputOutputSection(n0,n8); }
}

InputOutputSectionParagraph InputOutputSectionParagraph() :
{
   NodeChoice n0;
   FileControlParagraph n1;
   IOControlParagraph n2;

   
}
{
try {
   (
      n1=FileControlParagraph()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IOControlParagraph()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new InputOutputSectionParagraph();} 
   { return new InputOutputSectionParagraph(n0); }
}

FileControlParagraph FileControlParagraph() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   FileControlEntry n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   NodeSequence n11;
   FileControlEntry n12;
   NodeToken n13;
   Token n14;

   
}
{
try {
   (
      (
         LOOKAHEAD(<FILE_CONTROL>)
         { n1 = new NodeSequence(3); }
         n3=<FILE_CONTROL> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n6 = new NodeSequence(2); }
         n7=FileControlEntry()
         { n6.addNode(n7); }
         n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n6.addNode(n8); }
         { n0 = new NodeChoice(n6, 1); }
      )
      
   )
   (
      LOOKAHEAD(<SELECT>)
      { n11 = new NodeSequence(2); }
      n12=FileControlEntry()
      { n11.addNode(n12); }
      n14=<DOT> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n11.addNode(n13); }
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new FileControlParagraph();} 
   { return new FileControlParagraph(n0,n10); }
}

FileControlEntry FileControlEntry() :
{
   SelectClause n0;
   NodeListOptional n1 = new NodeListOptional();
   FileControlClause n2;

   
}
{
try {
   n0=SelectClause()
   (
      n2=FileControlClause()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new FileControlEntry();} 
   { return new FileControlEntry(n0,n1); }
}

FileControlClause FileControlClause() :
{
   NodeChoice n0;
   AssignClause n1;
   ReserveClause n2;
   KeyClause n3;
   OrganizationClause n4;
   PaddingCharacterClause n5;
   RecordDelimiterClause n6;
   AccessModeClause n7;
   AlternateRecordKeyClause n8;
   FileStatusClause n9;
   PasswordClause n10;

   
}
{
try {
   (
      n1=AssignClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ReserveClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(KeyClause())
      n3=KeyClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(OrganizationClause())
      n4=OrganizationClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=PaddingCharacterClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=RecordDelimiterClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=AccessModeClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=AlternateRecordKeyClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=FileStatusClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=PasswordClause()
      { n0 = new NodeChoice(n10, 9); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new FileControlClause();} 
   { return new FileControlClause(n0); }
}

SelectClause SelectClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   FileName n5;

   
}
{
try {
   n1=<SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<OPTIONAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=FileName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SelectClause();} 
   { return new SelectClause(n0,n2,n5); }
}

AssignClause AssignClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   AssignmentName n9;
   Literal n10;

   
}
{
try {
   n1=<ASSIGN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TO> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<DISK> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=AssignmentName()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=Literal()
         { n8 = new NodeChoice(n10, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new AssignClause();} 
   { return new AssignClause(n0,n2,n5,n8); }
}

ReserveClause ReserveClause() :
{
   NodeToken n0;
   Token n1;
   IntegerConstant n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
try {
   n1=<RESERVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntegerConstant()
   (
      (
         n6=<AREA> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         n8=<AREAS> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4 = new NodeChoice(n7, 1); }
      )
      { n3.addNode(n4); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new ReserveClause();} 
   { return new ReserveClause(n0,n2,n3); }
}

OrganizationClause OrganizationClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   SequentialOrganizationClause n7;
   IndexedOrganizationClause n8;
   RelativeOrganizationClause n9;
   LineSequentialOrganizationClause n10;

   
}
{
try {
   (
      n2=<ORGANIZATION> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<IS> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         n7=SequentialOrganizationClause()
         { n6 = new NodeChoice(n7, 0); }
      |
         n8=IndexedOrganizationClause()
         { n6 = new NodeChoice(n8, 1); }
      |
         n9=RelativeOrganizationClause()
         { n6 = new NodeChoice(n9, 2); }
      |
         n10=LineSequentialOrganizationClause()
         { n6 = new NodeChoice(n10, 3); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new OrganizationClause();} 
   { return new OrganizationClause(n0,n3,n6); }
}

SequentialOrganizationClause SequentialOrganizationClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<SEQUENTIAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SequentialOrganizationClause();} 
   { return new SequentialOrganizationClause(n0); }
}

LineSequentialOrganizationClause LineSequentialOrganizationClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
try {
   n1=<LINE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SEQUENTIAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new LineSequentialOrganizationClause();} 
   { return new LineSequentialOrganizationClause(n0,n2); }
}

RelativeOrganizationClause RelativeOrganizationClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<RELATIVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new RelativeOrganizationClause();} 
   { return new RelativeOrganizationClause(n0); }
}

IndexedOrganizationClause IndexedOrganizationClause() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<INDEXED> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new IndexedOrganizationClause();} 
   { return new IndexedOrganizationClause(n0); }
}

PaddingCharacterClause PaddingCharacterClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   QualifiedDataName n9;
   Literal n10;

   
}
{
try {
   n1=<PADDING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CHARACTER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=QualifiedDataName()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=Literal()
         { n8 = new NodeChoice(n10, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PaddingCharacterClause();} 
   { return new PaddingCharacterClause(n0,n2,n5,n8); }
}

RecordDelimiterClause RecordDelimiterClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   AssignmentName n12;

   
}
{
try {
   n1=<RECORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DELIMITER> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      (
         n9=<STANDARD_1> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<IMPLICIT> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n12=AssignmentName()
         { n7 = new NodeChoice(n12, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new RecordDelimiterClause();} 
   { return new RecordDelimiterClause(n0,n2,n4,n7); }
}

AccessModeClause AccessModeClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   SequentialAccessMode n9;
   RandomAccessMode n10;
   DynamicAccessMode n11;

   
}
{
try {
   n1=<ACCESS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<MODE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=SequentialAccessMode()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=RandomAccessMode()
         { n8 = new NodeChoice(n10, 1); }
      |
         n11=DynamicAccessMode()
         { n8 = new NodeChoice(n11, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new AccessModeClause();} 
   { return new AccessModeClause(n0,n2,n5,n8); }
}

SequentialAccessMode SequentialAccessMode() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<SEQUENTIAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SequentialAccessMode();} 
   { return new SequentialAccessMode(n0); }
}

RandomAccessMode RandomAccessMode() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<RANDOM> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new RandomAccessMode();} 
   { return new RandomAccessMode(n0); }
}

DynamicAccessMode DynamicAccessMode() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<DYNAMIC> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new DynamicAccessMode();} 
   { return new DynamicAccessMode(n0); }
}

KeyClause KeyClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   QualifiedDataName n11;

   
}
{
try {
   (
      (
         n2=<RELATIVE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<RECORD> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<KEY> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      n10=<IS> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n11=QualifiedDataName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new KeyClause();} 
   { return new KeyClause(n0,n5,n8,n11); }
}

AlternateRecordKeyClause AlternateRecordKeyClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   QualifiedDataName n10;
   NodeOptional n11 = new NodeOptional();
   PasswordClause n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;

   
}
{
try {
   n1=<ALTERNATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<RECORD> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<KEY> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   n10=QualifiedDataName()
   (
      n12=PasswordClause()
      { n11.addNode(n12); }
   )?
   (
      { n15 = new NodeOptional(); }
      { n14 = new NodeSequence(2); }
      (
         n17=<WITH> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
      )?
      { n14.addNode(n15); }
      n19=<DUPLICATES> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n14.addNode(n18); }
      { n13.addNode(n14); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new AlternateRecordKeyClause();} 
   { return new AlternateRecordKeyClause(n0,n2,n4,n7,n10,n11,n13); }
}

PasswordClause PasswordClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   DataName n5;

   
}
{
try {
   n1=<PASSWORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=DataName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new PasswordClause();} 
   { return new PasswordClause(n0,n2,n5); }
}

FileStatusClause FileStatusClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   QualifiedDataName n8;
   NodeOptional n9 = new NodeOptional();
   QualifiedDataName n10;

   
}
{
try {
   (
      n2=<FILE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<STATUS> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=QualifiedDataName()
   (
      n10=QualifiedDataName()
      { n9.addNode(n10); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new FileStatusClause();} 
   { return new FileStatusClause(n0,n3,n5,n8,n9); }
}

IOControlParagraph IOControlParagraph() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   IOControlClause n6;
   NodeListOptional n7;
   NodeSequence n8;
   NodeOptional n9;
   NodeToken n10;
   Token n11;
   IOControlClause n12;
   NodeToken n13;
   Token n14;

   
}
{
try {
   n1=<I_O_CONTROL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n7 = new NodeListOptional(); }
      { n5 = new NodeSequence(3); }
      n6=IOControlClause()
      { n5.addNode(n6); }
      (
         { n9 = new NodeOptional(); }
         { n8 = new NodeSequence(2); }
         (
            n11=<DOT> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
         )?
         { n8.addNode(n9); }
         n12=IOControlClause()
         { n8.addNode(n12); }
         { n7.addNode(n8); }
      )*
      { n7.nodes.trimToSize(); }
      { n5.addNode(n7); }
      n14=<DOT> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n5.addNode(n13); }
      { n4.addNode(n5); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new IOControlParagraph();} 
   { return new IOControlParagraph(n0,n2,n4); }
}

IOControlClause IOControlClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   RerunClause n4;
   SameAreaClause n5;
   MultipleFileClause n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;

   
}
{
try {
   (
      n2=<COMMACHAR> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      (
         n4=RerunClause()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=SameAreaClause()
         { n3 = new NodeChoice(n5, 1); }
      |
         n6=MultipleFileClause()
         { n3 = new NodeChoice(n6, 2); }
      )
      
   )
   (
      n9=<COMMACHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new IOControlClause();} 
   { return new IOControlClause(n0,n3,n7); }
}

RerunClause RerunClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   AssignmentName n7;
   FileName n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   Rerun2 n12;
   NodeSequence n13;
   IntegerConstant n14;
   NodeOptional n15 = new NodeOptional();
   NodeToken n16;
   Token n17;

   
}
{
try {
   n1=<RERUN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<ON> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      (
         (
            n7=AssignmentName()
            { n6 = new NodeChoice(n7, 0); }
         |
            n8=FileName()
            { n6 = new NodeChoice(n8, 1); }
         )
         
      )
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   n10=<EVERY> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      (
         n12=Rerun2()
         { n11 = new NodeChoice(n12, 0); }
      |
         { n13 = new NodeSequence(2); }
         n14=IntegerConstant()
         { n13.addNode(n14); }
         (
            n17=<CLOCK_UNITS> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15.addNode(n16); }
         )?
         { n13.addNode(n15); }
         { n11 = new NodeChoice(n13, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new RerunClause();} 
   { return new RerunClause(n0,n2,n9,n11); }
}

Rerun2 Rerun2() :
{
   NodeChoice n0;
   NodeSequence n1;
   IntegerConstant n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   FileName n19;

   
}
{
try {
   (
      { n1 = new NodeSequence(2); }
      n2=IntegerConstant()
      { n1.addNode(n2); }
      n4=<RECORDS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(5); }
      (
         n8=<END> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n5.addNode(n6); }
      (
         n11=<OF> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
      )?
      { n5.addNode(n9); }
      (
         (
            n14=<REEL> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12 = new NodeChoice(n13, 0); }
         |
            n16=<UNIT> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n12 = new NodeChoice(n15, 1); }
         )
         
      )
      { n5.addNode(n12); }
      n18=<OF> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n5.addNode(n17); }
      n19=FileName()
      { n5.addNode(n19); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new Rerun2();} 
   { return new Rerun2(n0); }
}

SameAreaClause SameAreaClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeList n16 = new NodeList();
   NodeSequence n17;
   FileName n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;

   
}
{
try {
   n1=<SAME> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<SORT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      |
         n9=<SORT_MERGE> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n3 = new NodeChoice(n8, 2); }
      )
      { n2.addNode(n3); }
   )?
   (
      n12=<AREA> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
   )?
   (
      n15=<FOR> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
   )?
   (
      { n19 = new NodeOptional(); }
      { n17 = new NodeSequence(2); }
      n18=FileName()
      { n17.addNode(n18); }
      (
         n21=<COMMACHAR> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n19.addNode(n20); }
      )?
      { n17.addNode(n19); }
      { n16.addNode(n17); }
   )+
   { n16.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SameAreaClause();} 
   { return new SameAreaClause(n0,n2,n10,n13,n16); }
}

MultipleFileClause MultipleFileClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   NodeList n10 = new NodeList();
   NodeSequence n11;
   FileName n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16;
   IntegerConstant n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;

   
}
{
try {
   n1=<MULTIPLE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FILE> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<TAPE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   (
      n9=<CONTAINS> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   (
      { n13 = new NodeOptional(); }
      { n16 = new NodeOptional(); }
      { n18 = new NodeOptional(); }
      { n11 = new NodeSequence(4); }
      n12=FileName()
      { n11.addNode(n12); }
      (
         n15=<POSITION> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n11.addNode(n13); }
      (
         n17=IntegerConstant()
         { n16.addNode(n17); }
      )?
      { n11.addNode(n16); }
      (
         n20=<COMMACHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n11.addNode(n18); }
      { n10.addNode(n11); }
   )+
   { n10.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new MultipleFileClause();} 
   { return new MultipleFileClause(n0,n2,n4,n7,n10); }
}

DataDivision DataDivision() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   DataDivisionSection n11;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(3); }
         n3=<DATA> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<DIVISION> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n7=<DOT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1.addNode(n6); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n9=<DATA_DIVISION> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n0 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      n11=DataDivisionSection()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataDivision();} 
   { return new DataDivision(n0,n10); }
}

DataDivisionSection DataDivisionSection() :
{
   NodeChoice n0;
   FileSection n1;
   WorkingStorageSection n2;
   LinkageSection n3;
   CommunicationSection n4;

   
}
{
try {
   (
      n1=FileSection()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=WorkingStorageSection()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=LinkageSection()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=CommunicationSection()
      { n0 = new NodeChoice(n4, 3); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataDivisionSection();} 
   { return new DataDivisionSection(n0); }
}

CommunicationSection CommunicationSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   CommunicationDescriptionEntry n8;
   NodeListOptional n9;
   DataDescriptionEntry n10;

   
}
{
try {
   n1=<COMMUNICATION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      { n9 = new NodeListOptional(); }
      { n7 = new NodeSequence(2); }
      n8=CommunicationDescriptionEntry()
      { n7.addNode(n8); }
      (
         n10=DataDescriptionEntry()
         { n9.addNode(n10); }
      )*
      { n9.nodes.trimToSize(); }
      { n7.addNode(n9); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommunicationSection();} 
   { return new CommunicationSection(n0,n2,n4,n6); }
}

CommunicationDescriptionEntry CommunicationDescriptionEntry() :
{
   NodeChoice n0;
   CommunicationInputEntry n1;
   CommunicationOutputEntry n2;
   CommunicationIOEntry n3;
   NodeToken n4;
   Token n5;

   
}
{
try {
   (
      (
         LOOKAHEAD(CommunicationInputEntry())
         n1=CommunicationInputEntry()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(CommunicationOutputEntry())
         n2=CommunicationOutputEntry()
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(CommunicationIOEntry())
         n3=CommunicationIOEntry()
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommunicationDescriptionEntry();} 
   { return new CommunicationDescriptionEntry(n0,n4); }
}

CommunicationInputEntry CommunicationInputEntry() :
{
   NodeToken n0;
   Token n1;
   CdName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeListOptional n11 = new NodeListOptional();
   CommunicationInputClause n12;
   NodeListOptional n13 = new NodeListOptional();
   NodeChoice n14;
   DataName n15;
   NodeToken n16;
   Token n17;

   
}
{
try {
   n1=<CD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CdName()
   (
      n5=<FOR> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      n8=<INITIAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   n10=<INPUT> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      n12=CommunicationInputClause()
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   (
      (
         n15=DataName()
         { n14 = new NodeChoice(n15, 0); }
      |
         n17=<FILLER> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n14 = new NodeChoice(n16, 1); }
      )
      { n13.addNode(n14); }
   )*
   { n13.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommunicationInputEntry();} 
   { return new CommunicationInputEntry(n0,n2,n3,n6,n9,n11,n13); }
}

CommunicationOutputEntry CommunicationOutputEntry() :
{
   NodeToken n0;
   Token n1;
   CdName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   CommunicationOutputClause n9;

   
}
{
try {
   n1=<CD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CdName()
   (
      n5=<FOR> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   n7=<OUTPUT> { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=CommunicationOutputClause()
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommunicationOutputEntry();} 
   { return new CommunicationOutputEntry(n0,n2,n3,n6,n8); }
}

CommunicationIOEntry CommunicationIOEntry() :
{
   NodeToken n0;
   Token n1;
   CdName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeListOptional n11 = new NodeListOptional();
   CommunicationIOClause n12;
   NodeListOptional n13 = new NodeListOptional();
   NodeChoice n14;
   DataName n15;
   NodeToken n16;
   Token n17;

   
}
{
try {
   n1=<CD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=CdName()
   (
      n5=<FOR> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      n8=<INITIAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   n10=<I_O> { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      n12=CommunicationIOClause()
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   (
      (
         n15=DataName()
         { n14 = new NodeChoice(n15, 0); }
      |
         n17=<FILLER> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n14 = new NodeChoice(n16, 1); }
      )
      { n13.addNode(n14); }
   )*
   { n13.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommunicationIOEntry();} 
   { return new CommunicationIOEntry(n0,n2,n3,n6,n9,n11,n13); }
}

CommunicationInputClause CommunicationInputClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
   DataName n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   NodeToken n21;
   Token n22;
   DataName n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29 = new NodeOptional();
   NodeToken n30;
   Token n31;
   DataName n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38 = new NodeOptional();
   NodeToken n39;
   Token n40;
   DataName n41;
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   NodeOptional n45 = new NodeOptional();
   NodeToken n46;
   Token n47;
   DataName n48;
   NodeSequence n49;
   NodeOptional n50 = new NodeOptional();
   NodeToken n51;
   Token n52;
   NodeChoice n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeToken n60;
   Token n61;
   NodeToken n62;
   Token n63;
   NodeOptional n64 = new NodeOptional();
   NodeToken n65;
   Token n66;
   DataName n67;

   
}
{
try {
   (
      { n1 = new NodeSequence(4); }
      n3=<MESSAGE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         (
            n6=<DATE> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4 = new NodeChoice(n5, 0); }
         |
            n8=<TIME> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n4 = new NodeChoice(n7, 1); }
         |
            n10=<COUNT> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n4 = new NodeChoice(n9, 2); }
         )
         
      )
      { n1.addNode(n4); }
      (
         n13=<IS> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
      )?
      { n1.addNode(n11); }
      n14=DataName()
      { n1.addNode(n14); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n15 = new NodeSequence(4); }
      n17=<TEXT> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      n19=<LENGTH> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n15.addNode(n18); }
      (
         n22=<IS> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n15.addNode(n20); }
      n23=DataName()
      { n15.addNode(n23); }
      { n0 = new NodeChoice(n15, 1); }
   |
      { n24 = new NodeSequence(4); }
      n26=<END> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24.addNode(n25); }
      n28=<KEY> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n24.addNode(n27); }
      (
         n31=<IS> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
      )?
      { n24.addNode(n29); }
      n32=DataName()
      { n24.addNode(n32); }
      { n0 = new NodeChoice(n24, 2); }
   |
      { n33 = new NodeSequence(4); }
      n35=<STATUS> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n33.addNode(n34); }
      n37=<KEY> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n33.addNode(n36); }
      (
         n40=<IS> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n33.addNode(n38); }
      n41=DataName()
      { n33.addNode(n41); }
      { n0 = new NodeChoice(n33, 3); }
   |
      { n42 = new NodeSequence(3); }
      n44=<COUNT> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n42.addNode(n43); }
      (
         n47=<IS> { n46 = JTBToolkit.makeNodeToken(n47); }
         { n45.addNode(n46); }
      )?
      { n42.addNode(n45); }
      n48=DataName()
      { n42.addNode(n48); }
      { n0 = new NodeChoice(n42, 4); }
   |
      { n49 = new NodeSequence(4); }
      (
         n52=<SYMBOLIC> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n50.addNode(n51); }
      )?
      { n49.addNode(n50); }
      (
         (
            n55=<QUEUE> { n54 = JTBToolkit.makeNodeToken(n55); }
            { n53 = new NodeChoice(n54, 0); }
         |
            n57=<SUB_QUEUE_1> { n56 = JTBToolkit.makeNodeToken(n57); }
            { n53 = new NodeChoice(n56, 1); }
         |
            n59=<SUB_QUEUE_2> { n58 = JTBToolkit.makeNodeToken(n59); }
            { n53 = new NodeChoice(n58, 2); }
         |
            n61=<SUB_QUEUE_3> { n60 = JTBToolkit.makeNodeToken(n61); }
            { n53 = new NodeChoice(n60, 3); }
         |
            n63=<SOURCE> { n62 = JTBToolkit.makeNodeToken(n63); }
            { n53 = new NodeChoice(n62, 4); }
         )
         
      )
      { n49.addNode(n53); }
      (
         n66=<IS> { n65 = JTBToolkit.makeNodeToken(n66); }
         { n64.addNode(n65); }
      )?
      { n49.addNode(n64); }
      n67=DataName()
      { n49.addNode(n67); }
      { n0 = new NodeChoice(n49, 5); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommunicationInputClause();} 
   { return new CommunicationInputClause(n0); }
}

CommunicationOutputClause CommunicationOutputClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   DataName n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15 = new NodeOptional();
   NodeToken n16;
   Token n17;
   DataName n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeOptional n24 = new NodeOptional();
   NodeToken n25;
   Token n26;
   DataName n27;
   NodeSequence n28;
   NodeOptional n29 = new NodeOptional();
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeOptional n34 = new NodeOptional();
   NodeToken n35;
   Token n36;
   DataName n37;
   NodeSequence n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   IntegerConstant n45;
   NodeOptional n46 = new NodeOptional();
   NodeToken n47;
   Token n48;
   NodeOptional n49 = new NodeOptional();
   NodeSequence n50;
   NodeToken n51;
   Token n52;
   NodeOptional n53;
   NodeToken n54;
   Token n55;
   NodeList n56;
   NodeSequence n57;
   IndexName n58;
   NodeOptional n59;
   NodeToken n60;
   Token n61;
   NodeSequence n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeOptional n67 = new NodeOptional();
   NodeToken n68;
   Token n69;
   DataName n70;

   
}
{
try {
   (
      { n1 = new NodeSequence(4); }
      n3=<DESTINATION> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<COUNT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      (
         n8=<IS> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n1.addNode(n6); }
      n9=DataName()
      { n1.addNode(n9); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n10 = new NodeSequence(4); }
      n12=<TEXT> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n14=<LENGTH> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n10.addNode(n13); }
      (
         n17=<IS> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
      )?
      { n10.addNode(n15); }
      n18=DataName()
      { n10.addNode(n18); }
      { n0 = new NodeChoice(n10, 1); }
   |
      { n19 = new NodeSequence(4); }
      n21=<STATUS> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n19.addNode(n20); }
      n23=<KEY> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n19.addNode(n22); }
      (
         n26=<IS> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
      )?
      { n19.addNode(n24); }
      n27=DataName()
      { n19.addNode(n27); }
      { n0 = new NodeChoice(n19, 2); }
   |
      LOOKAHEAD([ <SYMBOLIC> ] <DESTINATION> [ <IS> ] DataName())
      { n28 = new NodeSequence(5); }
      (
         n31=<SYMBOLIC> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
      )?
      { n28.addNode(n29); }
      n33=<DESTINATION> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n28.addNode(n32); }
      (
         n36=<IS> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n34.addNode(n35); }
      )?
      { n28.addNode(n34); }
      n37=DataName()
      { n28.addNode(n37); }
      { n0 = new NodeChoice(n28, 3); }
   |
      { n38 = new NodeSequence(6); }
      n40=<DESTINATION> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n38.addNode(n39); }
      n42=<TABLE> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n38.addNode(n41); }
      n44=<OCCURS> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n38.addNode(n43); }
      n45=IntegerConstant()
      { n38.addNode(n45); }
      (
         n48=<TIMES> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n46.addNode(n47); }
      )?
      { n38.addNode(n46); }
      (
         { n53 = new NodeOptional(); }
         { n56 = new NodeList(); }
         { n50 = new NodeSequence(3); }
         n52=<INDEXED> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n50.addNode(n51); }
         (
            n55=<BY> { n54 = JTBToolkit.makeNodeToken(n55); }
            { n53.addNode(n54); }
         )?
         { n50.addNode(n53); }
         (
            { n59 = new NodeOptional(); }
            { n57 = new NodeSequence(2); }
            n58=IndexName()
            { n57.addNode(n58); }
            (
               n61=<COMMACHAR> { n60 = JTBToolkit.makeNodeToken(n61); }
               { n59.addNode(n60); }
            )?
            { n57.addNode(n59); }
            { n56.addNode(n57); }
         )+
         { n56.nodes.trimToSize(); }
         { n50.addNode(n56); }
         { n49.addNode(n50); }
      )?
      { n38.addNode(n49); }
      { n0 = new NodeChoice(n38, 4); }
   |
      { n62 = new NodeSequence(4); }
      n64=<ERROR> { n63 = JTBToolkit.makeNodeToken(n64); }
      { n62.addNode(n63); }
      n66=<KEY> { n65 = JTBToolkit.makeNodeToken(n66); }
      { n62.addNode(n65); }
      (
         n69=<IS> { n68 = JTBToolkit.makeNodeToken(n69); }
         { n67.addNode(n68); }
      )?
      { n62.addNode(n67); }
      n70=DataName()
      { n62.addNode(n70); }
      { n0 = new NodeChoice(n62, 5); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommunicationOutputClause();} 
   { return new CommunicationOutputClause(n0); }
}

CommunicationIOClause CommunicationIOClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   DataName n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18 = new NodeOptional();
   NodeToken n19;
   Token n20;
   DataName n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27 = new NodeOptional();
   NodeToken n28;
   Token n29;
   DataName n30;
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36 = new NodeOptional();
   NodeToken n37;
   Token n38;
   DataName n39;
   NodeSequence n40;
   NodeOptional n41 = new NodeOptional();
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeOptional n46 = new NodeOptional();
   NodeToken n47;
   Token n48;
   DataName n49;

   
}
{
try {
   (
      { n1 = new NodeSequence(4); }
      n3=<MESSAGE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         (
            n6=<DATE> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4 = new NodeChoice(n5, 0); }
         |
            n8=<TIME> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n4 = new NodeChoice(n7, 1); }
         )
         
      )
      { n1.addNode(n4); }
      (
         n11=<IS> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
      )?
      { n1.addNode(n9); }
      n12=DataName()
      { n1.addNode(n12); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n13 = new NodeSequence(4); }
      n15=<TEXT> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      n17=<LENGTH> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n13.addNode(n16); }
      (
         n20=<IS> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n13.addNode(n18); }
      n21=DataName()
      { n13.addNode(n21); }
      { n0 = new NodeChoice(n13, 1); }
   |
      { n22 = new NodeSequence(4); }
      n24=<END> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      n26=<KEY> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n22.addNode(n25); }
      (
         n29=<IS> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n27.addNode(n28); }
      )?
      { n22.addNode(n27); }
      n30=DataName()
      { n22.addNode(n30); }
      { n0 = new NodeChoice(n22, 2); }
   |
      { n31 = new NodeSequence(4); }
      n33=<STATUS> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
      n35=<KEY> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n31.addNode(n34); }
      (
         n38=<IS> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n36.addNode(n37); }
      )?
      { n31.addNode(n36); }
      n39=DataName()
      { n31.addNode(n39); }
      { n0 = new NodeChoice(n31, 3); }
   |
      { n40 = new NodeSequence(4); }
      (
         n43=<SYMBOLIC> { n42 = JTBToolkit.makeNodeToken(n43); }
         { n41.addNode(n42); }
      )?
      { n40.addNode(n41); }
      n45=<TERMINAL> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n40.addNode(n44); }
      (
         n48=<IS> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n46.addNode(n47); }
      )?
      { n40.addNode(n46); }
      n49=DataName()
      { n40.addNode(n49); }
      { n0 = new NodeChoice(n40, 4); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommunicationIOClause();} 
   { return new CommunicationIOClause(n0); }
}

FileSection FileSection() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   FileAndSortDescriptionEntry n9;
   NodeList n10 = new NodeList();
   DataDescriptionEntry n11;
   NodeListOptional n12 = new NodeListOptional();
   NodeSequence n13;
   FileAndSortDescriptionEntry n14;
   NodeList n15;
   DataDescriptionEntry n16;

   
}
{
try {
   (
      (
         (
            { n1 = new NodeSequence(3); }
            n3=<FILE> { n2 = JTBToolkit.makeNodeToken(n3); }
            { n1.addNode(n2); }
            n5=<SECTION> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n1.addNode(n4); }
            n7=<DOT> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n1.addNode(n6); }
            
         )
         { n0 = new NodeChoice(n1, 0); }
      |
         (
            { n8 = new NodeSequence(2); }
            n9=FileAndSortDescriptionEntry()
            { n8.addNode(n9); }
            (
               n11=DataDescriptionEntry()
               { n10.addNode(n11); }
            )+
            { n10.nodes.trimToSize(); }
            { n8.addNode(n10); }
            
         )
         { n0 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      LOOKAHEAD(<FD> | <SD>)
      { n15 = new NodeList(); }
      { n13 = new NodeSequence(2); }
      n14=FileAndSortDescriptionEntry()
      { n13.addNode(n14); }
      (
         n16=DataDescriptionEntry()
         { n15.addNode(n16); }
      )+
      { n15.nodes.trimToSize(); }
      { n13.addNode(n15); }
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new FileSection();} 
   { return new FileSection(n0,n12); }
}

FileAndSortDescriptionEntry FileAndSortDescriptionEntry() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   FileName n5;
   NodeListOptional n6 = new NodeListOptional();
   FileAndSortDescriptionEntryClause n7;
   NodeToken n8;
   Token n9;

   
}
{
try {
   (
      (
         n2=<FD> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SD> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=FileName()
   (
      n7=FileAndSortDescriptionEntryClause()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new FileAndSortDescriptionEntry();} 
   { return new FileAndSortDescriptionEntry(n0,n5,n6,n8); }
}

FileAndSortDescriptionEntryClause FileAndSortDescriptionEntryClause() :
{
   NodeChoice n0;
   ExternalClause n1;
   GlobalClause n2;
   BlockContainsClause n3;
   RecordContainsClause n4;
   LabelRecordsClause n5;
   ValueOfClause n6;
   DataRecordClause n7;
   LinageClause n8;
   CodeSetClause n9;
   ReportClause n10;
   RecordingModeClause n11;

   
}
{
try {
   (
      n1=ExternalClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=GlobalClause()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BlockContainsClause()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=RecordContainsClause()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=LabelRecordsClause()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=ValueOfClause()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=DataRecordClause()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=LinageClause()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=CodeSetClause()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=ReportClause()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=RecordingModeClause()
      { n0 = new NodeChoice(n11, 10); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new FileAndSortDescriptionEntryClause();} 
   { return new FileAndSortDescriptionEntryClause(n0); }
}

ExternalClause ExternalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
try {
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<EXTERNAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ExternalClause();} 
   { return new ExternalClause(n0,n3); }
}

GlobalClause GlobalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
try {
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<GLOBAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new GlobalClause();} 
   { return new GlobalClause(n0,n3); }
}

BlockContainsClause BlockContainsClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   IntegerConstant n7;
   NodeToken n8;
   Token n9;
   IntegerConstant n10;
   NodeOptional n11 = new NodeOptional();
   NodeChoice n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
try {
   n1=<BLOCK> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CONTAINS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      { n6 = new NodeSequence(2); }
      n7=IntegerConstant()
      { n6.addNode(n7); }
      n9=<TO> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n6.addNode(n8); }
      { n5.addNode(n6); }
   )?
   n10=IntegerConstant()
   (
      (
         n14=<RECORDS> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12 = new NodeChoice(n13, 0); }
      |
         n16=<CHARACTERS> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n12 = new NodeChoice(n15, 1); }
      )
      { n11.addNode(n12); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new BlockContainsClause();} 
   { return new BlockContainsClause(n0,n2,n5,n10,n11); }
}

RecordContainsClause RecordContainsClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeOptional n7 = new NodeOptional();
   NodeSequence n8;
   IntegerConstant n9;
   NodeToken n10;
   Token n11;
   IntegerConstant n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeOptional n17 = new NodeOptional();
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22 = new NodeOptional();
   NodeToken n23;
   Token n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   NodeSequence n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   IntegerConstant n33;
   NodeOptional n34;
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   IntegerConstant n38;
   NodeOptional n39;
   NodeToken n40;
   Token n41;
   NodeOptional n42 = new NodeOptional();
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeOptional n46;
   NodeToken n47;
   Token n48;
   QualifiedDataName n49;

   
}
{
try {
   n1=<RECORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<CONTAINS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         { n6 = new NodeSequence(3); }
         (
            { n8 = new NodeSequence(2); }
            n9=IntegerConstant()
            { n8.addNode(n9); }
            n11=<TO> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n8.addNode(n10); }
            { n7.addNode(n8); }
         )?
         { n6.addNode(n7); }
         n12=IntegerConstant()
         { n6.addNode(n12); }
         (
            n15=<CHARACTERS> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13.addNode(n14); }
         )?
         { n6.addNode(n13); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n16 = new NodeSequence(6); }
         (
            n19=<IS> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
         )?
         { n16.addNode(n17); }
         n21=<VARYING> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n16.addNode(n20); }
         (
            n24=<IN> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n22.addNode(n23); }
         )?
         { n16.addNode(n22); }
         (
            n27=<SIZE> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25.addNode(n26); }
         )?
         { n16.addNode(n25); }
         (
            { n30 = new NodeOptional(); }
            { n34 = new NodeOptional(); }
            { n39 = new NodeOptional(); }
            { n29 = new NodeSequence(4); }
            (
               n32=<FROM> { n31 = JTBToolkit.makeNodeToken(n32); }
               { n30.addNode(n31); }
            )?
            { n29.addNode(n30); }
            n33=IntegerConstant()
            { n29.addNode(n33); }
            (
               { n35 = new NodeSequence(2); }
               n37=<TO> { n36 = JTBToolkit.makeNodeToken(n37); }
               { n35.addNode(n36); }
               n38=IntegerConstant()
               { n35.addNode(n38); }
               { n34.addNode(n35); }
            )?
            { n29.addNode(n34); }
            (
               n41=<CHARACTERS> { n40 = JTBToolkit.makeNodeToken(n41); }
               { n39.addNode(n40); }
            )?
            { n29.addNode(n39); }
            { n28.addNode(n29); }
         )?
         { n16.addNode(n28); }
         (
            { n46 = new NodeOptional(); }
            { n43 = new NodeSequence(3); }
            n45=<DEPENDING> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n43.addNode(n44); }
            (
               n48=<ON> { n47 = JTBToolkit.makeNodeToken(n48); }
               { n46.addNode(n47); }
            )?
            { n43.addNode(n46); }
            n49=QualifiedDataName()
            { n43.addNode(n49); }
            { n42.addNode(n43); }
         )?
         { n16.addNode(n42); }
         { n5 = new NodeChoice(n16, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new RecordContainsClause();} 
   { return new RecordContainsClause(n0,n2,n5); }
}

LabelRecordsClause LabelRecordsClause() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeList n20 = new NodeList();
   DataName n21;

   
}
{
try {
   n1=<LABEL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            n8=<IS> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
         )?
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n9 = new NodeSequence(2); }
         n11=<RECORDS> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            n14=<ARE> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
         )?
         { n9.addNode(n12); }
         { n2 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      (
         n17=<OMITTED> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15 = new NodeChoice(n16, 0); }
      |
         n19=<STANDARD> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n15 = new NodeChoice(n18, 1); }
      |
         (
            n21=DataName()
            { n20.addNode(n21); }
         )+
         { n20.nodes.trimToSize(); }
         { n15 = new NodeChoice(n20, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new LabelRecordsClause();} 
   { return new LabelRecordsClause(n0,n2,n15); }
}

ValueOfClause ValueOfClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeSequence n5;
   SystemName n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   QualifiedDataName n10;
   Literal n11;

   
}
{
try {
   n1=<VALUE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<OF> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(3); }
      n6=SystemName()
      { n5.addNode(n6); }
      n8=<IS> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      (
         (
            n10=QualifiedDataName()
            { n9 = new NodeChoice(n10, 0); }
         |
            n11=Literal()
            { n9 = new NodeChoice(n11, 1); }
         )
         
      )
      { n5.addNode(n9); }
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ValueOfClause();} 
   { return new ValueOfClause(n0,n2,n4); }
}

DataRecordClause DataRecordClause() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeList n15 = new NodeList();
   NodeSequence n16;
   DataName n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;

   
}
{
try {
   n1=<DATA> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            n8=<IS> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
         )?
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n9 = new NodeSequence(2); }
         n11=<RECORDS> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            n14=<ARE> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
         )?
         { n9.addNode(n12); }
         { n2 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      { n18 = new NodeOptional(); }
      { n16 = new NodeSequence(2); }
      n17=DataName()
      { n16.addNode(n17); }
      (
         n20=<COMMACHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n16.addNode(n18); }
      { n15.addNode(n16); }
   )+
   { n15.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataRecordClause();} 
   { return new DataRecordClause(n0,n2,n15); }
}

LinageClause LinageClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   DataName n6;
   IntegerConstant n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeListOptional n11 = new NodeListOptional();
   NodeChoice n12;
   NodeSequence n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   NodeChoice n22;
   DataName n23;
   IntegerConstant n24;
   NodeSequence n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeChoice n34;
   DataName n35;
   IntegerConstant n36;
   NodeSequence n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   NodeOptional n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeChoice n46;
   DataName n47;
   IntegerConstant n48;

   
}
{
try {
   n1=<LINAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         n6=DataName()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=IntegerConstant()
         { n5 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      n10=<LINES> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   (
      { n14 = new NodeOptional(); }
      { n19 = new NodeOptional(); }
      { n26 = new NodeOptional(); }
      { n29 = new NodeOptional(); }
      { n38 = new NodeOptional(); }
      { n41 = new NodeOptional(); }
      (
         { n13 = new NodeSequence(4); }
         (
            n16=<WITH> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
         )?
         { n13.addNode(n14); }
         n18=<FOOTING> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n13.addNode(n17); }
         (
            n21=<AT> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
         )?
         { n13.addNode(n19); }
         (
            (
               n23=DataName()
               { n22 = new NodeChoice(n23, 0); }
            |
               n24=IntegerConstant()
               { n22 = new NodeChoice(n24, 1); }
            )
            
         )
         { n13.addNode(n22); }
         { n12 = new NodeChoice(n13, 0); }
      |
         LOOKAHEAD([ <LINES> ] [ <AT> ] <TOP>)
         { n25 = new NodeSequence(5); }
         (
            n28=<LINES> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n26.addNode(n27); }
         )?
         { n25.addNode(n26); }
         (
            n31=<AT> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n29.addNode(n30); }
         )?
         { n25.addNode(n29); }
         n33=<TOP> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n25.addNode(n32); }
         (
            (
               n35=DataName()
               { n34 = new NodeChoice(n35, 0); }
            |
               n36=IntegerConstant()
               { n34 = new NodeChoice(n36, 1); }
            )
            
         )
         { n25.addNode(n34); }
         { n12 = new NodeChoice(n25, 1); }
      |
         LOOKAHEAD([ <LINES> ] [ <AT> ] <BOTTOM>)
         { n37 = new NodeSequence(5); }
         (
            n40=<LINES> { n39 = JTBToolkit.makeNodeToken(n40); }
            { n38.addNode(n39); }
         )?
         { n37.addNode(n38); }
         (
            n43=<AT> { n42 = JTBToolkit.makeNodeToken(n43); }
            { n41.addNode(n42); }
         )?
         { n37.addNode(n41); }
         n45=<BOTTOM> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n37.addNode(n44); }
         (
            (
               n47=DataName()
               { n46 = new NodeChoice(n47, 0); }
            |
               n48=IntegerConstant()
               { n46 = new NodeChoice(n48, 1); }
            )
            
         )
         { n37.addNode(n46); }
         { n12 = new NodeChoice(n37, 2); }
      )
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new LinageClause();} 
   { return new LinageClause(n0,n2,n5,n8,n11); }
}

RecordingModeClause RecordingModeClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   Mode n8;

   
}
{
try {
   n1=<RECORDING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<MODE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=Mode()
   
} catch(ParseException e) {
	error_skipto(DOT); return new RecordingModeClause();} 
   { return new RecordingModeClause(n0,n2,n5,n8); }
}

CodeSetClause CodeSetClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   AlphabetName n5;

   
}
{
try {
   n1=<CODE_SET> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=AlphabetName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new CodeSetClause();} 
   { return new CodeSetClause(n0,n2,n5); }
}

ReportClause ReportClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeList n13 = new NodeList();
   QualifiedDataName n14;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<REPORT> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<REPORTS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<ARE> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      n14=QualifiedDataName()
      { n13.addNode(n14); }
   )+
   { n13.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ReportClause();} 
   { return new ReportClause(n0,n13); }
}

DataDescriptionEntry DataDescriptionEntry() :
{
   NodeChoice n0;
   NodeSequence n1;
   LevelNumber n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   DataName n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   DataDescriptionEntryClause n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   DataName n15;
   RenamesClause n16;
   NodeToken n17;
   Token n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   DataName n22;
   NodeListOptional n23 = new NodeListOptional();
   DataDescriptionEntryClause n24;
   NodeToken n25;
   Token n26;
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   ConditionName n30;
   ConditionValueClause n31;
   NodeToken n32;
   Token n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   ConditionName n37;
   ConditionValueClause n38;
   NodeToken n39;
   Token n40;
   NodeSequence n41;
   NodeChoice n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeChoice n49;
   NodeSequence n50;
   NodeToken n51;
   Token n52;
   NodeChoice n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeSequence n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeSequence n71;
   NodeToken n72;
   Token n73;
   NodeToken n74;
   Token n75;
   NodeToken n76;
   Token n77;
   NodeToken n78;
   Token n79;
   NodeToken n80;
   Token n81;
   NodeSequence n82;
   DeclareCursorStatement n83;
   NodeToken n84;
   Token n85;
   NodeToken n86;
   Token n87;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(4); }
         n2=LevelNumber()
         { n1.addNode(n2); }
         (
            (
               n5=DataName()
               { n4 = new NodeChoice(n5, 0); }
            |
               n7=<FILLER> { n6 = JTBToolkit.makeNodeToken(n7); }
               { n4 = new NodeChoice(n6, 1); }
            )
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         (
            n9=DataDescriptionEntryClause()
            { n8.addNode(n9); }
         )*
         { n8.nodes.trimToSize(); }
         { n1.addNode(n8); }
         n11=<DOT> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n1.addNode(n10); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n12 = new NodeSequence(4); }
         n14=<LEVEL_66> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
         n15=DataName()
         { n12.addNode(n15); }
         n16=RenamesClause()
         { n12.addNode(n16); }
         n18=<DOT> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n12.addNode(n17); }
         { n0 = new NodeChoice(n12, 1); }
      |
         { n19 = new NodeSequence(4); }
         n21=<LEVEL_77> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n19.addNode(n20); }
         n22=DataName()
         { n19.addNode(n22); }
         (
            n24=DataDescriptionEntryClause()
            { n23.addNode(n24); }
         )*
         { n23.nodes.trimToSize(); }
         { n19.addNode(n23); }
         n26=<DOT> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n19.addNode(n25); }
         { n0 = new NodeChoice(n19, 2); }
      |
         { n27 = new NodeSequence(4); }
         n29=<LEVEL_78> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n27.addNode(n28); }
         n30=ConditionName()
         { n27.addNode(n30); }
         n31=ConditionValueClause()
         { n27.addNode(n31); }
         n33=<DOT> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n27.addNode(n32); }
         { n0 = new NodeChoice(n27, 3); }
      |
         { n34 = new NodeSequence(4); }
         n36=<LEVEL_88> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n34.addNode(n35); }
         n37=ConditionName()
         { n34.addNode(n37); }
         n38=ConditionValueClause()
         { n34.addNode(n38); }
         n40=<DOT> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n34.addNode(n39); }
         { n0 = new NodeChoice(n34, 4); }
      |
         { n41 = new NodeSequence(3); }
         (
            (
               n44=<EXEC> { n43 = JTBToolkit.makeNodeToken(n44); }
               { n42 = new NodeChoice(n43, 0); }
            |
               n46=<EXECUTE> { n45 = JTBToolkit.makeNodeToken(n46); }
               { n42 = new NodeChoice(n45, 1); }
            )
            
         )
         { n41.addNode(n42); }
         n48=<K_SQL> { n47 = JTBToolkit.makeNodeToken(n48); }
         { n41.addNode(n47); }
         (
            (
               { n50 = new NodeSequence(3); }
               n52=<K_INCLUDE> { n51 = JTBToolkit.makeNodeToken(n52); }
               { n50.addNode(n51); }
               (
                  (
                     n55=<S_IDENTIFIER> { n54 = JTBToolkit.makeNodeToken(n55); }
                     { n53 = new NodeChoice(n54, 0); }
                  |
                     n57=<S_QUOTED_IDENTIFIER> { n56 = JTBToolkit.makeNodeToken(n57); }
                     { n53 = new NodeChoice(n56, 1); }
                  )
                  
               )
               { n50.addNode(n53); }
               n59=<DOT> { n58 = JTBToolkit.makeNodeToken(n59); }
               { n50.addNode(n58); }
               { n49 = new NodeChoice(n50, 0); }
            |
               { n60 = new NodeSequence(5); }
               n62=<K_BEGIN> { n61 = JTBToolkit.makeNodeToken(n62); }
               { n60.addNode(n61); }
               n64=<K_DECLARE> { n63 = JTBToolkit.makeNodeToken(n64); }
               { n60.addNode(n63); }
               n66=<K_SECTION> { n65 = JTBToolkit.makeNodeToken(n66); }
               { n60.addNode(n65); }
               n68=<END_EXEC> { n67 = JTBToolkit.makeNodeToken(n68); }
               { n60.addNode(n67); }
               n70=<DOT> { n69 = JTBToolkit.makeNodeToken(n70); }
               { n60.addNode(n69); }
               { n49 = new NodeChoice(n60, 1); }
            |
               { n71 = new NodeSequence(5); }
               n73=<K_END> { n72 = JTBToolkit.makeNodeToken(n73); }
               { n71.addNode(n72); }
               n75=<K_DECLARE> { n74 = JTBToolkit.makeNodeToken(n75); }
               { n71.addNode(n74); }
               n77=<K_SECTION> { n76 = JTBToolkit.makeNodeToken(n77); }
               { n71.addNode(n76); }
               n79=<END_EXEC> { n78 = JTBToolkit.makeNodeToken(n79); }
               { n71.addNode(n78); }
               n81=<DOT> { n80 = JTBToolkit.makeNodeToken(n81); }
               { n71.addNode(n80); }
               { n49 = new NodeChoice(n71, 2); }
            |
               { n82 = new NodeSequence(3); }
               n83=DeclareCursorStatement()
               { n82.addNode(n83); }
               n85=<END_EXEC> { n84 = JTBToolkit.makeNodeToken(n85); }
               { n82.addNode(n84); }
               n87=<DOT> { n86 = JTBToolkit.makeNodeToken(n87); }
               { n82.addNode(n86); }
               { n49 = new NodeChoice(n82, 3); }
            )
            
         )
         { n41.addNode(n49); }
         { n0 = new NodeChoice(n41, 5); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataDescriptionEntry();} 
   { return new DataDescriptionEntry(n0); }
}

DataDescriptionEntryClause DataDescriptionEntryClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   DataPictureClause n4;
   DataValueClause n5;
   DataUsageClause n6;
   DataRedefinesClause n7;
   DataExternalClause n8;
   DataGlobalClause n9;
   DataSignClause n10;
   DataOccursClause n11;
   DataSynchronizedClause n12;
   DataJustifiedClause n13;
   DataBlankWhenZeroClause n14;
   NodeOptional n15 = new NodeOptional();
   NodeToken n16;
   Token n17;

   
}
{
try {
   (
      n2=<COMMACHAR> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      (
         LOOKAHEAD(<PICTURE> | <PIC>)
         n4=DataPictureClause()
         { n3 = new NodeChoice(n4, 0); }
      |
         LOOKAHEAD(<VALUE> [ <IS> ] | <VALUES> [ <ARE> ])
         n5=DataValueClause()
         { n3 = new NodeChoice(n5, 1); }
      |
         LOOKAHEAD(DataUsageClause())
         n6=DataUsageClause()
         { n3 = new NodeChoice(n6, 2); }
      |
         LOOKAHEAD(<REDEFINES>)
         n7=DataRedefinesClause()
         { n3 = new NodeChoice(n7, 3); }
      |
         LOOKAHEAD(DataExternalClause())
         n8=DataExternalClause()
         { n3 = new NodeChoice(n8, 4); }
      |
         LOOKAHEAD(DataGlobalClause())
         n9=DataGlobalClause()
         { n3 = new NodeChoice(n9, 5); }
      |
         LOOKAHEAD(DataSignClause())
         n10=DataSignClause()
         { n3 = new NodeChoice(n10, 6); }
      |
         LOOKAHEAD(<OCCURS>)
         n11=DataOccursClause()
         { n3 = new NodeChoice(n11, 7); }
      |
         LOOKAHEAD(DataSynchronizedClause())
         n12=DataSynchronizedClause()
         { n3 = new NodeChoice(n12, 8); }
      |
         LOOKAHEAD(<JUSTIFIED> | <JUST>)
         n13=DataJustifiedClause()
         { n3 = new NodeChoice(n13, 9); }
      |
         LOOKAHEAD(DataBlankWhenZeroClause())
         n14=DataBlankWhenZeroClause()
         { n3 = new NodeChoice(n14, 10); }
      )
      
   )
   (
      n17=<COMMACHAR> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataDescriptionEntryClause();} 
   { return new DataDescriptionEntryClause(n0,n3,n15); }
}

DataRedefinesClause DataRedefinesClause() :
{
   NodeToken n0;
   Token n1;
   DataName n2;

   
}
{
try {
   n1=<REDEFINES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=DataName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataRedefinesClause();} 
   { return new DataRedefinesClause(n0,n2); }
}

DataBlankWhenZeroClause DataBlankWhenZeroClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
try {
   n1=<BLANK> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<WHEN> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         n7=<ZERO> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<ZEROS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      |
         n11=<ZEROES> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n5 = new NodeChoice(n10, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataBlankWhenZeroClause();} 
   { return new DataBlankWhenZeroClause(n0,n2,n5); }
}

DataJustifiedClause DataJustifiedClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;

   
}
{
try {
   (
      (
         n2=<JUSTIFIED> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<JUST> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<RIGHT> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataJustifiedClause();} 
   { return new DataJustifiedClause(n0,n5); }
}

DataOccursClause DataOccursClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeChoice n4;
   IntegerConstant n5;
   DataName n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   IntegerConstant n10;
   DataName n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeOptional n15 = new NodeOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   QualifiedDataName n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeSequence n24;
   NodeChoice n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   NodeOptional n33;
   NodeToken n34;
   Token n35;
   NodeList n36;
   QualifiedDataName n37;
   NodeOptional n38 = new NodeOptional();
   NodeSequence n39;
   NodeToken n40;
   Token n41;
   NodeOptional n42;
   NodeToken n43;
   Token n44;
   NodeList n45;
   NodeSequence n46;
   IndexName n47;
   NodeOptional n48;
   NodeToken n49;
   Token n50;

   
}
{
try {
   n1=<OCCURS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      (
         (
            n5=IntegerConstant()
            { n4 = new NodeChoice(n5, 0); }
         |
            n6=DataName()
            { n4 = new NodeChoice(n6, 1); }
         )
         
      )
      { n3.addNode(n4); }
      n8=<TO> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   (
      (
         n10=IntegerConstant()
         { n9 = new NodeChoice(n10, 0); }
      |
         n11=DataName()
         { n9 = new NodeChoice(n11, 1); }
      )
      
   )
   (
      n14=<TIMES> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
   )?
   (
      { n19 = new NodeOptional(); }
      { n16 = new NodeSequence(3); }
      n18=<DEPENDING> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      (
         n21=<ON> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n19.addNode(n20); }
      )?
      { n16.addNode(n19); }
      n22=QualifiedDataName()
      { n16.addNode(n22); }
      { n15.addNode(n16); }
   )?
   (
      { n30 = new NodeOptional(); }
      { n33 = new NodeOptional(); }
      { n36 = new NodeList(); }
      { n24 = new NodeSequence(4); }
      (
         (
            n27=<ASCENDING> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n25 = new NodeChoice(n26, 0); }
         |
            n29=<DESCENDING> { n28 = JTBToolkit.makeNodeToken(n29); }
            { n25 = new NodeChoice(n28, 1); }
         )
         
      )
      { n24.addNode(n25); }
      (
         n32=<KEY> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n30.addNode(n31); }
      )?
      { n24.addNode(n30); }
      (
         n35=<IS> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
      )?
      { n24.addNode(n33); }
      (
         n37=QualifiedDataName()
         { n36.addNode(n37); }
      )+
      { n36.nodes.trimToSize(); }
      { n24.addNode(n36); }
      { n23.addNode(n24); }
   )*
   { n23.nodes.trimToSize(); }
   (
      { n42 = new NodeOptional(); }
      { n45 = new NodeList(); }
      { n39 = new NodeSequence(3); }
      n41=<INDEXED> { n40 = JTBToolkit.makeNodeToken(n41); }
      { n39.addNode(n40); }
      (
         n44=<BY> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
      )?
      { n39.addNode(n42); }
      (
         { n48 = new NodeOptional(); }
         { n46 = new NodeSequence(2); }
         n47=IndexName()
         { n46.addNode(n47); }
         (
            n50=<COMMACHAR> { n49 = JTBToolkit.makeNodeToken(n50); }
            { n48.addNode(n49); }
         )?
         { n46.addNode(n48); }
         { n45.addNode(n46); }
      )+
      { n45.nodes.trimToSize(); }
      { n39.addNode(n45); }
      { n38.addNode(n39); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataOccursClause();} 
   { return new DataOccursClause(n0,n2,n9,n12,n15,n23,n38); }
}

DataPictureClause DataPictureClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   PictureString n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;

   
}
{
try {
   (
      (
         n2=<PICTURE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<PIC> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<IS> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=PictureString()
   (
      n11=<VARYING> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataPictureClause();} 
   { return new DataPictureClause(n0,n5,n8,n9); }
}

PictureString PictureString() :
{
   PictureOccurence n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   PictureOccurence n6;
   PictureOccurence n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeToken n9;
   Token n10;

   
}
{
try {
   n0=PictureOccurence()
   (
      (
         LOOKAHEAD(<DOTCHAR> PictureOccurence())
         { n3 = new NodeSequence(3); }
         n5=<DOTCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=PictureOccurence()
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n7=PictureOccurence()
         { n2 = new NodeChoice(n7, 1); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      n10=<DOTCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PictureString();} 
   { return new PictureString(n0,n1,n8); }
}

PictureOccurence PictureOccurence() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeList n2 = new NodeList();
   NonDotChars n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   IntegerConstant n9;
   DataName n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeChoice n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeChoice n20;
   IntegerConstant n21;
   DataName n22;
   NodeToken n23;
   Token n24;
   NonDotChars n25;

   
}
{
try {
   (
      { n1 = new NodeSequence(2); }
      (
         n3=NonDotChars()
         { n2.addNode(n3); }
      )+
      { n2.nodes.trimToSize(); }
      { n1.addNode(n2); }
      (
         { n5 = new NodeSequence(3); }
         n7=<LPARENCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         (
            (
               n9=IntegerConstant()
               { n8 = new NodeChoice(n9, 0); }
            |
               n10=DataName()
               { n8 = new NodeChoice(n10, 1); }
            )
            
         )
         { n5.addNode(n8); }
         n12=<RPARENCHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n5.addNode(n11); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n13 = new NodeSequence(2); }
      n15=<DOTCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      (
         (
            { n17 = new NodeSequence(3); }
            n19=<LPARENCHAR> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
            (
               (
                  n21=IntegerConstant()
                  { n20 = new NodeChoice(n21, 0); }
               |
                  n22=DataName()
                  { n20 = new NodeChoice(n22, 1); }
               )
               
            )
            { n17.addNode(n20); }
            n24=<RPARENCHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n17.addNode(n23); }
            { n16 = new NodeChoice(n17, 0); }
         |
            n25=NonDotChars()
            { n16 = new NodeChoice(n25, 1); }
         )
         
      )
      { n13.addNode(n16); }
      { n0 = new NodeChoice(n13, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PictureOccurence();} 
   { return new PictureOccurence(n0); }
}

PicturePunctuation PicturePunctuation() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
try {
   (
      n2=<SLASHCHAR> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<COMMACHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<COLONCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<ASTERISKCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<MINUSCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<PLUSCHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<POW> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<LESSTHANOREQUAL> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<LESSTHANCHAR> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<MORETHANOREQUAL> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<MORETHANCHAR> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<EQUALCHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<NOTEQUALCHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PicturePunctuation();} 
   { return new PicturePunctuation(n0); }
}

PictureCurrency PictureCurrency() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<DOLLARCHAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PictureCurrency();} 
   { return new PictureCurrency(n0); }
}

NonDotChars NonDotChars() :
{
   NodeChoice n0;
   IntegerConstant n1;
   CobolWord n2;
   PicturePunctuation n3;
   PictureCurrency n4;

   
}
{
try {
   (
      n1=IntegerConstant()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=CobolWord()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=PicturePunctuation()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=PictureCurrency()
      { n0 = new NodeChoice(n4, 3); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new NonDotChars();} 
   { return new NonDotChars(n0); }
}

DataExternalClause DataExternalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
try {
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<EXTERNAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataExternalClause();} 
   { return new DataExternalClause(n0,n3); }
}

DataGlobalClause DataGlobalClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
try {
   (
      n2=<IS> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<GLOBAL> { n3 = JTBToolkit.makeNodeToken(n4); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataGlobalClause();} 
   { return new DataGlobalClause(n0,n3); }
}

DataUsageClause DataUsageClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeSequence n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   DataName n53;

   
}
{
try {
   (
      { n4 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n3=<USAGE> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   (
      (
         n9=<BINARY> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<COMP> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      |
         n13=<COMP_1> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7 = new NodeChoice(n12, 2); }
      |
         n15=<COMP_2> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n7 = new NodeChoice(n14, 3); }
      |
         n17=<COMP_3> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n7 = new NodeChoice(n16, 4); }
      |
         n19=<COMP_4> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n7 = new NodeChoice(n18, 5); }
      |
         n21=<COMP_5> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n7 = new NodeChoice(n20, 6); }
      |
         n23=<COMPUTATIONAL> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n7 = new NodeChoice(n22, 7); }
      |
         n25=<COMPUTATIONAL_1> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n7 = new NodeChoice(n24, 8); }
      |
         n27=<COMPUTATIONAL_2> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n7 = new NodeChoice(n26, 9); }
      |
         n29=<COMPUTATIONAL_3> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n7 = new NodeChoice(n28, 10); }
      |
         n31=<COMPUTATIONAL_4> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n7 = new NodeChoice(n30, 11); }
      |
         n33=<COMPUTATIONAL_5> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n7 = new NodeChoice(n32, 12); }
      |
         n35=<DISPLAY> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n7 = new NodeChoice(n34, 13); }
      |
         n37=<DISPLAY_1> { n36 = JTBToolkit.makeNodeToken(n37); }
         { n7 = new NodeChoice(n36, 14); }
      |
         n39=<INDEX> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n7 = new NodeChoice(n38, 15); }
      |
         n41=<PACKED_DECIMAL> { n40 = JTBToolkit.makeNodeToken(n41); }
         { n7 = new NodeChoice(n40, 16); }
      |
         n43=<POINTER> { n42 = JTBToolkit.makeNodeToken(n43); }
         { n7 = new NodeChoice(n42, 17); }
      |
         n45=<FUNCTION_POINTER> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n7 = new NodeChoice(n44, 18); }
      |
         n47=<PROCEDURE_POINTER> { n46 = JTBToolkit.makeNodeToken(n47); }
         { n7 = new NodeChoice(n46, 19); }
      |
         { n48 = new NodeSequence(3); }
         n50=<OBJECT> { n49 = JTBToolkit.makeNodeToken(n50); }
         { n48.addNode(n49); }
         n52=<REFERENCE> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n48.addNode(n51); }
         n53=DataName()
         { n48.addNode(n53); }
         { n7 = new NodeChoice(n48, 20); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataUsageClause();} 
   { return new DataUsageClause(n0,n7); }
}

DataSignClause DataSignClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;

   
}
{
try {
   (
      { n4 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n3=<SIGN> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   (
      (
         n9=<LEADING> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7 = new NodeChoice(n8, 0); }
      |
         n11=<TRAILING> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n7 = new NodeChoice(n10, 1); }
      )
      
   )
   (
      { n16 = new NodeOptional(); }
      { n13 = new NodeSequence(2); }
      n15=<SEPARATE> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      (
         n18=<CHARACTER> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
      )?
      { n13.addNode(n16); }
      { n12.addNode(n13); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataSignClause();} 
   { return new DataSignClause(n0,n7,n12); }
}

DataSynchronizedClause DataSynchronizedClause() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
try {
   (
      (
         n2=<SYNCHRONIZED> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SYNC> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         (
            n8=<LEFT> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6 = new NodeChoice(n7, 0); }
         |
            n10=<RIGHT> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n6 = new NodeChoice(n9, 1); }
         )
         
      )
      { n5.addNode(n6); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataSynchronizedClause();} 
   { return new DataSynchronizedClause(n0,n5); }
}

DataValueClause DataValueClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeList n13 = new NodeList();
   NodeSequence n14;
   NodeChoice n15;
   Identifier n16;
   Literal n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21;
   NodeSequence n22;
   NodeChoice n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   Literal n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<VALUE> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<IS> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9=<VALUES> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         (
            n12=<ARE> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
         )?
         { n7.addNode(n10); }
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      { n18 = new NodeOptional(); }
      { n21 = new NodeOptional(); }
      { n14 = new NodeSequence(3); }
      (
         (
            n16=Identifier()
            { n15 = new NodeChoice(n16, 0); }
         |
            n17=Literal()
            { n15 = new NodeChoice(n17, 1); }
         )
         
      )
      { n14.addNode(n15); }
      (
         n20=<COMMACHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n14.addNode(n18); }
      (
         LOOKAHEAD(<THROUGH> | <THRU>)
         { n29 = new NodeOptional(); }
         { n22 = new NodeSequence(3); }
         (
            (
               n25=<THROUGH> { n24 = JTBToolkit.makeNodeToken(n25); }
               { n23 = new NodeChoice(n24, 0); }
            |
               n27=<THRU> { n26 = JTBToolkit.makeNodeToken(n27); }
               { n23 = new NodeChoice(n26, 1); }
            )
            
         )
         { n22.addNode(n23); }
         n28=Literal()
         { n22.addNode(n28); }
         (
            n31=<COMMACHAR> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n29.addNode(n30); }
         )?
         { n22.addNode(n29); }
         { n21.addNode(n22); }
      )?
      { n14.addNode(n21); }
      { n13.addNode(n14); }
   )+
   { n13.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new DataValueClause();} 
   { return new DataValueClause(n0,n13); }
}

ConditionValueClause ConditionValueClause() :
{
   DataValueClause n0;

   
}
{
try {
   n0=DataValueClause()
   
} catch(ParseException e) {
	error_skipto(DOT); return new ConditionValueClause();} 
   { return new ConditionValueClause(n0); }
}

RenamesClause RenamesClause() :
{
   NodeToken n0;
   Token n1;
   QualifiedDataName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   QualifiedDataName n10;

   
}
{
try {
   n1=<RENAMES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=QualifiedDataName()
   (
      { n4 = new NodeSequence(2); }
      (
         (
            n7=<THROUGH> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5 = new NodeChoice(n6, 0); }
         |
            n9=<THRU> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n5 = new NodeChoice(n8, 1); }
         )
         
      )
      { n4.addNode(n5); }
      n10=QualifiedDataName()
      { n4.addNode(n10); }
      { n3.addNode(n4); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new RenamesClause();} 
   { return new RenamesClause(n0,n2,n3); }
}

WorkingStorageSection WorkingStorageSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   DataDescriptionEntry n7;

   
}
{
try {
   n1=<WORKING_STORAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=DataDescriptionEntry()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new WorkingStorageSection();} 
   { return new WorkingStorageSection(n0,n2,n4,n6); }
}

LinkageSection LinkageSection() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   DataDescriptionEntry n7;

   
}
{
try {
   n1=<LINKAGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SECTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DOT> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=DataDescriptionEntry()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new LinkageSection();} 
   { return new LinkageSection(n0,n2,n4,n6); }
}

ProcedureDivision ProcedureDivision() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   UsingArgs n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   Declaratives n17;
   ProcedureBody n18;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<PROCEDURE> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5=<DIVISION> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n7=<PROCEDURE_DIVISION> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n0 = new NodeChoice(n6, 1); }
      )
      
   )
   (
      LOOKAHEAD([ <DOT> ] <USING>)
      { n10 = new NodeOptional(); }
      { n9 = new NodeSequence(2); }
      (
         n12=<DOT> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
      )?
      { n9.addNode(n10); }
      n13=UsingArgs()
      { n9.addNode(n13); }
      { n8.addNode(n9); }
   )?
   n15=<DOT> { n14 = JTBToolkit.makeNodeToken(n15); }
   (
      n17=Declaratives()
      { n16.addNode(n17); }
   )?
   n18=ProcedureBody()
   
} catch(ParseException e) {
	error_skipto(DOT); return new ProcedureDivision();} 
   { return new ProcedureDivision(n0,n8,n14,n16,n18); }
}

UsingArgs UsingArgs() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeOptional n4;
   NodeSequence n5;
   NodeOptional n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   QualifiedDataName n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;

   
}
{
try {
   n1=<USING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n4 = new NodeOptional(); }
      { n15 = new NodeOptional(); }
      { n3 = new NodeSequence(3); }
      (
         { n6 = new NodeOptional(); }
         { n5 = new NodeSequence(2); }
         (
            LOOKAHEAD(<BY>)
            n8=<BY> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
         )?
         { n5.addNode(n6); }
         (
            (
               n11=<REFERENCE> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n9 = new NodeChoice(n10, 0); }
            |
               n13=<VALUE> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n9 = new NodeChoice(n12, 1); }
            )
            
         )
         { n5.addNode(n9); }
         { n4.addNode(n5); }
      )?
      { n3.addNode(n4); }
      n14=QualifiedDataName()
      { n3.addNode(n14); }
      (
         n17=<COMMACHAR> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
      )?
      { n3.addNode(n15); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new UsingArgs();} 
   { return new UsingArgs(n0,n2); }
}

Declaratives Declaratives() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   NodeSequence n5;
   SectionHeader n6;
   NodeToken n7;
   Token n8;
   UseStatement n9;
   NodeToken n10;
   Token n11;
   Paragraphs n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;

   
}
{
try {
   n1=<DECLARATIVES> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(5); }
      n6=SectionHeader()
      { n5.addNode(n6); }
      n8=<DOT> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      n9=UseStatement()
      { n5.addNode(n9); }
      n11=<DOT> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n5.addNode(n10); }
      n12=Paragraphs()
      { n5.addNode(n12); }
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   n14=<END> { n13 = JTBToolkit.makeNodeToken(n14); }
   n16=<DECLARATIVES> { n15 = JTBToolkit.makeNodeToken(n16); }
   n18=<DOT> { n17 = JTBToolkit.makeNodeToken(n18); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new Declaratives();} 
   { return new Declaratives(n0,n2,n4,n13,n15,n17); }
}

ProcedureBody ProcedureBody() :
{
   Paragraphs n0;
   NodeListOptional n1 = new NodeListOptional();
   ProcedureSection n2;

   
}
{
try {
   n0=Paragraphs()
   (
      n2=ProcedureSection()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ProcedureBody();} 
   { return new ProcedureBody(n0,n1); }
}

ProcedureSection ProcedureSection() :
{
   SectionHeader n0;
   NodeToken n1;
   Token n2;
   Paragraphs n3;

   
}
{
try {
   n0=SectionHeader()
   n2=<DOT> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Paragraphs()
   
} catch(ParseException e) {
	error_skipto(DOT); return new ProcedureSection();} 
   { return new ProcedureSection(n0,n1,n3); }
}

SectionHeader SectionHeader() :
{
   SectionName n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   IntegerConstant n4;

   
}
{
try {
   n0=SectionName()
   n2=<SECTION> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      n4=IntegerConstant()
      { n3.addNode(n4); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SectionHeader();} 
   { return new SectionHeader(n0,n1,n3); }
}

Paragraphs Paragraphs() :
{
   NodeListOptional n0 = new NodeListOptional();
   Sentence n1;
   NodeListOptional n2 = new NodeListOptional();
   Paragraph n3;

   
}
{
try {
   (
      n1=Sentence()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   (
      n3=Paragraph()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new Paragraphs();} 
   { return new Paragraphs(n0,n2); }
}

Paragraph Paragraph() :
{
   NodeChoice n0;
   ParagraphName n1;
   EntryStatement n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   ExitProgramStatement n7;
   NodeToken n8;
   Token n9;
   NodeSequence n10;
   ExitStatement n11;
   NodeToken n12;
   Token n13;
   AlteredGoto n14;
   NodeListOptional n15 = new NodeListOptional();
   Sentence n16;

   
}
{
try {
   (
      (
         n1=ParagraphName()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=EntryStatement()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   n4=<DOT> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         LOOKAHEAD(ExitProgramStatement() <DOT>)
         { n6 = new NodeSequence(3); }
         n7=ExitProgramStatement()
         { n6.addNode(n7); }
         n9=<DOT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n6.addNode(n8); }
         { n5 = new NodeChoice(n6, 0); }
      |
         LOOKAHEAD(ExitStatement() <DOT>)
         { n10 = new NodeSequence(3); }
         n11=ExitStatement()
         { n10.addNode(n11); }
         n13=<DOT> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n10.addNode(n12); }
         { n5 = new NodeChoice(n10, 1); }
      |
         LOOKAHEAD(AlteredGoto())
         n14=AlteredGoto()
         { n5 = new NodeChoice(n14, 2); }
      |
         (
            n16=Sentence()
            { n15.addNode(n16); }
         )*
         { n15.nodes.trimToSize(); }
         { n5 = new NodeChoice(n15, 3); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new Paragraph();} 
   { return new Paragraph(n0,n3,n5); }
}

Sentence Sentence() :
{
   NodeList n0 = new NodeList();
   Statement n1;
   NodeToken n2;
   Token n3;

   
}
{
try {
   (
      n1=Statement()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   n3=<DOT> { n2 = JTBToolkit.makeNodeToken(n3); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new Sentence();} 
   { return new Sentence(n0,n2); }
}

StatementList StatementList() :
{
   NodeList n0 = new NodeList();
   Statement n1;

   
}
{
try {
   (
      n1=Statement()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new StatementList();} 
   { return new StatementList(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   AcceptStatement n1;
   AddStatement n2;
   AlterStatement n3;
   CallStatement n4;
   CancelStatement n5;
   CloseStatement n6;
   ComputeStatement n7;
   ContinueStatement n8;
   DeleteStatement n9;
   DisplayStatement n10;
   DivideStatement n11;
   EvaluateStatement n12;
   ExitProgramStatement n13;
   ExitStatement n14;
   GobackStatement n15;
   GotoStatement n16;
   IfStatement n17;
   InitializeStatement n18;
   InspectStatement n19;
   MergeStatement n20;
   MoveStatement n21;
   MultiplyStatement n22;
   OpenStatement n23;
   PerformStatement n24;
   ReadStatement n25;
   ReleaseStatement n26;
   ReturnStatement n27;
   RewriteStatement n28;
   SearchStatement n29;
   SetStatement n30;
   SortStatement n31;
   StartStatement n32;
   StopStatement n33;
   StringStatement n34;
   SubtractStatement n35;
   UnstringStatement n36;
   WriteStatement n37;
   ExecSqlStatement n38;
   EnableStatement n39;
   DisableStatement n40;
   ReceiveStatement n41;
   SendStatement n42;
   NodeOptional n43 = new NodeOptional();
   NodeToken n44;
   Token n45;

   
}
{
try {
   (
      (
         n1=AcceptStatement()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=AddStatement()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=AlterStatement()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=CallStatement()
         { n0 = new NodeChoice(n4, 3); }
      |
         n5=CancelStatement()
         { n0 = new NodeChoice(n5, 4); }
      |
         n6=CloseStatement()
         { n0 = new NodeChoice(n6, 5); }
      |
         n7=ComputeStatement()
         { n0 = new NodeChoice(n7, 6); }
      |
         n8=ContinueStatement()
         { n0 = new NodeChoice(n8, 7); }
      |
         n9=DeleteStatement()
         { n0 = new NodeChoice(n9, 8); }
      |
         n10=DisplayStatement()
         { n0 = new NodeChoice(n10, 9); }
      |
         n11=DivideStatement()
         { n0 = new NodeChoice(n11, 10); }
      |
         n12=EvaluateStatement()
         { n0 = new NodeChoice(n12, 11); }
      |
         LOOKAHEAD(ExitProgramStatement())
         n13=ExitProgramStatement()
         { n0 = new NodeChoice(n13, 12); }
      |
         n14=ExitStatement()
         { n0 = new NodeChoice(n14, 13); }
      |
         n15=GobackStatement()
         { n0 = new NodeChoice(n15, 14); }
      |
         n16=GotoStatement()
         { n0 = new NodeChoice(n16, 15); }
      |
         n17=IfStatement()
         { n0 = new NodeChoice(n17, 16); }
      |
         n18=InitializeStatement()
         { n0 = new NodeChoice(n18, 17); }
      |
         n19=InspectStatement()
         { n0 = new NodeChoice(n19, 18); }
      |
         n20=MergeStatement()
         { n0 = new NodeChoice(n20, 19); }
      |
         n21=MoveStatement()
         { n0 = new NodeChoice(n21, 20); }
      |
         n22=MultiplyStatement()
         { n0 = new NodeChoice(n22, 21); }
      |
         n23=OpenStatement()
         { n0 = new NodeChoice(n23, 22); }
      |
         n24=PerformStatement()
         { n0 = new NodeChoice(n24, 23); }
      |
         n25=ReadStatement()
         { n0 = new NodeChoice(n25, 24); }
      |
         n26=ReleaseStatement()
         { n0 = new NodeChoice(n26, 25); }
      |
         n27=ReturnStatement()
         { n0 = new NodeChoice(n27, 26); }
      |
         n28=RewriteStatement()
         { n0 = new NodeChoice(n28, 27); }
      |
         n29=SearchStatement()
         { n0 = new NodeChoice(n29, 28); }
      |
         n30=SetStatement()
         { n0 = new NodeChoice(n30, 29); }
      |
         n31=SortStatement()
         { n0 = new NodeChoice(n31, 30); }
      |
         n32=StartStatement()
         { n0 = new NodeChoice(n32, 31); }
      |
         n33=StopStatement()
         { n0 = new NodeChoice(n33, 32); }
      |
         n34=StringStatement()
         { n0 = new NodeChoice(n34, 33); }
      |
         n35=SubtractStatement()
         { n0 = new NodeChoice(n35, 34); }
      |
         n36=UnstringStatement()
         { n0 = new NodeChoice(n36, 35); }
      |
         n37=WriteStatement()
         { n0 = new NodeChoice(n37, 36); }
      |
         n38=ExecSqlStatement()
         { n0 = new NodeChoice(n38, 37); }
      |
         n39=EnableStatement()
         { n0 = new NodeChoice(n39, 38); }
      |
         n40=DisableStatement()
         { n0 = new NodeChoice(n40, 39); }
      |
         n41=ReceiveStatement()
         { n0 = new NodeChoice(n41, 40); }
      |
         n42=SendStatement()
         { n0 = new NodeChoice(n42, 41); }
      )
      
   )
   (
      n45=<COMMACHAR> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n43.addNode(n44); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new Statement();} 
   { return new Statement(n0,n43); }
}

EnableStatement EnableStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   Identifier n12;
   Literal n13;
   NodeOptional n14 = new NodeOptional();
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   Identifier n20;
   Literal n21;

   
}
{
try {
   n1=<ENABLE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<INPUT> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            n8=<TERMINAL> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
         )?
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n10=<OUTPUT> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n2 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      (
         n12=Identifier()
         { n11 = new NodeChoice(n12, 0); }
      |
         n13=Literal()
         { n11 = new NodeChoice(n13, 1); }
      )
      
   )
   (
      n16=<WITH> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
   )?
   n18=<KEY> { n17 = JTBToolkit.makeNodeToken(n18); }
   (
      (
         n20=Identifier()
         { n19 = new NodeChoice(n20, 0); }
      |
         n21=Literal()
         { n19 = new NodeChoice(n21, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new EnableStatement();} 
   { return new EnableStatement(n0,n2,n11,n14,n17,n19); }
}

DisableStatement DisableStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   Identifier n12;
   Literal n13;
   NodeOptional n14 = new NodeOptional();
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   Identifier n20;
   Literal n21;

   
}
{
try {
   n1=<DISABLE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n5=<INPUT> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            n8=<TERMINAL> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6.addNode(n7); }
         )?
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n10=<OUTPUT> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n2 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      (
         n12=Identifier()
         { n11 = new NodeChoice(n12, 0); }
      |
         n13=Literal()
         { n11 = new NodeChoice(n13, 1); }
      )
      
   )
   (
      n16=<WITH> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
   )?
   n18=<KEY> { n17 = JTBToolkit.makeNodeToken(n18); }
   (
      (
         n20=Identifier()
         { n19 = new NodeChoice(n20, 0); }
      |
         n21=Literal()
         { n19 = new NodeChoice(n21, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new DisableStatement();} 
   { return new DisableStatement(n0,n2,n11,n14,n17,n19); }
}

ReceiveStatement ReceiveStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Identifier n12;
   NodeOptional n13 = new NodeOptional();
   NodeChoice n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   Statement n22;

   
}
{
try {
   n1=<RECEIVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   (
      (
         n7=<MESSAGE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<SEGMENT> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   n11=<INTO> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=Identifier()
   (
      (
         n16=";" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14 = new NodeChoice(n15, 0); }
      |
         { n17 = new NodeSequence(3); }
         n19=<NO> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
         n21=<DATA> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n17.addNode(n20); }
         n22=Statement()
         { n17.addNode(n22); }
         { n14 = new NodeChoice(n17, 1); }
      )
      { n13.addNode(n14); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new ReceiveStatement();} 
   { return new ReceiveStatement(n0,n2,n5,n10,n12,n13); }
}

SendStatement SendStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeChoice n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22 = new NodeOptional();
   NodeSequence n23;
   NodeChoice n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeChoice n32;
   NodeSequence n33;
   NodeChoice n34;
   Identifier n35;
   Literal n36;
   NodeOptional n37;
   NodeChoice n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeChoice n43;
   MnemonicName n44;
   NodeToken n45;
   Token n46;

   
}
{
try {
   n1=<SEND> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   (
      { n6 = new NodeSequence(2); }
      n8=<FROM> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Identifier()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      { n11 = new NodeSequence(2); }
      n13=<WITH> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      (
         (
            n15=Identifier()
            { n14 = new NodeChoice(n15, 0); }
         |
            n17=<ESI> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n14 = new NodeChoice(n16, 1); }
         |
            n19=<EMI> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n14 = new NodeChoice(n18, 2); }
         |
            n21=<EGI> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n14 = new NodeChoice(n20, 3); }
         )
         
      )
      { n11.addNode(n14); }
      { n10.addNode(n11); }
   )?
   (
      { n29 = new NodeOptional(); }
      { n37 = new NodeOptional(); }
      { n23 = new NodeSequence(3); }
      (
         (
            n26=<BEFORE> { n25 = JTBToolkit.makeNodeToken(n26); }
            { n24 = new NodeChoice(n25, 0); }
         |
            n28=<AFTER> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n24 = new NodeChoice(n27, 1); }
         )
         
      )
      { n23.addNode(n24); }
      (
         n31=<ADVANCING> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
      )?
      { n23.addNode(n29); }
      (
         (
            (
               { n33 = new NodeSequence(2); }
               (
                  (
                     n35=Identifier()
                     { n34 = new NodeChoice(n35, 0); }
                  |
                     n36=Literal()
                     { n34 = new NodeChoice(n36, 1); }
                  )
                  
               )
               { n33.addNode(n34); }
               (
                  (
                     n40=<LINE> { n39 = JTBToolkit.makeNodeToken(n40); }
                     { n38 = new NodeChoice(n39, 0); }
                  |
                     n42=<LINES> { n41 = JTBToolkit.makeNodeToken(n42); }
                     { n38 = new NodeChoice(n41, 1); }
                  )
                  { n37.addNode(n38); }
               )?
               { n33.addNode(n37); }
               
            )
            { n32 = new NodeChoice(n33, 0); }
         |
            (
               (
                  n44=MnemonicName()
                  { n43 = new NodeChoice(n44, 0); }
               |
                  n46=<PAGE> { n45 = JTBToolkit.makeNodeToken(n46); }
                  { n43 = new NodeChoice(n45, 1); }
               )
               
            )
            { n32 = new NodeChoice(n43, 1); }
         )
         
      )
      { n23.addNode(n32); }
      { n22.addNode(n23); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SendStatement();} 
   { return new SendStatement(n0,n2,n5,n10,n22); }
}

ExecSqlStatement ExecSqlStatement() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Statement n21;
   NodeSequence n22;
   NodeChoice n23;
   SQLStatement n24;
   DeclareCursorStatement n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   SQLSetStatement n40;
   NodeSequence n41;
   NodeToken n42;
   Token n43;
   SkipToEndExec n44;
   NodeSequence n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   SkipToEndExec n50;
   NodeToken n51;
   Token n52;

   
}
{
try {
   (
      (
         n2=<EXEC> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<EXECUTE> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<K_SQL> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      (
         LOOKAHEAD(<K_WHENEVER>)
         { n8 = new NodeSequence(4); }
         n10=<K_WHENEVER> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         (
            (
               { n12 = new NodeSequence(2); }
               n14=<K_NOT> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
               n16=<K_FOUND> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n12.addNode(n15); }
               { n11 = new NodeChoice(n12, 0); }
            |
               n18=<K_SQLERROR> { n17 = JTBToolkit.makeNodeToken(n18); }
               { n11 = new NodeChoice(n17, 1); }
            |
               n20=<K_SQLWARNING> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n11 = new NodeChoice(n19, 2); }
            )
            
         )
         { n8.addNode(n11); }
         n21=Statement()
         { n8.addNode(n21); }
         { n7 = new NodeChoice(n8, 0); }
      |
         (
            { n22 = new NodeSequence(2); }
            (
               (
                  LOOKAHEAD(SQLStatement())
                  n24=SQLStatement()
                  { n23 = new NodeChoice(n24, 0); }
               |
                  LOOKAHEAD(DeclareCursorStatement())
                  n25=DeclareCursorStatement()
                  { n23 = new NodeChoice(n25, 1); }
               |
                  LOOKAHEAD(<K_PREPARE> <S_IDENTIFIER> <K_FROM> <S_BIND>)
                  { n26 = new NodeSequence(5); }
                  n28=<K_PREPARE> { n27 = JTBToolkit.makeNodeToken(n28); }
                  { n26.addNode(n27); }
                  n30=<S_IDENTIFIER> { n29 = JTBToolkit.makeNodeToken(n30); }
                  { n26.addNode(n29); }
                  n32=<K_FROM> { n31 = JTBToolkit.makeNodeToken(n32); }
                  { n26.addNode(n31); }
                  n34=<S_BIND> { n33 = JTBToolkit.makeNodeToken(n34); }
                  { n26.addNode(n33); }
                  { n23 = new NodeChoice(n26, 2); }
               |
                  LOOKAHEAD(<K_ALTER> <K_SESSION> SQLSetStatement())
                  { n35 = new NodeSequence(4); }
                  n37=<K_ALTER> { n36 = JTBToolkit.makeNodeToken(n37); }
                  { n35.addNode(n36); }
                  n39=<K_SESSION> { n38 = JTBToolkit.makeNodeToken(n39); }
                  { n35.addNode(n38); }
                  n40=SQLSetStatement()
                  { n35.addNode(n40); }
                  { n23 = new NodeChoice(n35, 3); }
               |
                  LOOKAHEAD(<K_EXECUTE>)
                  { n41 = new NodeSequence(3); }
                  n43=<K_EXECUTE> { n42 = JTBToolkit.makeNodeToken(n43); }
                  { n41.addNode(n42); }
                  n44=SkipToEndExec()
                  { n41.addNode(n44); }
                  { n23 = new NodeChoice(n41, 4); }
               |
                  LOOKAHEAD(<K_CONNECT> <S_BIND>)
                  { n45 = new NodeSequence(3); }
                  n47=<K_CONNECT> { n46 = JTBToolkit.makeNodeToken(n47); }
                  { n45.addNode(n46); }
                  n49=<S_BIND> { n48 = JTBToolkit.makeNodeToken(n49); }
                  { n45.addNode(n48); }
                  { n23 = new NodeChoice(n45, 5); }
               |
                  n50=SkipToEndExec()
                  { n23 = new NodeChoice(n50, 6); }
               )
               
            )
            { n22.addNode(n23); }
            n52=<END_EXEC> { n51 = JTBToolkit.makeNodeToken(n52); }
            { n22.addNode(n51); }
            
         )
         { n7 = new NodeChoice(n22, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new ExecSqlStatement();} 
   { return new ExecSqlStatement(n0,n5,n7); }
}

DeclareCursorStatement DeclareCursorStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   QueryStatement n11;

   
}
{
try {
   n1=<K_DECLARE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<S_IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<K_CURSOR> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<K_FOR> { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      (
         n10=<S_IDENTIFIER> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8 = new NodeChoice(n9, 0); }
      |
         n11=QueryStatement()
         { n8 = new NodeChoice(n11, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new DeclareCursorStatement();} 
   { return new DeclareCursorStatement(n0,n2,n4,n6,n8); }
}

AcceptStatement AcceptStatement() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   MnemonicName n9;
   EnvironmentName n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeSequence n27;
   NodeOptional n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;

   
}
{
try {
   n1=<ACCEPT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      { n14 = new NodeOptional(); }
      { n20 = new NodeOptional(); }
      { n28 = new NodeOptional(); }
      (
         { n5 = new NodeSequence(2); }
         n7=<FROM> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         (
            (
               n9=MnemonicName()
               { n8 = new NodeChoice(n9, 0); }
            |
               n10=EnvironmentName()
               { n8 = new NodeChoice(n10, 1); }
            |
               { n11 = new NodeSequence(2); }
               n13=<DATE> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n11.addNode(n12); }
               (
                  n16=<COBOL_WORD> { n15 = JTBToolkit.makeNodeToken(n16); }
                  { n14.addNode(n15); }
               )?
               { n11.addNode(n14); }
               { n8 = new NodeChoice(n11, 2); }
            |
               { n17 = new NodeSequence(2); }
               n19=<DAY> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n17.addNode(n18); }
               (
                  n22=<COBOL_WORD> { n21 = JTBToolkit.makeNodeToken(n22); }
                  { n20.addNode(n21); }
               )?
               { n17.addNode(n20); }
               { n8 = new NodeChoice(n17, 3); }
            |
               n24=<DAY_OF_WEEK> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n8 = new NodeChoice(n23, 4); }
            |
               n26=<TIME> { n25 = JTBToolkit.makeNodeToken(n26); }
               { n8 = new NodeChoice(n25, 5); }
            )
            
         )
         { n5.addNode(n8); }
         { n4 = new NodeChoice(n5, 0); }
      |
         { n27 = new NodeSequence(2); }
         (
            n30=<MESSAGE> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28.addNode(n29); }
         )?
         { n27.addNode(n28); }
         n32=<COUNT> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n27.addNode(n31); }
         { n4 = new NodeChoice(n27, 1); }
      )
      { n3.addNode(n4); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new AcceptStatement();} 
   { return new AcceptStatement(n0,n2,n3); }
}

AddStatement AddStatement() :
{
   NodeToken n0;
   Token n1;
   AddBody n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   StatementList n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   StatementList n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;

   
}
{
try {
   n1=<ADD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AddBody()
   (
      LOOKAHEAD([ <ON> ] <SIZE> <ERROR>)
      { n5 = new NodeOptional(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<ON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      n9=<SIZE> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n4.addNode(n8); }
      n11=<ERROR> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n4.addNode(n10); }
      n12=StatementList()
      { n4.addNode(n12); }
      { n3.addNode(n4); }
   )?
   (
      LOOKAHEAD(<NOT> [ <ON> ] <SIZE> <ERROR>)
      { n17 = new NodeOptional(); }
      { n14 = new NodeSequence(5); }
      n16=<NOT> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      (
         n19=<ON> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
      )?
      { n14.addNode(n17); }
      n21=<SIZE> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n14.addNode(n20); }
      n23=<ERROR> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n14.addNode(n22); }
      n24=StatementList()
      { n14.addNode(n24); }
      { n13.addNode(n14); }
   )?
   (
      n27=<END_ADD> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new AddStatement();} 
   { return new AddStatement(n0,n2,n3,n13,n25); }
}

AddBody AddBody() :
{
   NodeChoice n0;
   NodeSequence n1;
   IdOrLiteralList n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   IdOrLiteral n7;
   NodeToken n8;
   Token n9;
   ArithIdentifierList n10;
   NodeSequence n11;
   IdOrLiteralList n12;
   NodeToken n13;
   Token n14;
   ArithIdentifierList n15;
   NodeSequence n16;
   NodeChoice n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   Identifier n22;
   NodeToken n23;
   Token n24;
   Identifier n25;
   NodeOptional n26 = new NodeOptional();
   NodeToken n27;
   Token n28;

   
}
{
try {
   (
      LOOKAHEAD(IdOrLiteralList() [ <TO> IdOrLiteral() ] <GIVING>)
      { n1 = new NodeSequence(5); }
      n2=IdOrLiteralList()
      { n1.addNode(n2); }
      (
         { n4 = new NodeSequence(2); }
         n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=IdOrLiteral()
         { n4.addNode(n7); }
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      n9=<GIVING> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n1.addNode(n8); }
      n10=ArithIdentifierList()
      { n1.addNode(n10); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(IdOrLiteralList() <TO> ArithIdentifierList())
      { n11 = new NodeSequence(4); }
      n12=IdOrLiteralList()
      { n11.addNode(n12); }
      n14=<TO> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n11.addNode(n13); }
      n15=ArithIdentifierList()
      { n11.addNode(n15); }
      { n0 = new NodeChoice(n11, 1); }
   |
      { n16 = new NodeSequence(5); }
      (
         (
            n19=<CORRESPONDING> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17 = new NodeChoice(n18, 0); }
         |
            n21=<CORR> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n17 = new NodeChoice(n20, 1); }
         )
         
      )
      { n16.addNode(n17); }
      n22=Identifier()
      { n16.addNode(n22); }
      n24=<TO> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n16.addNode(n23); }
      n25=Identifier()
      { n16.addNode(n25); }
      (
         n28=<ROUNDED> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26.addNode(n27); }
      )?
      { n16.addNode(n26); }
      { n0 = new NodeChoice(n16, 2); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new AddBody();} 
   { return new AddBody(n0); }
}

ArithIdentifier ArithIdentifier() :
{
   Identifier n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;

   
}
{
try {
   n0=Identifier()
   (
      n3=<ROUNDED> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new ArithIdentifier();} 
   { return new ArithIdentifier(n0,n1); }
}

ArithIdentifierList ArithIdentifierList() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   ArithIdentifier n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;

   
}
{
try {
   (
      { n3 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n2=ArithIdentifier()
      { n1.addNode(n2); }
      (
         n5=<COMMACHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ArithIdentifierList();} 
   { return new ArithIdentifierList(n0); }
}

IdOrLiteral IdOrLiteral() :
{
   NodeChoice n0;
   Identifier n1;
   Literal n2;

   
}
{
try {
   (
      n1=Identifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Literal()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new IdOrLiteral();} 
   { return new IdOrLiteral(n0); }
}

IdOrLiteralList IdOrLiteralList() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   IdOrLiteral n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;

   
}
{
try {
   (
      { n3 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      n2=IdOrLiteral()
      { n1.addNode(n2); }
      (
         n5=<COMMACHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new IdOrLiteralList();} 
   { return new IdOrLiteralList(n0); }
}

AlteredGoto AlteredGoto() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
try {
   n1=<GO> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TO> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<DOT> { n5 = JTBToolkit.makeNodeToken(n6); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new AlteredGoto();} 
   { return new AlteredGoto(n0,n2,n5); }
}

AlterStatement AlterStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   ProcedureName n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   ProcedureName n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;

   
}
{
try {
   n1=<ALTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeOptional(); }
      { n14 = new NodeOptional(); }
      { n3 = new NodeSequence(5); }
      n4=ProcedureName()
      { n3.addNode(n4); }
      n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3.addNode(n5); }
      (
         { n8 = new NodeSequence(2); }
         n10=<PROCEED> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n12=<TO> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8.addNode(n11); }
         { n7.addNode(n8); }
      )?
      { n3.addNode(n7); }
      n13=ProcedureName()
      { n3.addNode(n13); }
      (
         n16=<COMMACHAR> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
      )?
      { n3.addNode(n14); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new AlterStatement();} 
   { return new AlterStatement(n0,n2); }
}

CallStatement CallStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeList n9;
   NodeChoice n10;
   NodeSequence n11;
   NodeOptional n12;
   NodeSequence n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeList n19;
   NodeSequence n20;
   CallByReferenceArgs n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeSequence n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeChoice n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeList n34;
   NodeSequence n35;
   CallByContentArgs n36;
   NodeOptional n37;
   NodeToken n38;
   Token n39;
   NodeOptional n40 = new NodeOptional();
   NodeSequence n41;
   NodeOptional n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   StatementList n47;
   NodeOptional n48 = new NodeOptional();
   NodeSequence n49;
   NodeOptional n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   StatementList n55;
   NodeOptional n56 = new NodeOptional();
   NodeSequence n57;
   NodeToken n58;
   Token n59;
   NodeOptional n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   StatementList n65;
   NodeOptional n66 = new NodeOptional();
   NodeToken n67;
   Token n68;

   
}
{
try {
   n1=<CALL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   (
      { n9 = new NodeList(); }
      { n6 = new NodeSequence(2); }
      n8=<USING> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      (
         { n12 = new NodeOptional(); }
         { n19 = new NodeList(); }
         { n26 = new NodeOptional(); }
         { n34 = new NodeList(); }
         (
            (
               { n11 = new NodeSequence(2); }
               (
                  { n14 = new NodeOptional(); }
                  { n13 = new NodeSequence(2); }
                  (
                     n16=<BY> { n15 = JTBToolkit.makeNodeToken(n16); }
                     { n14.addNode(n15); }
                  )?
                  { n13.addNode(n14); }
                  n18=<REFERENCE> { n17 = JTBToolkit.makeNodeToken(n18); }
                  { n13.addNode(n17); }
                  { n12.addNode(n13); }
               )?
               { n11.addNode(n12); }
               (
                  { n22 = new NodeOptional(); }
                  { n20 = new NodeSequence(2); }
                  n21=CallByReferenceArgs()
                  { n20.addNode(n21); }
                  (
                     n24=<COMMACHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
                     { n22.addNode(n23); }
                  )?
                  { n20.addNode(n22); }
                  { n19.addNode(n20); }
               )+
               { n19.nodes.trimToSize(); }
               { n11.addNode(n19); }
               { n10 = new NodeChoice(n11, 0); }
            |
               { n25 = new NodeSequence(3); }
               (
                  n28=<BY> { n27 = JTBToolkit.makeNodeToken(n28); }
                  { n26.addNode(n27); }
               )?
               { n25.addNode(n26); }
               (
                  (
                     n31=<CONTENT> { n30 = JTBToolkit.makeNodeToken(n31); }
                     { n29 = new NodeChoice(n30, 0); }
                  |
                     n33=<VALUE> { n32 = JTBToolkit.makeNodeToken(n33); }
                     { n29 = new NodeChoice(n32, 1); }
                  )
                  
               )
               { n25.addNode(n29); }
               (
                  { n37 = new NodeOptional(); }
                  { n35 = new NodeSequence(2); }
                  n36=CallByContentArgs()
                  { n35.addNode(n36); }
                  (
                     n39=<COMMACHAR> { n38 = JTBToolkit.makeNodeToken(n39); }
                     { n37.addNode(n38); }
                  )?
                  { n35.addNode(n37); }
                  { n34.addNode(n35); }
               )+
               { n34.nodes.trimToSize(); }
               { n25.addNode(n34); }
               { n10 = new NodeChoice(n25, 1); }
            )
            
         )
         { n9.addNode(n10); }
      )+
      { n9.nodes.trimToSize(); }
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      LOOKAHEAD([ <ON> ] <OVERFLOW>)
      { n42 = new NodeOptional(); }
      { n41 = new NodeSequence(3); }
      (
         n44=<ON> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
      )?
      { n41.addNode(n42); }
      n46=<OVERFLOW> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n41.addNode(n45); }
      n47=StatementList()
      { n41.addNode(n47); }
      { n40.addNode(n41); }
   )?
   (
      LOOKAHEAD([ <ON> ] <EXCEPTION>)
      { n50 = new NodeOptional(); }
      { n49 = new NodeSequence(3); }
      (
         n52=<ON> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n50.addNode(n51); }
      )?
      { n49.addNode(n50); }
      n54=<EXCEPTION> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n49.addNode(n53); }
      n55=StatementList()
      { n49.addNode(n55); }
      { n48.addNode(n49); }
   )?
   (
      LOOKAHEAD(<NOT> [ <ON> ] <EXCEPTION>)
      { n60 = new NodeOptional(); }
      { n57 = new NodeSequence(4); }
      n59=<NOT> { n58 = JTBToolkit.makeNodeToken(n59); }
      { n57.addNode(n58); }
      (
         n62=<ON> { n61 = JTBToolkit.makeNodeToken(n62); }
         { n60.addNode(n61); }
      )?
      { n57.addNode(n60); }
      n64=<EXCEPTION> { n63 = JTBToolkit.makeNodeToken(n64); }
      { n57.addNode(n63); }
      n65=StatementList()
      { n57.addNode(n65); }
      { n56.addNode(n57); }
   )?
   (
      n68=<END_CALL> { n67 = JTBToolkit.makeNodeToken(n68); }
      { n66.addNode(n67); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new CallStatement();} 
   { return new CallStatement(n0,n2,n5,n40,n48,n56,n66); }
}

CallByReferenceArgs CallByReferenceArgs() :
{
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   FileName n8;

   
}
{
try {
   (
      n1=Identifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n4=<ADDRESS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n6=<OF> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2.addNode(n5); }
      n7=Identifier()
      { n2.addNode(n7); }
      { n0 = new NodeChoice(n2, 1); }
   |
      n8=FileName()
      { n0 = new NodeChoice(n8, 2); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new CallByReferenceArgs();} 
   { return new CallByReferenceArgs(n0); }
}

CallByContentArgs CallByContentArgs() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Identifier n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   Literal n15;

   
}
{
try {
   (
      { n1 = new NodeSequence(2); }
      (
         { n3 = new NodeSequence(2); }
         n5=<LENGTH> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n7=<OF> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         { n2.addNode(n3); }
      )?
      { n1.addNode(n2); }
      n8=Identifier()
      { n1.addNode(n8); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n9 = new NodeSequence(3); }
      n11=<ADDRESS> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13=<OF> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      n14=Identifier()
      { n9.addNode(n14); }
      { n0 = new NodeChoice(n9, 1); }
   |
      n15=Literal()
      { n0 = new NodeChoice(n15, 2); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new CallByContentArgs();} 
   { return new CallByContentArgs(n0); }
}

CancelStatement CancelStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeChoice n4;
   Identifier n5;
   Literal n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;

   
}
{
try {
   n1=<CANCEL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         (
            n5=Identifier()
            { n4 = new NodeChoice(n5, 0); }
         |
            n6=Literal()
            { n4 = new NodeChoice(n6, 1); }
         )
         
      )
      { n3.addNode(n4); }
      (
         n9=<COMMACHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CancelStatement();} 
   { return new CancelStatement(n0,n2); }
}

CloseStatement CloseStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   FileName n4;
   NodeOptional n5;
   NodeChoice n6;
   NodeSequence n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeChoice n14;
   NodeSequence n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeSequence n29;
   NodeOptional n30;
   NodeToken n31;
   Token n32;
   NodeChoice n33;
   NodeSequence n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeOptional n41;
   NodeToken n42;
   Token n43;

   
}
{
try {
   n1=<CLOSE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n41 = new NodeOptional(); }
      { n3 = new NodeSequence(3); }
      n4=FileName()
      { n3.addNode(n4); }
      (
         { n13 = new NodeOptional(); }
         { n30 = new NodeOptional(); }
         (
            (
               { n7 = new NodeSequence(2); }
               (
                  (
                     n10=<REEL> { n9 = JTBToolkit.makeNodeToken(n10); }
                     { n8 = new NodeChoice(n9, 0); }
                  |
                     n12=<UNIT> { n11 = JTBToolkit.makeNodeToken(n12); }
                     { n8 = new NodeChoice(n11, 1); }
                  )
                  
               )
               { n7.addNode(n8); }
               (
                  { n16 = new NodeOptional(); }
                  { n22 = new NodeOptional(); }
                  (
                     (
                        { n15 = new NodeSequence(2); }
                        (
                           n18=<FOR> { n17 = JTBToolkit.makeNodeToken(n18); }
                           { n16.addNode(n17); }
                        )?
                        { n15.addNode(n16); }
                        n20=<REMOVAL> { n19 = JTBToolkit.makeNodeToken(n20); }
                        { n15.addNode(n19); }
                        { n14 = new NodeChoice(n15, 0); }
                     |
                        { n21 = new NodeSequence(3); }
                        (
                           n24=<WITH> { n23 = JTBToolkit.makeNodeToken(n24); }
                           { n22.addNode(n23); }
                        )?
                        { n21.addNode(n22); }
                        n26=<NO> { n25 = JTBToolkit.makeNodeToken(n26); }
                        { n21.addNode(n25); }
                        n28=<REWIND> { n27 = JTBToolkit.makeNodeToken(n28); }
                        { n21.addNode(n27); }
                        { n14 = new NodeChoice(n21, 1); }
                     )
                     
                  )
                  { n13.addNode(n14); }
               )?
               { n7.addNode(n13); }
               { n6 = new NodeChoice(n7, 0); }
            |
               { n29 = new NodeSequence(2); }
               (
                  n32=<WITH> { n31 = JTBToolkit.makeNodeToken(n32); }
                  { n30.addNode(n31); }
               )?
               { n29.addNode(n30); }
               (
                  (
                     { n34 = new NodeSequence(2); }
                     n36=<NO> { n35 = JTBToolkit.makeNodeToken(n36); }
                     { n34.addNode(n35); }
                     n38=<REWIND> { n37 = JTBToolkit.makeNodeToken(n38); }
                     { n34.addNode(n37); }
                     { n33 = new NodeChoice(n34, 0); }
                  |
                     n40=<LOCK> { n39 = JTBToolkit.makeNodeToken(n40); }
                     { n33 = new NodeChoice(n39, 1); }
                  )
                  
               )
               { n29.addNode(n33); }
               { n6 = new NodeChoice(n29, 1); }
            )
            
         )
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      (
         n43=<COMMACHAR> { n42 = JTBToolkit.makeNodeToken(n43); }
         { n41.addNode(n42); }
      )?
      { n3.addNode(n41); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new CloseStatement();} 
   { return new CloseStatement(n0,n2); }
}

ComputeStatement ComputeStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   ArithmeticExpression n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeOptional n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   StatementList n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   StatementList n35;
   NodeOptional n36 = new NodeOptional();
   NodeToken n37;
   Token n38;

   
}
{
try {
   n1=<COMPUTE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=Identifier()
      { n3.addNode(n4); }
      (
         n7=<ROUNDED> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      (
         n10=<EQUALCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8 = new NodeChoice(n9, 0); }
      |
         n12=<EQUAL> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8 = new NodeChoice(n11, 1); }
      )
      
   )
   n13=ArithmeticExpression()
   (
      LOOKAHEAD([ <ON> ] <SIZE> <ERROR>)
      { n16 = new NodeOptional(); }
      { n15 = new NodeSequence(4); }
      (
         n18=<ON> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n16.addNode(n17); }
      )?
      { n15.addNode(n16); }
      n20=<SIZE> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n15.addNode(n19); }
      n22=<ERROR> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n15.addNode(n21); }
      n23=StatementList()
      { n15.addNode(n23); }
      { n14.addNode(n15); }
   )?
   (
      LOOKAHEAD(<NOT> [ <ON> ] <SIZE> <ERROR>)
      { n28 = new NodeOptional(); }
      { n25 = new NodeSequence(5); }
      n27=<NOT> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      (
         n30=<ON> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n28.addNode(n29); }
      )?
      { n25.addNode(n28); }
      n32=<SIZE> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n25.addNode(n31); }
      n34=<ERROR> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n25.addNode(n33); }
      n35=StatementList()
      { n25.addNode(n35); }
      { n24.addNode(n25); }
   )?
   (
      n38=<END_COMPUTE> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n36.addNode(n37); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new ComputeStatement();} 
   { return new ComputeStatement(n0,n2,n8,n13,n14,n24,n36); }
}

ContinueStatement ContinueStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<CONTINUE> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ContinueStatement();} 
   { return new ContinueStatement(n0); }
}

DeleteStatement DeleteStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   StatementList n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   StatementList n23;
   NodeOptional n24 = new NodeOptional();
   NodeToken n25;
   Token n26;

   
}
{
try {
   n1=<DELETE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      { n10 = new NodeOptional(); }
      { n7 = new NodeSequence(3); }
      n9=<INVALID> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      (
         n12=<KEY> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
      )?
      { n7.addNode(n10); }
      n13=StatementList()
      { n7.addNode(n13); }
      { n6.addNode(n7); }
   )?
   (
      { n20 = new NodeOptional(); }
      { n15 = new NodeSequence(4); }
      n17=<NOT> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      n19=<INVALID> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n15.addNode(n18); }
      (
         n22=<KEY> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
      )?
      { n15.addNode(n20); }
      n23=StatementList()
      { n15.addNode(n23); }
      { n14.addNode(n15); }
   )?
   (
      n26=<END_DELETE> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24.addNode(n25); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DeleteStatement();} 
   { return new DeleteStatement(n0,n2,n3,n6,n14,n24); }
}

DisplayStatement DisplayStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeChoice n4;
   Identifier n5;
   Literal n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeChoice n14;
   MnemonicName n15;
   EnvironmentName n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;

   
}
{
try {
   n1=<DISPLAY> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         (
            n5=Identifier()
            { n4 = new NodeChoice(n5, 0); }
         |
            n6=Literal()
            { n4 = new NodeChoice(n6, 1); }
         )
         
      )
      { n3.addNode(n4); }
      (
         n9=<COMMACHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      { n11 = new NodeSequence(2); }
      n13=<UPON> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      (
         (
            n15=MnemonicName()
            { n14 = new NodeChoice(n15, 0); }
         |
            n16=EnvironmentName()
            { n14 = new NodeChoice(n16, 1); }
         )
         
      )
      { n11.addNode(n14); }
      { n10.addNode(n11); }
   )?
   (
      { n19 = new NodeOptional(); }
      { n18 = new NodeSequence(3); }
      (
         n21=<WITH> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n19.addNode(n20); }
      )?
      { n18.addNode(n19); }
      n23=<NO> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n18.addNode(n22); }
      n25=<ADVANCING> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n18.addNode(n24); }
      { n17.addNode(n18); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DisplayStatement();} 
   { return new DisplayStatement(n0,n2,n10,n17); }
}

DivideStatement DivideStatement() :
{
   NodeToken n0;
   Token n1;
   DivideBody n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   StatementList n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   StatementList n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;

   
}
{
try {
   n1=<DIVIDE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=DivideBody()
   (
      LOOKAHEAD([ <ON> ] <SIZE> <ERROR>)
      { n5 = new NodeOptional(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<ON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      n9=<SIZE> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n4.addNode(n8); }
      n11=<ERROR> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n4.addNode(n10); }
      n12=StatementList()
      { n4.addNode(n12); }
      { n3.addNode(n4); }
   )?
   (
      LOOKAHEAD(<NOT> [ <ON> ] <SIZE> <ERROR>)
      { n17 = new NodeOptional(); }
      { n14 = new NodeSequence(5); }
      n16=<NOT> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      (
         n19=<ON> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
      )?
      { n14.addNode(n17); }
      n21=<SIZE> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n14.addNode(n20); }
      n23=<ERROR> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n14.addNode(n22); }
      n24=StatementList()
      { n14.addNode(n24); }
      { n13.addNode(n14); }
   )?
   (
      n27=<END_DIVIDE> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new DivideStatement();} 
   { return new DivideStatement(n0,n2,n3,n13,n25); }
}

DivideBody DivideBody() :
{
   NodeChoice n0;
   NodeSequence n1;
   IdOrLiteral n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   IdOrLiteral n6;
   ArithIdentifierList n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   ArithIdentifierList n12;
   NodeOptional n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ArithIdentifier n17;
   NodeSequence n18;
   IdOrLiteral n19;
   NodeToken n20;
   Token n21;
   IdOrLiteral n22;
   NodeToken n23;
   Token n24;
   ArithIdentifierList n25;
   NodeOptional n26 = new NodeOptional();
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   ArithIdentifier n30;

   
}
{
try {
   (
      (
         LOOKAHEAD(IdOrLiteral() <INTO>)
         { n1 = new NodeSequence(5); }
         n2=IdOrLiteral()
         { n1.addNode(n2); }
         n4=<INTO> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n1.addNode(n3); }
         (
            (
               LOOKAHEAD(IdOrLiteral() <GIVING>)
               n6=IdOrLiteral()
               { n5 = new NodeChoice(n6, 0); }
            |
               n7=ArithIdentifierList()
               { n5 = new NodeChoice(n7, 1); }
            )
            
         )
         { n1.addNode(n5); }
         (
            { n13 = new NodeOptional(); }
            { n9 = new NodeSequence(3); }
            n11=<GIVING> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
            n12=ArithIdentifierList()
            { n9.addNode(n12); }
            (
               { n14 = new NodeSequence(2); }
               n16=<REMAINDER> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14.addNode(n15); }
               n17=ArithIdentifier()
               { n14.addNode(n17); }
               { n13.addNode(n14); }
            )?
            { n9.addNode(n13); }
            { n8.addNode(n9); }
         )?
         { n1.addNode(n8); }
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(IdOrLiteral() <BY>)
         { n18 = new NodeSequence(7); }
         n19=IdOrLiteral()
         { n18.addNode(n19); }
         n21=<BY> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n18.addNode(n20); }
         n22=IdOrLiteral()
         { n18.addNode(n22); }
         n24=<GIVING> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n18.addNode(n23); }
         n25=ArithIdentifierList()
         { n18.addNode(n25); }
         (
            { n27 = new NodeSequence(2); }
            n29=<REMAINDER> { n28 = JTBToolkit.makeNodeToken(n29); }
            { n27.addNode(n28); }
            n30=ArithIdentifier()
            { n27.addNode(n30); }
            { n26.addNode(n27); }
         )?
         { n18.addNode(n26); }
         { n0 = new NodeChoice(n18, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new DivideBody();} 
   { return new DivideBody(n0); }
}

EntryStatement EntryStatement() :
{
   NodeToken n0;
   Token n1;
   Literal n2;
   NodeOptional n3 = new NodeOptional();
   UsingArgs n4;

   
}
{
try {
   n1=<ENTRY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Literal()
   (
      LOOKAHEAD(<USING>)
      n4=UsingArgs()
      { n3.addNode(n4); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new EntryStatement();} 
   { return new EntryStatement(n0,n2,n3); }
}

EvaluateStatement EvaluateStatement() :
{
   NodeToken n0;
   Token n1;
   EvaluateValue n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   EvaluateValue n7;
   NodeList n8 = new NodeList();
   NodeSequence n9;
   NodeList n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   EvaluatePhrase n17;
   NodeListOptional n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   EvaluatePhrase n22;
   StatementList n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   StatementList n30;
   NodeOptional n31 = new NodeOptional();
   NodeToken n32;
   Token n33;

   
}
{
try {
   n1=<EVALUATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=EvaluateValue()
   (
      { n4 = new NodeSequence(2); }
      n6=<ALSO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=EvaluateValue()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   (
      { n10 = new NodeList(); }
      { n9 = new NodeSequence(2); }
      (
         { n14 = new NodeOptional(); }
         { n18 = new NodeListOptional(); }
         { n11 = new NodeSequence(4); }
         n13=<WHEN> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         (
            n16=<EQUALCHAR> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
         )?
         { n11.addNode(n14); }
         n17=EvaluatePhrase()
         { n11.addNode(n17); }
         (
            { n19 = new NodeSequence(2); }
            n21=<ALSO> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
            n22=EvaluatePhrase()
            { n19.addNode(n22); }
            { n18.addNode(n19); }
         )*
         { n18.nodes.trimToSize(); }
         { n11.addNode(n18); }
         { n10.addNode(n11); }
      )+
      { n10.nodes.trimToSize(); }
      { n9.addNode(n10); }
      n23=StatementList()
      { n9.addNode(n23); }
      { n8.addNode(n9); }
   )+
   { n8.nodes.trimToSize(); }
   (
      { n25 = new NodeSequence(3); }
      n27=<WHEN> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      n29=<OTHER> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n25.addNode(n28); }
      n30=StatementList()
      { n25.addNode(n30); }
      { n24.addNode(n25); }
   )?
   (
      n33=<END_EVALUATE> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new EvaluateStatement();} 
   { return new EvaluateStatement(n0,n2,n3,n8,n24,n31); }
}

EvaluateValue EvaluateValue() :
{
   NodeChoice n0;
   Identifier n1;
   Condition n2;
   ArithmeticExpression n3;
   Literal n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
try {
   (
      (
         n1=Identifier()
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(Condition())
         n2=Condition()
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(ArithmeticExpression())
         n3=ArithmeticExpression()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=Literal()
         { n0 = new NodeChoice(n4, 3); }
      |
         n6=<TRUE> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 4); }
      |
         n8=<FALSE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 5); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new EvaluateValue();} 
   { return new EvaluateValue(n0); }
}

EvaluatePhrase EvaluatePhrase() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   Identifier n8;
   Literal n9;
   ArithmeticExpression n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   Identifier n19;
   Literal n20;
   ArithmeticExpression n21;
   Condition n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
try {
   (
      (
         n2=<ANY> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(3); }
         (
            n6=<NOT> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         (
            (
               LOOKAHEAD(Identifier(), { notFollowedByRelOp() })
               n8=Identifier()
               { n7 = new NodeChoice(n8, 0); }
            |
               LOOKAHEAD(Literal(), { notFollowedByRelOp() })
               n9=Literal()
               { n7 = new NodeChoice(n9, 1); }
            |
               LOOKAHEAD(ArithmeticExpression(), { notFollowedByRelOp() })
               n10=ArithmeticExpression()
               { n7 = new NodeChoice(n10, 2); }
            )
            
         )
         { n3.addNode(n7); }
         (
            { n12 = new NodeSequence(2); }
            (
               (
                  n15=<THROUGH> { n14 = JTBToolkit.makeNodeToken(n15); }
                  { n13 = new NodeChoice(n14, 0); }
               |
                  n17=<THRU> { n16 = JTBToolkit.makeNodeToken(n17); }
                  { n13 = new NodeChoice(n16, 1); }
               )
               
            )
            { n12.addNode(n13); }
            (
               (
                  LOOKAHEAD(Identifier(), { notFollowedByRelOp() })
                  n19=Identifier()
                  { n18 = new NodeChoice(n19, 0); }
               |
                  LOOKAHEAD(Literal(), { notFollowedByRelOp() })
                  n20=Literal()
                  { n18 = new NodeChoice(n20, 1); }
               |
                  n21=ArithmeticExpression()
                  { n18 = new NodeChoice(n21, 2); }
               )
               
            )
            { n12.addNode(n18); }
            { n11.addNode(n12); }
         )?
         { n3.addNode(n11); }
         { n0 = new NodeChoice(n3, 1); }
      |
         LOOKAHEAD(Condition())
         n22=Condition()
         { n0 = new NodeChoice(n22, 2); }
      |
         n24=<TRUE> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n0 = new NodeChoice(n23, 3); }
      |
         n26=<FALSE> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n0 = new NodeChoice(n25, 4); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new EvaluatePhrase();} 
   { return new EvaluatePhrase(n0); }
}

ExitStatement ExitStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<EXIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ExitStatement();} 
   { return new ExitStatement(n0); }
}

ExitProgramStatement ExitProgramStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
try {
   n1=<EXIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PROGRAM> { n2 = JTBToolkit.makeNodeToken(n3); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ExitProgramStatement();} 
   { return new ExitProgramStatement(n0,n2); }
}

GobackStatement GobackStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<GOBACK> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new GobackStatement();} 
   { return new GobackStatement(n0); }
}

GotoStatement GotoStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   ProcedureName n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeListOptional n10;
   ProcedureName n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   Identifier n17;
   NodeToken n18;
   Token n19;

   
}
{
try {
   n1=<GO> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TO> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      (
         { n6 = new NodeSequence(2); }
         n7=ProcedureName()
         { n6.addNode(n7); }
         (
            LOOKAHEAD(( ProcedureName() )* <DEPENDING>)
            { n10 = new NodeListOptional(); }
            { n14 = new NodeOptional(); }
            { n9 = new NodeSequence(4); }
            (
               n11=ProcedureName()
               { n10.addNode(n11); }
            )*
            { n10.nodes.trimToSize(); }
            { n9.addNode(n10); }
            n13=<DEPENDING> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n9.addNode(n12); }
            (
               n16=<ON> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14.addNode(n15); }
            )?
            { n9.addNode(n14); }
            n17=Identifier()
            { n9.addNode(n17); }
            { n8.addNode(n9); }
         )?
         { n6.addNode(n8); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n19=<MORE_LABELS> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n5 = new NodeChoice(n18, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new GotoStatement();} 
   { return new GotoStatement(n0,n2,n5); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   Condition n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeSequence n7;
   StatementList n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20 = new NodeOptional();
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeChoice n24;
   NodeSequence n25;
   StatementList n26;
   NodeOptional n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38 = new NodeOptional();
   NodeToken n39;
   Token n40;

   
}
{
try {
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Condition()
   (
      n5=<THEN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      (
         { n7 = new NodeSequence(2); }
         n8=StatementList()
         { n7.addNode(n8); }
         (
            { n10 = new NodeSequence(2); }
            n12=<NEXT> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
            n14=<SENTENCE> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n10.addNode(n13); }
            { n9.addNode(n10); }
         )?
         { n7.addNode(n9); }
         { n6 = new NodeChoice(n7, 0); }
      |
         { n15 = new NodeSequence(2); }
         n17=<NEXT> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
         n19=<SENTENCE> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n15.addNode(n18); }
         { n6 = new NodeChoice(n15, 1); }
      )
      
   )
   (
      LOOKAHEAD(1)
      { n27 = new NodeOptional(); }
      { n21 = new NodeSequence(2); }
      n23=<ELSE> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n21.addNode(n22); }
      (
         (
            { n25 = new NodeSequence(2); }
            n26=StatementList()
            { n25.addNode(n26); }
            (
               { n28 = new NodeSequence(2); }
               n30=<NEXT> { n29 = JTBToolkit.makeNodeToken(n30); }
               { n28.addNode(n29); }
               n32=<SENTENCE> { n31 = JTBToolkit.makeNodeToken(n32); }
               { n28.addNode(n31); }
               { n27.addNode(n28); }
            )?
            { n25.addNode(n27); }
            { n24 = new NodeChoice(n25, 0); }
         |
            { n33 = new NodeSequence(2); }
            n35=<NEXT> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n33.addNode(n34); }
            n37=<SENTENCE> { n36 = JTBToolkit.makeNodeToken(n37); }
            { n33.addNode(n36); }
            { n24 = new NodeChoice(n33, 1); }
         )
         
      )
      { n21.addNode(n24); }
      { n20.addNode(n21); }
   )?
   (
      n40=<END_IF> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n38.addNode(n39); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new IfStatement();} 
   { return new IfStatement(n0,n2,n3,n6,n20,n38); }
}

InitializeStatement InitializeStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeList n12;
   NodeSequence n13;
   NodeChoice n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeChoice n34;
   Identifier n35;
   NodeSequence n36;
   Literal n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;

   
}
{
try {
   n1=<INITIALIZE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=Identifier()
      { n3.addNode(n4); }
      (
         n7=<COMMACHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      { n12 = new NodeList(); }
      { n9 = new NodeSequence(2); }
      n11=<REPLACING> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         { n29 = new NodeOptional(); }
         { n38 = new NodeOptional(); }
         { n13 = new NodeSequence(4); }
         (
            (
               n16=<ALPHABETIC> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14 = new NodeChoice(n15, 0); }
            |
               n18=<ALPHANUMERIC> { n17 = JTBToolkit.makeNodeToken(n18); }
               { n14 = new NodeChoice(n17, 1); }
            |
               n20=<NUMERIC> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n14 = new NodeChoice(n19, 2); }
            |
               n22=<ALPHANUMERIC_EDITED> { n21 = JTBToolkit.makeNodeToken(n22); }
               { n14 = new NodeChoice(n21, 3); }
            |
               n24=<NUMERIC_EDITED> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n14 = new NodeChoice(n23, 4); }
            |
               n26=<DBCS> { n25 = JTBToolkit.makeNodeToken(n26); }
               { n14 = new NodeChoice(n25, 5); }
            |
               n28=<EGCS> { n27 = JTBToolkit.makeNodeToken(n28); }
               { n14 = new NodeChoice(n27, 6); }
            )
            
         )
         { n13.addNode(n14); }
         (
            n31=<DATA> { n30 = JTBToolkit.makeNodeToken(n31); }
            { n29.addNode(n30); }
         )?
         { n13.addNode(n29); }
         n33=<BY> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n13.addNode(n32); }
         (
            (
               n35=Identifier()
               { n34 = new NodeChoice(n35, 0); }
            |
               { n36 = new NodeSequence(2); }
               n37=Literal()
               { n36.addNode(n37); }
               (
                  n40=<COMMACHAR> { n39 = JTBToolkit.makeNodeToken(n40); }
                  { n38.addNode(n39); }
               )?
               { n36.addNode(n38); }
               { n34 = new NodeChoice(n36, 1); }
            )
            
         )
         { n13.addNode(n34); }
         { n12.addNode(n13); }
      )+
      { n12.nodes.trimToSize(); }
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new InitializeStatement();} 
   { return new InitializeStatement(n0,n2,n8); }
}

InspectStatement InspectStatement() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeChoice n3;
   TallyingPhrase n4;
   ConvertingPhrase n5;
   ReplacingPhrase n6;

   
}
{
try {
   n1=<INSPECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      (
         n4=TallyingPhrase()
         { n3 = new NodeChoice(n4, 0); }
      |
         n5=ConvertingPhrase()
         { n3 = new NodeChoice(n5, 1); }
      |
         n6=ReplacingPhrase()
         { n3 = new NodeChoice(n6, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new InspectStatement();} 
   { return new InspectStatement(n0,n2,n3); }
}

TallyingPhrase TallyingPhrase() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeList n7;
   NodeChoice n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12;
   BeforeAfterPhrase n13;
   NodeSequence n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeList n20;
   NodeSequence n21;
   NodeChoice n22;
   Identifier n23;
   Literal n24;
   NodeListOptional n25;
   BeforeAfterPhrase n26;
   NodeOptional n27 = new NodeOptional();
   ReplacingPhrase n28;

   
}
{
try {
   n1=<TALLYING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeList(); }
      { n3 = new NodeSequence(3); }
      n4=Identifier()
      { n3.addNode(n4); }
      n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n3.addNode(n5); }
      (
         { n12 = new NodeListOptional(); }
         { n20 = new NodeList(); }
         (
            { n9 = new NodeSequence(2); }
            n11=<CHARACTERS> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
            (
               n13=BeforeAfterPhrase()
               { n12.addNode(n13); }
            )*
            { n12.nodes.trimToSize(); }
            { n9.addNode(n12); }
            { n8 = new NodeChoice(n9, 0); }
         |
            { n14 = new NodeSequence(2); }
            (
               (
                  n17=<ALL> { n16 = JTBToolkit.makeNodeToken(n17); }
                  { n15 = new NodeChoice(n16, 0); }
               |
                  n19=<LEADING> { n18 = JTBToolkit.makeNodeToken(n19); }
                  { n15 = new NodeChoice(n18, 1); }
               )
               
            )
            { n14.addNode(n15); }
            (
               { n25 = new NodeListOptional(); }
               { n21 = new NodeSequence(2); }
               (
                  (
                     n23=Identifier()
                     { n22 = new NodeChoice(n23, 0); }
                  |
                     n24=Literal()
                     { n22 = new NodeChoice(n24, 1); }
                  )
                  
               )
               { n21.addNode(n22); }
               (
                  n26=BeforeAfterPhrase()
                  { n25.addNode(n26); }
               )*
               { n25.nodes.trimToSize(); }
               { n21.addNode(n25); }
               { n20.addNode(n21); }
            )+
            { n20.nodes.trimToSize(); }
            { n14.addNode(n20); }
            { n8 = new NodeChoice(n14, 1); }
         )
         { n7.addNode(n8); }
      )+
      { n7.nodes.trimToSize(); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   (
      n28=ReplacingPhrase()
      { n27.addNode(n28); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new TallyingPhrase();} 
   { return new TallyingPhrase(n0,n2,n27); }
}

ConvertingPhrase ConvertingPhrase() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   Identifier n8;
   Literal n9;
   NodeListOptional n10 = new NodeListOptional();
   BeforeAfterPhrase n11;

   
}
{
try {
   n1=<CONVERTING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=Literal()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   n6=<TO> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      (
         n8=Identifier()
         { n7 = new NodeChoice(n8, 0); }
      |
         n9=Literal()
         { n7 = new NodeChoice(n9, 1); }
      )
      
   )
   (
      n11=BeforeAfterPhrase()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ConvertingPhrase();} 
   { return new ConvertingPhrase(n0,n2,n5,n7,n10); }
}

ReplacingPhrase ReplacingPhrase() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   Identifier n10;
   Literal n11;
   NodeListOptional n12;
   BeforeAfterPhrase n13;
   NodeSequence n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeList n22;
   NodeSequence n23;
   NodeChoice n24;
   Identifier n25;
   Literal n26;
   NodeToken n27;
   Token n28;
   NodeChoice n29;
   Identifier n30;
   Literal n31;
   NodeListOptional n32;
   BeforeAfterPhrase n33;

   
}
{
try {
   n1=<REPLACING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n12 = new NodeListOptional(); }
      { n22 = new NodeList(); }
      (
         { n4 = new NodeSequence(4); }
         n6=<CHARACTERS> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8=<BY> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         (
            (
               n10=Identifier()
               { n9 = new NodeChoice(n10, 0); }
            |
               n11=Literal()
               { n9 = new NodeChoice(n11, 1); }
            )
            
         )
         { n4.addNode(n9); }
         (
            n13=BeforeAfterPhrase()
            { n12.addNode(n13); }
         )*
         { n12.nodes.trimToSize(); }
         { n4.addNode(n12); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n14 = new NodeSequence(2); }
         (
            (
               n17=<ALL> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15 = new NodeChoice(n16, 0); }
            |
               n19=<LEADING> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n15 = new NodeChoice(n18, 1); }
            |
               n21=<FIRST> { n20 = JTBToolkit.makeNodeToken(n21); }
               { n15 = new NodeChoice(n20, 2); }
            )
            
         )
         { n14.addNode(n15); }
         (
            { n32 = new NodeListOptional(); }
            { n23 = new NodeSequence(4); }
            (
               (
                  n25=Identifier()
                  { n24 = new NodeChoice(n25, 0); }
               |
                  n26=Literal()
                  { n24 = new NodeChoice(n26, 1); }
               )
               
            )
            { n23.addNode(n24); }
            n28=<BY> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n23.addNode(n27); }
            (
               (
                  n30=Identifier()
                  { n29 = new NodeChoice(n30, 0); }
               |
                  n31=Literal()
                  { n29 = new NodeChoice(n31, 1); }
               )
               
            )
            { n23.addNode(n29); }
            (
               n33=BeforeAfterPhrase()
               { n32.addNode(n33); }
            )*
            { n32.nodes.trimToSize(); }
            { n23.addNode(n32); }
            { n22.addNode(n23); }
         )+
         { n22.nodes.trimToSize(); }
         { n14.addNode(n22); }
         { n3 = new NodeChoice(n14, 1); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ReplacingPhrase();} 
   { return new ReplacingPhrase(n0,n2); }
}

BeforeAfterPhrase BeforeAfterPhrase() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   Identifier n9;
   Literal n10;

   
}
{
try {
   (
      (
         n2=<BEFORE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<AFTER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<INITIAL> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n9=Identifier()
         { n8 = new NodeChoice(n9, 0); }
      |
         n10=Literal()
         { n8 = new NodeChoice(n10, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new BeforeAfterPhrase();} 
   { return new BeforeAfterPhrase(n0,n5,n8); }
}

MergeStatement MergeStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeList n3 = new NodeList();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeList n16;
   NodeSequence n17;
   QualifiedDataName n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22 = new NodeOptional();
   NodeSequence n23;
   NodeOptional n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   AlphabetName n32;
   NodeToken n33;
   Token n34;
   FileName n35;
   NodeList n36 = new NodeList();
   NodeSequence n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   FileName n41;
   NodeChoice n42;
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48 = new NodeOptional();
   NodeToken n49;
   Token n50;
   ProcedureName n51;
   NodeOptional n52 = new NodeOptional();
   NodeSequence n53;
   NodeChoice n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   ProcedureName n59;
   NodeSequence n60;
   NodeToken n61;
   Token n62;
   NodeList n63 = new NodeList();
   FileName n64;

   
}
{
try {
   n1=<MERGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      { n5 = new NodeOptional(); }
      { n13 = new NodeOptional(); }
      { n16 = new NodeList(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<ON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      (
         (
            n10=<ASCENDING> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8 = new NodeChoice(n9, 0); }
         |
            n12=<DESCENDING> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n8 = new NodeChoice(n11, 1); }
         )
         
      )
      { n4.addNode(n8); }
      (
         n15=<KEY> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n4.addNode(n13); }
      (
         { n19 = new NodeOptional(); }
         { n17 = new NodeSequence(2); }
         n18=QualifiedDataName()
         { n17.addNode(n18); }
         (
            n21=<COMMACHAR> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
         )?
         { n17.addNode(n19); }
         { n16.addNode(n17); }
      )+
      { n16.nodes.trimToSize(); }
      { n4.addNode(n16); }
      { n3.addNode(n4); }
   )+
   { n3.nodes.trimToSize(); }
   (
      { n24 = new NodeOptional(); }
      { n29 = new NodeOptional(); }
      { n23 = new NodeSequence(4); }
      (
         n26=<COLLATING> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
      )?
      { n23.addNode(n24); }
      n28=<SEQUENCE> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n23.addNode(n27); }
      (
         n31=<IS> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
      )?
      { n23.addNode(n29); }
      n32=AlphabetName()
      { n23.addNode(n32); }
      { n22.addNode(n23); }
   )?
   n34=<USING> { n33 = JTBToolkit.makeNodeToken(n34); }
   n35=FileName()
   (
      { n38 = new NodeOptional(); }
      { n37 = new NodeSequence(2); }
      (
         n40=<COMMACHAR> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n37.addNode(n38); }
      n41=FileName()
      { n37.addNode(n41); }
      { n36.addNode(n37); }
   )+
   { n36.nodes.trimToSize(); }
   (
      (
         { n43 = new NodeSequence(5); }
         n45=<OUTPUT> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n43.addNode(n44); }
         n47=<PROCEDURE> { n46 = JTBToolkit.makeNodeToken(n47); }
         { n43.addNode(n46); }
         (
            n50=<IS> { n49 = JTBToolkit.makeNodeToken(n50); }
            { n48.addNode(n49); }
         )?
         { n43.addNode(n48); }
         n51=ProcedureName()
         { n43.addNode(n51); }
         (
            { n53 = new NodeSequence(2); }
            (
               (
                  n56=<THROUGH> { n55 = JTBToolkit.makeNodeToken(n56); }
                  { n54 = new NodeChoice(n55, 0); }
               |
                  n58=<THRU> { n57 = JTBToolkit.makeNodeToken(n58); }
                  { n54 = new NodeChoice(n57, 1); }
               )
               
            )
            { n53.addNode(n54); }
            n59=ProcedureName()
            { n53.addNode(n59); }
            { n52.addNode(n53); }
         )?
         { n43.addNode(n52); }
         { n42 = new NodeChoice(n43, 0); }
      |
         { n60 = new NodeSequence(2); }
         n62=<GIVING> { n61 = JTBToolkit.makeNodeToken(n62); }
         { n60.addNode(n61); }
         (
            n64=FileName()
            { n63.addNode(n64); }
         )+
         { n63.nodes.trimToSize(); }
         { n60.addNode(n63); }
         { n42 = new NodeChoice(n60, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new MergeStatement();} 
   { return new MergeStatement(n0,n2,n3,n22,n33,n35,n36,n42); }
}

MoveStatement MoveStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeChoice n4;
   Identifier n5;
   Literal n6;
   NodeToken n7;
   Token n8;
   NodeList n9 = new NodeList();
   NodeSequence n10;
   Identifier n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   NodeSequence n15;
   NodeChoice n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;
   NodeList n24 = new NodeList();
   NodeSequence n25;
   Identifier n26;
   NodeOptional n27;
   NodeToken n28;
   Token n29;

   
}
{
try {
   n1=<MOVE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(3); }
         (
            (
               n5=Identifier()
               { n4 = new NodeChoice(n5, 0); }
            |
               n6=Literal()
               { n4 = new NodeChoice(n6, 1); }
            )
            
         )
         { n3.addNode(n4); }
         n8=<TO> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         (
            { n12 = new NodeOptional(); }
            { n10 = new NodeSequence(2); }
            n11=Identifier()
            { n10.addNode(n11); }
            (
               n14=<COMMACHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
            )?
            { n10.addNode(n12); }
            { n9.addNode(n10); }
         )+
         { n9.nodes.trimToSize(); }
         { n3.addNode(n9); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n15 = new NodeSequence(4); }
         (
            (
               n18=<CORRESPONDING> { n17 = JTBToolkit.makeNodeToken(n18); }
               { n16 = new NodeChoice(n17, 0); }
            |
               n20=<CORR> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n16 = new NodeChoice(n19, 1); }
            )
            
         )
         { n15.addNode(n16); }
         n21=Identifier()
         { n15.addNode(n21); }
         n23=<TO> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n15.addNode(n22); }
         (
            { n27 = new NodeOptional(); }
            { n25 = new NodeSequence(2); }
            n26=Identifier()
            { n25.addNode(n26); }
            (
               n29=<COMMACHAR> { n28 = JTBToolkit.makeNodeToken(n29); }
               { n27.addNode(n28); }
            )?
            { n25.addNode(n27); }
            { n24.addNode(n25); }
         )+
         { n24.nodes.trimToSize(); }
         { n15.addNode(n24); }
         { n2 = new NodeChoice(n15, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new MoveStatement();} 
   { return new MoveStatement(n0,n2); }
}

MultiplyStatement MultiplyStatement() :
{
   NodeToken n0;
   Token n1;
   MultiplyBody n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   StatementList n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   StatementList n24;
   NodeOptional n25 = new NodeOptional();
   NodeToken n26;
   Token n27;

   
}
{
try {
   n1=<MULTIPLY> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MultiplyBody()
   (
      LOOKAHEAD([ <ON> ] <SIZE> <ERROR>)
      { n5 = new NodeOptional(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<ON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      n9=<SIZE> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n4.addNode(n8); }
      n11=<ERROR> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n4.addNode(n10); }
      n12=StatementList()
      { n4.addNode(n12); }
      { n3.addNode(n4); }
   )?
   (
      LOOKAHEAD(<NOT> [ <ON> ] <SIZE> <ERROR>)
      { n17 = new NodeOptional(); }
      { n14 = new NodeSequence(5); }
      n16=<NOT> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      (
         n19=<ON> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
      )?
      { n14.addNode(n17); }
      n21=<SIZE> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n14.addNode(n20); }
      n23=<ERROR> { n22 = JTBToolkit.makeNodeToken(n23); }
      { n14.addNode(n22); }
      n24=StatementList()
      { n14.addNode(n24); }
      { n13.addNode(n14); }
   )?
   (
      n27=<END_MULTIPLY> { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new MultiplyStatement();} 
   { return new MultiplyStatement(n0,n2,n3,n13,n25); }
}

MultiplyBody MultiplyBody() :
{
   IdOrLiteral n0;
   NodeToken n1;
   Token n2;
   NodeChoice n3;
   NodeSequence n4;
   IdOrLiteral n5;
   NodeToken n6;
   Token n7;
   ArithIdentifierList n8;
   ArithIdentifierList n9;

   
}
{
try {
   n0=IdOrLiteral()
   n2=<BY> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      (
         LOOKAHEAD(IdOrLiteral() <GIVING>)
         { n4 = new NodeSequence(4); }
         n5=IdOrLiteral()
         { n4.addNode(n5); }
         n7=<GIVING> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n4.addNode(n6); }
         n8=ArithIdentifierList()
         { n4.addNode(n8); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n9=ArithIdentifierList()
         { n3 = new NodeChoice(n9, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new MultiplyBody();} 
   { return new MultiplyBody(n0,n1,n3); }
}

OpenStatement OpenStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeList n7;
   NodeSequence n8;
   FileName n9;
   NodeOptional n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   NodeList n28;
   NodeSequence n29;
   FileName n30;
   NodeOptional n31;
   NodeSequence n32;
   NodeOptional n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeOptional n40;
   NodeToken n41;
   Token n42;
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   NodeList n46;
   NodeSequence n47;
   FileName n48;
   NodeOptional n49;
   NodeToken n50;
   Token n51;
   NodeSequence n52;
   NodeToken n53;
   Token n54;
   NodeList n55;
   NodeSequence n56;
   FileName n57;
   NodeOptional n58;
   NodeToken n59;
   Token n60;

   
}
{
try {
   n1=<OPEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeList(); }
      { n28 = new NodeList(); }
      { n46 = new NodeList(); }
      { n55 = new NodeList(); }
      (
         { n4 = new NodeSequence(2); }
         n6=<INPUT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         (
            { n10 = new NodeOptional(); }
            { n22 = new NodeOptional(); }
            { n8 = new NodeSequence(3); }
            n9=FileName()
            { n8.addNode(n9); }
            (
               { n15 = new NodeOptional(); }
               (
                  (
                     n13=<REVERSED> { n12 = JTBToolkit.makeNodeToken(n13); }
                     { n11 = new NodeChoice(n12, 0); }
                  |
                     { n14 = new NodeSequence(3); }
                     (
                        n17=<WITH> { n16 = JTBToolkit.makeNodeToken(n17); }
                        { n15.addNode(n16); }
                     )?
                     { n14.addNode(n15); }
                     n19=<NO> { n18 = JTBToolkit.makeNodeToken(n19); }
                     { n14.addNode(n18); }
                     n21=<REWIND> { n20 = JTBToolkit.makeNodeToken(n21); }
                     { n14.addNode(n20); }
                     { n11 = new NodeChoice(n14, 1); }
                  )
                  
               )
               { n10.addNode(n11); }
            )?
            { n8.addNode(n10); }
            (
               n24=<COMMACHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n22.addNode(n23); }
            )?
            { n8.addNode(n22); }
            { n7.addNode(n8); }
         )+
         { n7.nodes.trimToSize(); }
         { n4.addNode(n7); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n25 = new NodeSequence(2); }
         n27=<OUTPUT> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
         (
            { n31 = new NodeOptional(); }
            { n40 = new NodeOptional(); }
            { n29 = new NodeSequence(3); }
            n30=FileName()
            { n29.addNode(n30); }
            (
               { n33 = new NodeOptional(); }
               { n32 = new NodeSequence(3); }
               (
                  n35=<WITH> { n34 = JTBToolkit.makeNodeToken(n35); }
                  { n33.addNode(n34); }
               )?
               { n32.addNode(n33); }
               n37=<NO> { n36 = JTBToolkit.makeNodeToken(n37); }
               { n32.addNode(n36); }
               n39=<REWIND> { n38 = JTBToolkit.makeNodeToken(n39); }
               { n32.addNode(n38); }
               { n31.addNode(n32); }
            )?
            { n29.addNode(n31); }
            (
               n42=<COMMACHAR> { n41 = JTBToolkit.makeNodeToken(n42); }
               { n40.addNode(n41); }
            )?
            { n29.addNode(n40); }
            { n28.addNode(n29); }
         )+
         { n28.nodes.trimToSize(); }
         { n25.addNode(n28); }
         { n3 = new NodeChoice(n25, 1); }
      |
         { n43 = new NodeSequence(2); }
         n45=<I_O> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n43.addNode(n44); }
         (
            { n49 = new NodeOptional(); }
            { n47 = new NodeSequence(2); }
            n48=FileName()
            { n47.addNode(n48); }
            (
               n51=<COMMACHAR> { n50 = JTBToolkit.makeNodeToken(n51); }
               { n49.addNode(n50); }
            )?
            { n47.addNode(n49); }
            { n46.addNode(n47); }
         )+
         { n46.nodes.trimToSize(); }
         { n43.addNode(n46); }
         { n3 = new NodeChoice(n43, 2); }
      |
         { n52 = new NodeSequence(2); }
         n54=<EXTEND> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n52.addNode(n53); }
         (
            { n58 = new NodeOptional(); }
            { n56 = new NodeSequence(2); }
            n57=FileName()
            { n56.addNode(n57); }
            (
               n60=<COMMACHAR> { n59 = JTBToolkit.makeNodeToken(n60); }
               { n58.addNode(n59); }
            )?
            { n56.addNode(n58); }
            { n55.addNode(n56); }
         )+
         { n55.nodes.trimToSize(); }
         { n52.addNode(n55); }
         { n3 = new NodeChoice(n52, 3); }
      )
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new OpenStatement();} 
   { return new OpenStatement(n0,n2); }
}

PerformStatement PerformStatement() :
{
   NodeToken n0;
   Token n1;
   PerformBody n2;

   
}
{
try {
   n1=<PERFORM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PerformBody()
   
} catch(ParseException e) {
	error_skipto(DOT); return new PerformStatement();} 
   { return new PerformStatement(n0,n2); }
}

PerformBody PerformBody() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeOptional n2 = new NodeOptional();
   PerformOption n3;
   NodeOptional n4 = new NodeOptional();
   StatementList n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   PerformProcedure n9;
   NodeOptional n10 = new NodeOptional();
   PerformOption n11;

   
}
{
try {
   (
      LOOKAHEAD(5)
      { n1 = new NodeSequence(4); }
      (
         n3=PerformOption()
         { n2.addNode(n3); }
      )?
      { n1.addNode(n2); }
      (
         n5=StatementList()
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      n7=<END_PERFORM> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(2); }
      n9=PerformProcedure()
      { n8.addNode(n9); }
      (
         n11=PerformOption()
         { n10.addNode(n11); }
      )?
      { n8.addNode(n10); }
      { n0 = new NodeChoice(n8, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PerformBody();} 
   { return new PerformBody(n0); }
}

PerformProcedure PerformProcedure() :
{
   ProcedureName n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   ProcedureName n8;

   
}
{
try {
   n0=ProcedureName()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<THRU> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<THROUGH> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=ProcedureName()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new PerformProcedure();} 
   { return new PerformProcedure(n0,n1); }
}

BeforeOrAfter BeforeOrAfter() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
try {
   (
      n2=<BEFORE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<AFTER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new BeforeOrAfter();} 
   { return new BeforeOrAfter(n0); }
}

PerformOption PerformOption() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   Identifier n3;
   Literal n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeOptional n8 = new NodeOptional();
   PerformTest n9;
   NodeToken n10;
   Token n11;
   Condition n12;
   NodeSequence n13;
   NodeOptional n14 = new NodeOptional();
   PerformTest n15;
   NodeToken n16;
   Token n17;
   PerformVaryingList n18;

   
}
{
try {
   (
      LOOKAHEAD(( Identifier() | Literal() ) <TIMES>)
      { n1 = new NodeSequence(3); }
      (
         (
            n3=Identifier()
            { n2 = new NodeChoice(n3, 0); }
         |
            n4=Literal()
            { n2 = new NodeChoice(n4, 1); }
         )
         
      )
      { n1.addNode(n2); }
      n6=<TIMES> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD([ PerformTest() ] <UNTIL>)
      { n7 = new NodeSequence(4); }
      (
         n9=PerformTest()
         { n8.addNode(n9); }
      )?
      { n7.addNode(n8); }
      n11=<UNTIL> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n7.addNode(n10); }
      n12=Condition()
      { n7.addNode(n12); }
      { n0 = new NodeChoice(n7, 1); }
   |
      LOOKAHEAD([ PerformTest() ] <VARYING>)
      { n13 = new NodeSequence(4); }
      (
         n15=PerformTest()
         { n14.addNode(n15); }
      )?
      { n13.addNode(n14); }
      n17=<VARYING> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n13.addNode(n16); }
      n18=PerformVaryingList()
      { n13.addNode(n18); }
      { n0 = new NodeChoice(n13, 2); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PerformOption();} 
   { return new PerformOption(n0); }
}

PerformTest PerformTest() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   BeforeOrAfter n5;

   
}
{
try {
   (
      n2=<WITH> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<TEST> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=BeforeOrAfter()
   
} catch(ParseException e) {
	error_skipto(DOT); return new PerformTest();} 
   { return new PerformTest(n0,n3,n5); }
}

PerformVaryingList PerformVaryingList() :
{
   PerformVarying n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   PerformVarying n5;
   NodeOptional n6;
   NodeToken n7;
   Token n8;

   
}
{
try {
   n0=PerformVarying()
   (
      { n6 = new NodeOptional(); }
      { n2 = new NodeSequence(3); }
      n4=<AFTER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=PerformVarying()
      { n2.addNode(n5); }
      (
         n8=<COMMACHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
      )?
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PerformVaryingList();} 
   { return new PerformVaryingList(n0,n1); }
}

PerformVarying PerformVarying() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   IdOrLiteral n3;
   NodeToken n4;
   Token n5;
   IdOrLiteral n6;
   NodeToken n7;
   Token n8;
   Condition n9;

   
}
{
try {
   n0=Identifier()
   n2=<FROM> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=IdOrLiteral()
   n5=<BY> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=IdOrLiteral()
   n8=<UNTIL> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Condition()
   
} catch(ParseException e) {
	error_skipto(DOT); return new PerformVarying();} 
   { return new PerformVarying(n0,n1,n3,n4,n6,n7,n9); }
}

ReadStatement ReadStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Identifier n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18;
   NodeToken n19;
   Token n20;
   QualifiedDataName n21;
   NodeOptional n22 = new NodeOptional();
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   StatementList n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeOptional n36;
   NodeToken n37;
   Token n38;
   StatementList n39;
   NodeOptional n40 = new NodeOptional();
   NodeSequence n41;
   NodeOptional n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   StatementList n47;
   NodeOptional n48 = new NodeOptional();
   NodeSequence n49;
   NodeToken n50;
   Token n51;
   NodeOptional n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   StatementList n57;
   NodeOptional n58 = new NodeOptional();
   NodeToken n59;
   Token n60;

   
}
{
try {
   n1=<READ> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      n5=<NEXT> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      n8=<RECORD> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   (
      { n10 = new NodeSequence(2); }
      n12=<INTO> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
      n13=Identifier()
      { n10.addNode(n13); }
      { n9.addNode(n10); }
   )?
   (
      { n18 = new NodeOptional(); }
      { n15 = new NodeSequence(3); }
      n17=<KEY> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      (
         n20=<IS> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
      )?
      { n15.addNode(n18); }
      n21=QualifiedDataName()
      { n15.addNode(n21); }
      { n14.addNode(n15); }
   )?
   (
      { n26 = new NodeOptional(); }
      { n23 = new NodeSequence(3); }
      n25=<INVALID> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n23.addNode(n24); }
      (
         n28=<KEY> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26.addNode(n27); }
      )?
      { n23.addNode(n26); }
      n29=StatementList()
      { n23.addNode(n29); }
      { n22.addNode(n23); }
   )?
   (
      { n36 = new NodeOptional(); }
      { n31 = new NodeSequence(4); }
      n33=<NOT> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
      n35=<INVALID> { n34 = JTBToolkit.makeNodeToken(n35); }
      { n31.addNode(n34); }
      (
         n38=<KEY> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n36.addNode(n37); }
      )?
      { n31.addNode(n36); }
      n39=StatementList()
      { n31.addNode(n39); }
      { n30.addNode(n31); }
   )?
   (
      { n42 = new NodeOptional(); }
      { n41 = new NodeSequence(3); }
      (
         n44=<AT> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
      )?
      { n41.addNode(n42); }
      n46=<END> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n41.addNode(n45); }
      n47=StatementList()
      { n41.addNode(n47); }
      { n40.addNode(n41); }
   )?
   (
      { n52 = new NodeOptional(); }
      { n49 = new NodeSequence(4); }
      n51=<NOT> { n50 = JTBToolkit.makeNodeToken(n51); }
      { n49.addNode(n50); }
      (
         n54=<AT> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n52.addNode(n53); }
      )?
      { n49.addNode(n52); }
      n56=<END> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n49.addNode(n55); }
      n57=StatementList()
      { n49.addNode(n57); }
      { n48.addNode(n49); }
   )?
   (
      n60=<END_READ> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n58.addNode(n59); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new ReadStatement();} 
   { return new ReadStatement(n0,n2,n3,n6,n9,n14,n22,n30,n40,n48,n58); }
}

ReleaseStatement ReleaseStatement() :
{
   NodeToken n0;
   Token n1;
   RecordName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   QualifiedDataName n7;

   
}
{
try {
   n1=<RELEASE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordName()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=QualifiedDataName()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new ReleaseStatement();} 
   { return new ReleaseStatement(n0,n2,n3); }
}

ReturnStatement ReturnStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   QualifiedDataName n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   StatementList n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   StatementList n26;
   NodeOptional n27 = new NodeOptional();
   NodeToken n28;
   Token n29;

   
}
{
try {
   n1=<RETURN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      n5=<RECORD> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   (
      { n7 = new NodeSequence(2); }
      n9=<INTO> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=QualifiedDataName()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   (
      n13=<AT> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
   )?
   n15=<END> { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=StatementList()
   (
      { n21 = new NodeOptional(); }
      { n18 = new NodeSequence(4); }
      n20=<NOT> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      (
         n23=<AT> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
      )?
      { n18.addNode(n21); }
      n25=<END> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n18.addNode(n24); }
      n26=StatementList()
      { n18.addNode(n26); }
      { n17.addNode(n18); }
   )?
   (
      n29=<END_RETURN> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n27.addNode(n28); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new ReturnStatement();} 
   { return new ReturnStatement(n0,n2,n3,n6,n11,n14,n16,n17,n27); }
}

RewriteStatement RewriteStatement() :
{
   NodeToken n0;
   Token n1;
   RecordName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   StatementList n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   StatementList n25;
   NodeOptional n26 = new NodeOptional();
   NodeToken n27;
   Token n28;

   
}
{
try {
   n1=<REWRITE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordName()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   (
      { n12 = new NodeOptional(); }
      { n9 = new NodeSequence(3); }
      n11=<INVALID> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         n14=<KEY> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n9.addNode(n12); }
      n15=StatementList()
      { n9.addNode(n15); }
      { n8.addNode(n9); }
   )?
   (
      { n22 = new NodeOptional(); }
      { n17 = new NodeSequence(4); }
      n19=<NOT> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n21=<INVALID> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n17.addNode(n20); }
      (
         n24=<KEY> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
      )?
      { n17.addNode(n22); }
      n25=StatementList()
      { n17.addNode(n25); }
      { n16.addNode(n17); }
   )?
   (
      n28=<END_REWRITE> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n26.addNode(n27); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new RewriteStatement();} 
   { return new RewriteStatement(n0,n2,n3,n8,n16,n26); }
}

SearchStatement SearchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   QualifiedDataName n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   QualifiedDataName n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   StatementList n18;
   NodeList n19 = new NodeList();
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   Condition n23;
   NodeChoice n24;
   StatementList n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeOptional n31 = new NodeOptional();
   NodeToken n32;
   Token n33;

   
}
{
try {
   n1=<SEARCH> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<ALL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=QualifiedDataName()
   (
      { n7 = new NodeSequence(2); }
      n9=<VARYING> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=QualifiedDataName()
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   (
      { n13 = new NodeOptional(); }
      { n12 = new NodeSequence(3); }
      (
         n15=<AT> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n12.addNode(n13); }
      n17=<END> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n12.addNode(n16); }
      n18=StatementList()
      { n12.addNode(n18); }
      { n11.addNode(n12); }
   )?
   (
      { n20 = new NodeSequence(3); }
      n22=<WHEN> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      n23=Condition()
      { n20.addNode(n23); }
      (
         (
            n25=StatementList()
            { n24 = new NodeChoice(n25, 0); }
         |
            { n26 = new NodeSequence(2); }
            n28=<NEXT> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n26.addNode(n27); }
            n30=<SENTENCE> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n26.addNode(n29); }
            { n24 = new NodeChoice(n26, 1); }
         )
         
      )
      { n20.addNode(n24); }
      { n19.addNode(n20); }
   )+
   { n19.nodes.trimToSize(); }
   (
      n33=<END_SEARCH> { n32 = JTBToolkit.makeNodeToken(n33); }
      { n31.addNode(n32); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SearchStatement();} 
   { return new SearchStatement(n0,n2,n5,n6,n11,n19,n31); }
}

SetStatement SetStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeList n4;
   NodeSequence n5;
   Identifier n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeChoice n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   Literal n24;
   NodeSequence n25;
   NodeChoice n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeOptional n31;
   NodeToken n32;
   Token n33;
   NodeChoice n34;
   Identifier n35;
   Literal n36;

   
}
{
try {
   n1=<SET> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n4 = new NodeList(); }
      { n31 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         { n7 = new NodeOptional(); }
         { n5 = new NodeSequence(2); }
         n6=Identifier()
         { n5.addNode(n6); }
         (
            n9=<COMMACHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n7.addNode(n8); }
         )?
         { n5.addNode(n7); }
         { n4.addNode(n5); }
      )+
      { n4.nodes.trimToSize(); }
      { n3.addNode(n4); }
      (
         (
            { n11 = new NodeSequence(2); }
            n13=<TO> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
            (
               (
                  n15=Identifier()
                  { n14 = new NodeChoice(n15, 0); }
               |
                  n17=<TRUE> { n16 = JTBToolkit.makeNodeToken(n17); }
                  { n14 = new NodeChoice(n16, 1); }
               |
                  n19=<FALSE> { n18 = JTBToolkit.makeNodeToken(n19); }
                  { n14 = new NodeChoice(n18, 2); }
               |
                  n21=<ON> { n20 = JTBToolkit.makeNodeToken(n21); }
                  { n14 = new NodeChoice(n20, 3); }
               |
                  n23=<OFF> { n22 = JTBToolkit.makeNodeToken(n23); }
                  { n14 = new NodeChoice(n22, 4); }
               |
                  n24=Literal()
                  { n14 = new NodeChoice(n24, 5); }
               )
               
            )
            { n11.addNode(n14); }
            { n10 = new NodeChoice(n11, 0); }
         |
            { n25 = new NodeSequence(3); }
            (
               (
                  n28=<UP> { n27 = JTBToolkit.makeNodeToken(n28); }
                  { n26 = new NodeChoice(n27, 0); }
               |
                  n30=<DOWN> { n29 = JTBToolkit.makeNodeToken(n30); }
                  { n26 = new NodeChoice(n29, 1); }
               )
               
            )
            { n25.addNode(n26); }
            (
               n33=<BY> { n32 = JTBToolkit.makeNodeToken(n33); }
               { n31.addNode(n32); }
            )?
            { n25.addNode(n31); }
            (
               (
                  n35=Identifier()
                  { n34 = new NodeChoice(n35, 0); }
               |
                  n36=Literal()
                  { n34 = new NodeChoice(n36, 1); }
               )
               
            )
            { n25.addNode(n34); }
            { n10 = new NodeChoice(n25, 1); }
         )
         
      )
      { n3.addNode(n10); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SetStatement();} 
   { return new SetStatement(n0,n2); }
}

SortStatement SortStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeList n3 = new NodeList();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   NodeList n16;
   NodeSequence n17;
   QualifiedDataName n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22 = new NodeOptional();
   NodeSequence n23;
   NodeOptional n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeOptional n32;
   NodeToken n33;
   Token n34;
   NodeOptional n35 = new NodeOptional();
   NodeSequence n36;
   NodeOptional n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   NodeOptional n42;
   NodeToken n43;
   Token n44;
   AlphabetName n45;
   NodeChoice n46;
   NodeSequence n47;
   NodeToken n48;
   Token n49;
   NodeList n50 = new NodeList();
   FileName n51;
   NodeSequence n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeOptional n57 = new NodeOptional();
   NodeToken n58;
   Token n59;
   ProcedureName n60;
   NodeOptional n61 = new NodeOptional();
   NodeSequence n62;
   NodeChoice n63;
   NodeToken n64;
   Token n65;
   NodeToken n66;
   Token n67;
   ProcedureName n68;
   NodeChoice n69;
   NodeSequence n70;
   NodeToken n71;
   Token n72;
   NodeList n73 = new NodeList();
   FileName n74;
   NodeSequence n75;
   NodeToken n76;
   Token n77;
   NodeToken n78;
   Token n79;
   NodeOptional n80 = new NodeOptional();
   NodeToken n81;
   Token n82;
   ProcedureName n83;
   NodeOptional n84 = new NodeOptional();
   NodeSequence n85;
   NodeChoice n86;
   NodeToken n87;
   Token n88;
   NodeToken n89;
   Token n90;
   ProcedureName n91;

   
}
{
try {
   n1=<SORT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      { n5 = new NodeOptional(); }
      { n13 = new NodeOptional(); }
      { n16 = new NodeList(); }
      { n4 = new NodeSequence(4); }
      (
         n7=<ON> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      (
         (
            n10=<ASCENDING> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8 = new NodeChoice(n9, 0); }
         |
            n12=<DESCENDING> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n8 = new NodeChoice(n11, 1); }
         )
         
      )
      { n4.addNode(n8); }
      (
         n15=<KEY> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
      )?
      { n4.addNode(n13); }
      (
         { n19 = new NodeOptional(); }
         { n17 = new NodeSequence(2); }
         n18=QualifiedDataName()
         { n17.addNode(n18); }
         (
            n21=<COMMACHAR> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
         )?
         { n17.addNode(n19); }
         { n16.addNode(n17); }
      )+
      { n16.nodes.trimToSize(); }
      { n4.addNode(n16); }
      { n3.addNode(n4); }
   )+
   { n3.nodes.trimToSize(); }
   (
      { n24 = new NodeOptional(); }
      { n29 = new NodeOptional(); }
      { n32 = new NodeOptional(); }
      { n23 = new NodeSequence(4); }
      (
         n26=<WITH> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
      )?
      { n23.addNode(n24); }
      n28=<DUPLICATES> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n23.addNode(n27); }
      (
         n31=<IN> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
      )?
      { n23.addNode(n29); }
      (
         n34=<ORDER> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n32.addNode(n33); }
      )?
      { n23.addNode(n32); }
      { n22.addNode(n23); }
   )?
   (
      { n37 = new NodeOptional(); }
      { n42 = new NodeOptional(); }
      { n36 = new NodeSequence(4); }
      (
         n39=<COLLATING> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n37.addNode(n38); }
      )?
      { n36.addNode(n37); }
      n41=<SEQUENCE> { n40 = JTBToolkit.makeNodeToken(n41); }
      { n36.addNode(n40); }
      (
         n44=<IS> { n43 = JTBToolkit.makeNodeToken(n44); }
         { n42.addNode(n43); }
      )?
      { n36.addNode(n42); }
      n45=AlphabetName()
      { n36.addNode(n45); }
      { n35.addNode(n36); }
   )?
   (
      (
         { n47 = new NodeSequence(2); }
         n49=<USING> { n48 = JTBToolkit.makeNodeToken(n49); }
         { n47.addNode(n48); }
         (
            n51=FileName()
            { n50.addNode(n51); }
         )+
         { n50.nodes.trimToSize(); }
         { n47.addNode(n50); }
         { n46 = new NodeChoice(n47, 0); }
      |
         { n52 = new NodeSequence(5); }
         n54=<INPUT> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n52.addNode(n53); }
         n56=<PROCEDURE> { n55 = JTBToolkit.makeNodeToken(n56); }
         { n52.addNode(n55); }
         (
            n59=<IS> { n58 = JTBToolkit.makeNodeToken(n59); }
            { n57.addNode(n58); }
         )?
         { n52.addNode(n57); }
         n60=ProcedureName()
         { n52.addNode(n60); }
         (
            { n62 = new NodeSequence(2); }
            (
               (
                  n65=<THROUGH> { n64 = JTBToolkit.makeNodeToken(n65); }
                  { n63 = new NodeChoice(n64, 0); }
               |
                  n67=<THRU> { n66 = JTBToolkit.makeNodeToken(n67); }
                  { n63 = new NodeChoice(n66, 1); }
               )
               
            )
            { n62.addNode(n63); }
            n68=ProcedureName()
            { n62.addNode(n68); }
            { n61.addNode(n62); }
         )?
         { n52.addNode(n61); }
         { n46 = new NodeChoice(n52, 1); }
      )
      
   )
   (
      (
         { n70 = new NodeSequence(2); }
         n72=<GIVING> { n71 = JTBToolkit.makeNodeToken(n72); }
         { n70.addNode(n71); }
         (
            n74=FileName()
            { n73.addNode(n74); }
         )+
         { n73.nodes.trimToSize(); }
         { n70.addNode(n73); }
         { n69 = new NodeChoice(n70, 0); }
      |
         { n75 = new NodeSequence(5); }
         n77=<OUTPUT> { n76 = JTBToolkit.makeNodeToken(n77); }
         { n75.addNode(n76); }
         n79=<PROCEDURE> { n78 = JTBToolkit.makeNodeToken(n79); }
         { n75.addNode(n78); }
         (
            n82=<IS> { n81 = JTBToolkit.makeNodeToken(n82); }
            { n80.addNode(n81); }
         )?
         { n75.addNode(n80); }
         n83=ProcedureName()
         { n75.addNode(n83); }
         (
            { n85 = new NodeSequence(2); }
            (
               (
                  n88=<THROUGH> { n87 = JTBToolkit.makeNodeToken(n88); }
                  { n86 = new NodeChoice(n87, 0); }
               |
                  n90=<THRU> { n89 = JTBToolkit.makeNodeToken(n90); }
                  { n86 = new NodeChoice(n89, 1); }
               )
               
            )
            { n85.addNode(n86); }
            n91=ProcedureName()
            { n85.addNode(n91); }
            { n84.addNode(n85); }
         )?
         { n75.addNode(n84); }
         { n69 = new NodeChoice(n75, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SortStatement();} 
   { return new SortStatement(n0,n2,n3,n22,n35,n46,n69); }
}

StartStatement StartStatement() :
{
   NodeToken n0;
   Token n1;
   FileName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeOptional n29;
   NodeToken n30;
   Token n31;
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   NodeOptional n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeOptional n45;
   NodeToken n46;
   Token n47;
   NodeSequence n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   QualifiedDataName n55;
   NodeOptional n56 = new NodeOptional();
   NodeSequence n57;
   NodeToken n58;
   Token n59;
   NodeOptional n60;
   NodeToken n61;
   Token n62;
   StatementList n63;
   NodeOptional n64 = new NodeOptional();
   NodeSequence n65;
   NodeToken n66;
   Token n67;
   NodeToken n68;
   Token n69;
   NodeOptional n70;
   NodeToken n71;
   Token n72;
   StatementList n73;
   NodeOptional n74 = new NodeOptional();
   NodeToken n75;
   Token n76;

   
}
{
try {
   n1=<START> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FileName()
   (
      { n7 = new NodeOptional(); }
      { n14 = new NodeOptional(); }
      { n22 = new NodeOptional(); }
      { n29 = new NodeOptional(); }
      { n35 = new NodeOptional(); }
      { n45 = new NodeOptional(); }
      { n4 = new NodeSequence(4); }
      n6=<KEY> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         n9=<IS> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n4.addNode(n7); }
      (
         (
            { n11 = new NodeSequence(2); }
            n13=<EQUAL> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n11.addNode(n12); }
            (
               n16=<TO> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14.addNode(n15); }
            )?
            { n11.addNode(n14); }
            { n10 = new NodeChoice(n11, 0); }
         |
            n18=<EQUALCHAR> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n10 = new NodeChoice(n17, 1); }
         |
            LOOKAHEAD(<GREATER> [ <THAN> ] <OR> <EQUAL> [ <TO> ])
            { n19 = new NodeSequence(6); }
            n21=<GREATER> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19.addNode(n20); }
            (
               n24=<THAN> { n23 = JTBToolkit.makeNodeToken(n24); }
               { n22.addNode(n23); }
            )?
            { n19.addNode(n22); }
            n26=<OR> { n25 = JTBToolkit.makeNodeToken(n26); }
            { n19.addNode(n25); }
            n28=<EQUAL> { n27 = JTBToolkit.makeNodeToken(n28); }
            { n19.addNode(n27); }
            (
               n31=<TO> { n30 = JTBToolkit.makeNodeToken(n31); }
               { n29.addNode(n30); }
            )?
            { n19.addNode(n29); }
            { n10 = new NodeChoice(n19, 2); }
         |
            { n32 = new NodeSequence(2); }
            n34=<GREATER> { n33 = JTBToolkit.makeNodeToken(n34); }
            { n32.addNode(n33); }
            (
               n37=<THAN> { n36 = JTBToolkit.makeNodeToken(n37); }
               { n35.addNode(n36); }
            )?
            { n32.addNode(n35); }
            { n10 = new NodeChoice(n32, 3); }
         |
            n39=<MORETHANCHAR> { n38 = JTBToolkit.makeNodeToken(n39); }
            { n10 = new NodeChoice(n38, 4); }
         |
            { n40 = new NodeSequence(3); }
            n42=<NOT> { n41 = JTBToolkit.makeNodeToken(n42); }
            { n40.addNode(n41); }
            n44=<LESS> { n43 = JTBToolkit.makeNodeToken(n44); }
            { n40.addNode(n43); }
            (
               n47=<THAN> { n46 = JTBToolkit.makeNodeToken(n47); }
               { n45.addNode(n46); }
            )?
            { n40.addNode(n45); }
            { n10 = new NodeChoice(n40, 5); }
         |
            { n48 = new NodeSequence(2); }
            n50=<NOT> { n49 = JTBToolkit.makeNodeToken(n50); }
            { n48.addNode(n49); }
            n52=<LESSTHANCHAR> { n51 = JTBToolkit.makeNodeToken(n52); }
            { n48.addNode(n51); }
            { n10 = new NodeChoice(n48, 6); }
         |
            n54=<MORETHANOREQUAL> { n53 = JTBToolkit.makeNodeToken(n54); }
            { n10 = new NodeChoice(n53, 7); }
         )
         
      )
      { n4.addNode(n10); }
      n55=QualifiedDataName()
      { n4.addNode(n55); }
      { n3.addNode(n4); }
   )?
   (
      { n60 = new NodeOptional(); }
      { n57 = new NodeSequence(3); }
      n59=<INVALID> { n58 = JTBToolkit.makeNodeToken(n59); }
      { n57.addNode(n58); }
      (
         n62=<KEY> { n61 = JTBToolkit.makeNodeToken(n62); }
         { n60.addNode(n61); }
      )?
      { n57.addNode(n60); }
      n63=StatementList()
      { n57.addNode(n63); }
      { n56.addNode(n57); }
   )?
   (
      { n70 = new NodeOptional(); }
      { n65 = new NodeSequence(4); }
      n67=<NOT> { n66 = JTBToolkit.makeNodeToken(n67); }
      { n65.addNode(n66); }
      n69=<INVALID> { n68 = JTBToolkit.makeNodeToken(n69); }
      { n65.addNode(n68); }
      (
         n72=<KEY> { n71 = JTBToolkit.makeNodeToken(n72); }
         { n70.addNode(n71); }
      )?
      { n65.addNode(n70); }
      n73=StatementList()
      { n65.addNode(n73); }
      { n64.addNode(n65); }
   )?
   (
      n76=<END_START> { n75 = JTBToolkit.makeNodeToken(n76); }
      { n74.addNode(n75); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new StartStatement();} 
   { return new StartStatement(n0,n2,n3,n56,n64,n74); }
}

StopStatement StopStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   Literal n5;

   
}
{
try {
   n1=<STOP> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<RUN> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n5=Literal()
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new StopStatement();} 
   { return new StopStatement(n0,n2); }
}

StringStatement StringStatement() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeList n4;
   NodeChoice n5;
   Identifier n6;
   Literal n7;
   NodeOptional n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12;
   NodeToken n13;
   Token n14;
   NodeChoice n15;
   Identifier n16;
   Literal n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   Identifier n22;
   NodeOptional n23 = new NodeOptional();
   NodeSequence n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   QualifiedDataName n30;
   NodeOptional n31 = new NodeOptional();
   NodeSequence n32;
   NodeOptional n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   StatementList n38;
   NodeOptional n39 = new NodeOptional();
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   NodeOptional n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   StatementList n48;
   NodeOptional n49 = new NodeOptional();
   NodeToken n50;
   Token n51;

   
}
{
try {
   n1=<STRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n4 = new NodeList(); }
      { n8 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         (
            n6=Identifier()
            { n5 = new NodeChoice(n6, 0); }
         |
            n7=Literal()
            { n5 = new NodeChoice(n7, 1); }
         )
         { n4.addNode(n5); }
      )+
      { n4.nodes.trimToSize(); }
      { n3.addNode(n4); }
      (
         { n12 = new NodeOptional(); }
         { n9 = new NodeSequence(3); }
         n11=<DELIMITED> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            n14=<BY> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
         )?
         { n9.addNode(n12); }
         (
            (
               n16=Identifier()
               { n15 = new NodeChoice(n16, 0); }
            |
               n17=Literal()
               { n15 = new NodeChoice(n17, 1); }
            |
               n19=<SIZE> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n15 = new NodeChoice(n18, 2); }
            )
            
         )
         { n9.addNode(n15); }
         { n8.addNode(n9); }
      )?
      { n3.addNode(n8); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   n21=<INTO> { n20 = JTBToolkit.makeNodeToken(n21); }
   n22=Identifier()
   (
      { n25 = new NodeOptional(); }
      { n24 = new NodeSequence(3); }
      (
         n27=<WITH> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
      )?
      { n24.addNode(n25); }
      n29=<POINTER> { n28 = JTBToolkit.makeNodeToken(n29); }
      { n24.addNode(n28); }
      n30=QualifiedDataName()
      { n24.addNode(n30); }
      { n23.addNode(n24); }
   )?
   (
      { n33 = new NodeOptional(); }
      { n32 = new NodeSequence(3); }
      (
         n35=<ON> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
      )?
      { n32.addNode(n33); }
      n37=<OVERFLOW> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n32.addNode(n36); }
      n38=StatementList()
      { n32.addNode(n38); }
      { n31.addNode(n32); }
   )?
   (
      { n43 = new NodeOptional(); }
      { n40 = new NodeSequence(4); }
      n42=<NOT> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n40.addNode(n41); }
      (
         n45=<ON> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n43.addNode(n44); }
      )?
      { n40.addNode(n43); }
      n47=<OVERFLOW> { n46 = JTBToolkit.makeNodeToken(n47); }
      { n40.addNode(n46); }
      n48=StatementList()
      { n40.addNode(n48); }
      { n39.addNode(n40); }
   )?
   (
      n51=<END_STRING> { n50 = JTBToolkit.makeNodeToken(n51); }
      { n49.addNode(n50); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new StringStatement();} 
   { return new StringStatement(n0,n2,n20,n22,n23,n31,n39,n49); }
}

SubtractStatement SubtractStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   IdOrLiteralList n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeSequence n8;
   IdOrLiteral n9;
   NodeToken n10;
   Token n11;
   ArithIdentifierList n12;
   ArithIdentifierList n13;
   NodeSequence n14;
   NodeChoice n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   QualifiedDataName n20;
   NodeToken n21;
   Token n22;
   QualifiedDataName n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   StatementList n33;
   NodeOptional n34 = new NodeOptional();
   NodeSequence n35;
   NodeToken n36;
   Token n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   StatementList n45;
   NodeOptional n46 = new NodeOptional();
   NodeToken n47;
   Token n48;

   
}
{
try {
   n1=<SUBTRACT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(3); }
         n4=IdOrLiteralList()
         { n3.addNode(n4); }
         n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n3.addNode(n5); }
         (
            (
               LOOKAHEAD(IdOrLiteral() <GIVING>)
               { n8 = new NodeSequence(4); }
               n9=IdOrLiteral()
               { n8.addNode(n9); }
               n11=<GIVING> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n8.addNode(n10); }
               n12=ArithIdentifierList()
               { n8.addNode(n12); }
               { n7 = new NodeChoice(n8, 0); }
            |
               n13=ArithIdentifierList()
               { n7 = new NodeChoice(n13, 1); }
            )
            
         )
         { n3.addNode(n7); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n14 = new NodeSequence(4); }
         (
            (
               n17=<CORRESPONDING> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n15 = new NodeChoice(n16, 0); }
            |
               n19=<CORR> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n15 = new NodeChoice(n18, 1); }
            )
            
         )
         { n14.addNode(n15); }
         n20=QualifiedDataName()
         { n14.addNode(n20); }
         n22=<FROM> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n14.addNode(n21); }
         n23=QualifiedDataName()
         { n14.addNode(n23); }
         { n2 = new NodeChoice(n14, 1); }
      )
      
   )
   (
      LOOKAHEAD([ <ON> ] <SIZE> <ERROR>)
      { n26 = new NodeOptional(); }
      { n25 = new NodeSequence(4); }
      (
         n28=<ON> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26.addNode(n27); }
      )?
      { n25.addNode(n26); }
      n30=<SIZE> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n25.addNode(n29); }
      n32=<ERROR> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n25.addNode(n31); }
      n33=StatementList()
      { n25.addNode(n33); }
      { n24.addNode(n25); }
   )?
   (
      LOOKAHEAD(<NOT> [ <ON> ] <SIZE> <ERROR>)
      { n38 = new NodeOptional(); }
      { n35 = new NodeSequence(5); }
      n37=<NOT> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n35.addNode(n36); }
      (
         n40=<ON> { n39 = JTBToolkit.makeNodeToken(n40); }
         { n38.addNode(n39); }
      )?
      { n35.addNode(n38); }
      n42=<SIZE> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n35.addNode(n41); }
      n44=<ERROR> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n35.addNode(n43); }
      n45=StatementList()
      { n35.addNode(n45); }
      { n34.addNode(n35); }
   )?
   (
      n48=<END_SUBTRACT> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n46.addNode(n47); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SubtractStatement();} 
   { return new SubtractStatement(n0,n2,n24,n34,n46); }
}

UnstringStatement UnstringStatement() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   Identifier n14;
   Literal n15;
   NodeListOptional n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   NodeChoice n23;
   Identifier n24;
   Literal n25;
   NodeToken n26;
   Token n27;
   NodeList n28 = new NodeList();
   NodeSequence n29;
   Identifier n30;
   NodeOptional n31;
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   NodeOptional n35;
   NodeToken n36;
   Token n37;
   Identifier n38;
   NodeOptional n39;
   NodeSequence n40;
   NodeToken n41;
   Token n42;
   NodeOptional n43;
   NodeToken n44;
   Token n45;
   Identifier n46;
   NodeOptional n47;
   NodeToken n48;
   Token n49;
   NodeOptional n50 = new NodeOptional();
   NodeSequence n51;
   NodeOptional n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   QualifiedDataName n57;
   NodeOptional n58 = new NodeOptional();
   NodeSequence n59;
   NodeToken n60;
   Token n61;
   NodeOptional n62;
   NodeToken n63;
   Token n64;
   QualifiedDataName n65;
   NodeOptional n66 = new NodeOptional();
   NodeSequence n67;
   NodeOptional n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   StatementList n73;
   NodeOptional n74 = new NodeOptional();
   NodeSequence n75;
   NodeToken n76;
   Token n77;
   NodeOptional n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
   StatementList n83;
   NodeOptional n84 = new NodeOptional();
   NodeToken n85;
   Token n86;

   
}
{
try {
   n1=<UNSTRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      { n7 = new NodeOptional(); }
      { n10 = new NodeOptional(); }
      { n16 = new NodeListOptional(); }
      { n4 = new NodeSequence(5); }
      n6=<DELIMITED> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         n9=<BY> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n4.addNode(n7); }
      (
         n12=<ALL> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
      )?
      { n4.addNode(n10); }
      (
         (
            n14=Identifier()
            { n13 = new NodeChoice(n14, 0); }
         |
            n15=Literal()
            { n13 = new NodeChoice(n15, 1); }
         )
         
      )
      { n4.addNode(n13); }
      (
         { n20 = new NodeOptional(); }
         { n17 = new NodeSequence(3); }
         n19=<OR> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
         (
            n22=<ALL> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n20.addNode(n21); }
         )?
         { n17.addNode(n20); }
         (
            (
               n24=Identifier()
               { n23 = new NodeChoice(n24, 0); }
            |
               n25=Literal()
               { n23 = new NodeChoice(n25, 1); }
            )
            
         )
         { n17.addNode(n23); }
         { n16.addNode(n17); }
      )*
      { n16.nodes.trimToSize(); }
      { n4.addNode(n16); }
      { n3.addNode(n4); }
   )?
   n27=<INTO> { n26 = JTBToolkit.makeNodeToken(n27); }
   (
      { n31 = new NodeOptional(); }
      { n39 = new NodeOptional(); }
      { n47 = new NodeOptional(); }
      { n29 = new NodeSequence(4); }
      n30=Identifier()
      { n29.addNode(n30); }
      (
         { n35 = new NodeOptional(); }
         { n32 = new NodeSequence(3); }
         n34=<DELIMITER> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n32.addNode(n33); }
         (
            n37=<IN> { n36 = JTBToolkit.makeNodeToken(n37); }
            { n35.addNode(n36); }
         )?
         { n32.addNode(n35); }
         n38=Identifier()
         { n32.addNode(n38); }
         { n31.addNode(n32); }
      )?
      { n29.addNode(n31); }
      (
         { n43 = new NodeOptional(); }
         { n40 = new NodeSequence(3); }
         n42=<COUNT> { n41 = JTBToolkit.makeNodeToken(n42); }
         { n40.addNode(n41); }
         (
            n45=<IN> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n43.addNode(n44); }
         )?
         { n40.addNode(n43); }
         n46=Identifier()
         { n40.addNode(n46); }
         { n39.addNode(n40); }
      )?
      { n29.addNode(n39); }
      (
         n49=<COMMACHAR> { n48 = JTBToolkit.makeNodeToken(n49); }
         { n47.addNode(n48); }
      )?
      { n29.addNode(n47); }
      { n28.addNode(n29); }
   )+
   { n28.nodes.trimToSize(); }
   (
      { n52 = new NodeOptional(); }
      { n51 = new NodeSequence(3); }
      (
         n54=<WITH> { n53 = JTBToolkit.makeNodeToken(n54); }
         { n52.addNode(n53); }
      )?
      { n51.addNode(n52); }
      n56=<POINTER> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n51.addNode(n55); }
      n57=QualifiedDataName()
      { n51.addNode(n57); }
      { n50.addNode(n51); }
   )?
   (
      { n62 = new NodeOptional(); }
      { n59 = new NodeSequence(3); }
      n61=<TALLYING> { n60 = JTBToolkit.makeNodeToken(n61); }
      { n59.addNode(n60); }
      (
         n64=<IN> { n63 = JTBToolkit.makeNodeToken(n64); }
         { n62.addNode(n63); }
      )?
      { n59.addNode(n62); }
      n65=QualifiedDataName()
      { n59.addNode(n65); }
      { n58.addNode(n59); }
   )?
   (
      { n68 = new NodeOptional(); }
      { n67 = new NodeSequence(3); }
      (
         n70=<ON> { n69 = JTBToolkit.makeNodeToken(n70); }
         { n68.addNode(n69); }
      )?
      { n67.addNode(n68); }
      n72=<OVERFLOW> { n71 = JTBToolkit.makeNodeToken(n72); }
      { n67.addNode(n71); }
      n73=StatementList()
      { n67.addNode(n73); }
      { n66.addNode(n67); }
   )?
   (
      { n78 = new NodeOptional(); }
      { n75 = new NodeSequence(4); }
      n77=<NOT> { n76 = JTBToolkit.makeNodeToken(n77); }
      { n75.addNode(n76); }
      (
         n80=<ON> { n79 = JTBToolkit.makeNodeToken(n80); }
         { n78.addNode(n79); }
      )?
      { n75.addNode(n78); }
      n82=<OVERFLOW> { n81 = JTBToolkit.makeNodeToken(n82); }
      { n75.addNode(n81); }
      n83=StatementList()
      { n75.addNode(n83); }
      { n74.addNode(n75); }
   )?
   (
      n86=<END_UNSTRING> { n85 = JTBToolkit.makeNodeToken(n86); }
      { n84.addNode(n85); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new UnstringStatement();} 
   { return new UnstringStatement(n0,n2,n3,n26,n28,n50,n58,n66,n74,n84); }
}

UseStatement UseStatement() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   NodeList n13 = new NodeList();
   NodeChoice n14;
   Identifier n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22;
   NodeToken n23;
   Token n24;
   Identifier n25;
   FileName n26;
   ProcedureName n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeSequence n33;
   NodeOptional n34 = new NodeOptional();
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeOptional n39 = new NodeOptional();
   NodeToken n40;
   Token n41;
   NodeChoice n42;
   NodeChoice n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeSequence n48;
   NodeOptional n49 = new NodeOptional();
   NodeChoice n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeOptional n55 = new NodeOptional();
   NodeChoice n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeOptional n67 = new NodeOptional();
   NodeToken n68;
   Token n69;
   NodeChoice n70;
   NodeList n71 = new NodeList();
   NodeSequence n72;
   FileName n73;
   NodeOptional n74;
   NodeToken n75;
   Token n76;
   NodeToken n77;
   Token n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;

   
}
{
try {
   n1=<USE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(4); }
         (
            n6=<FOR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n8=<DEBUGGING> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         (
            n11=<ON> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n9.addNode(n10); }
         )?
         { n3.addNode(n9); }
         (
            (
               (
                  { n19 = new NodeOptional(); }
                  { n22 = new NodeOptional(); }
                  (
                     n15=Identifier()
                     { n14 = new NodeChoice(n15, 0); }
                  |
                     { n16 = new NodeSequence(4); }
                     n18=<ALL> { n17 = JTBToolkit.makeNodeToken(n18); }
                     { n16.addNode(n17); }
                     (
                        n21=<REFERENCES> { n20 = JTBToolkit.makeNodeToken(n21); }
                        { n19.addNode(n20); }
                     )?
                     { n16.addNode(n19); }
                     (
                        n24=<OF> { n23 = JTBToolkit.makeNodeToken(n24); }
                        { n22.addNode(n23); }
                     )?
                     { n16.addNode(n22); }
                     n25=Identifier()
                     { n16.addNode(n25); }
                     { n14 = new NodeChoice(n16, 1); }
                  |
                     n26=FileName()
                     { n14 = new NodeChoice(n26, 2); }
                  |
                     n27=ProcedureName()
                     { n14 = new NodeChoice(n27, 3); }
                  )
                  { n13.addNode(n14); }
               )+
               { n13.nodes.trimToSize(); }
               { n12 = new NodeChoice(n13, 0); }
            |
               { n28 = new NodeSequence(2); }
               n30=<ALL> { n29 = JTBToolkit.makeNodeToken(n30); }
               { n28.addNode(n29); }
               n32=<PROCEDURES> { n31 = JTBToolkit.makeNodeToken(n32); }
               { n28.addNode(n31); }
               { n12 = new NodeChoice(n28, 1); }
            )
            
         )
         { n3.addNode(n12); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n33 = new NodeSequence(7); }
         (
            n36=<GLOBAL> { n35 = JTBToolkit.makeNodeToken(n36); }
            { n34.addNode(n35); }
         )?
         { n33.addNode(n34); }
         n38=<AFTER> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n33.addNode(n37); }
         (
            n41=<STANDARD> { n40 = JTBToolkit.makeNodeToken(n41); }
            { n39.addNode(n40); }
         )?
         { n33.addNode(n39); }
         (
            (
               (
                  (
                     n45=<EXCEPTION> { n44 = JTBToolkit.makeNodeToken(n45); }
                     { n43 = new NodeChoice(n44, 0); }
                  |
                     n47=<ERROR> { n46 = JTBToolkit.makeNodeToken(n47); }
                     { n43 = new NodeChoice(n46, 1); }
                  )
                  
               )
               { n42 = new NodeChoice(n43, 0); }
            |
               { n48 = new NodeSequence(3); }
               (
                  (
                     (
                        n52=<BEGINNING> { n51 = JTBToolkit.makeNodeToken(n52); }
                        { n50 = new NodeChoice(n51, 0); }
                     |
                        n54=<ENDING> { n53 = JTBToolkit.makeNodeToken(n54); }
                        { n50 = new NodeChoice(n53, 1); }
                     )
                     
                  )
                  { n49.addNode(n50); }
               )?
               { n48.addNode(n49); }
               (
                  (
                     (
                        n58=<FILE> { n57 = JTBToolkit.makeNodeToken(n58); }
                        { n56 = new NodeChoice(n57, 0); }
                     |
                        n60=<REEL> { n59 = JTBToolkit.makeNodeToken(n60); }
                        { n56 = new NodeChoice(n59, 1); }
                     |
                        n62=<UNIT> { n61 = JTBToolkit.makeNodeToken(n62); }
                        { n56 = new NodeChoice(n61, 2); }
                     )
                     
                  )
                  { n55.addNode(n56); }
               )?
               { n48.addNode(n55); }
               n64=<LABEL> { n63 = JTBToolkit.makeNodeToken(n64); }
               { n48.addNode(n63); }
               { n42 = new NodeChoice(n48, 1); }
            )
            
         )
         { n33.addNode(n42); }
         n66=<PROCEDURE> { n65 = JTBToolkit.makeNodeToken(n66); }
         { n33.addNode(n65); }
         (
            n69=<ON> { n68 = JTBToolkit.makeNodeToken(n69); }
            { n67.addNode(n68); }
         )?
         { n33.addNode(n67); }
         (
            (
               (
                  { n74 = new NodeOptional(); }
                  { n72 = new NodeSequence(2); }
                  n73=FileName()
                  { n72.addNode(n73); }
                  (
                     n76=<COMMACHAR> { n75 = JTBToolkit.makeNodeToken(n76); }
                     { n74.addNode(n75); }
                  )?
                  { n72.addNode(n74); }
                  { n71.addNode(n72); }
               )+
               { n71.nodes.trimToSize(); }
               { n70 = new NodeChoice(n71, 0); }
            |
               n78=<INPUT> { n77 = JTBToolkit.makeNodeToken(n78); }
               { n70 = new NodeChoice(n77, 1); }
            |
               n80=<OUTPUT> { n79 = JTBToolkit.makeNodeToken(n80); }
               { n70 = new NodeChoice(n79, 2); }
            |
               n82=<I_O> { n81 = JTBToolkit.makeNodeToken(n82); }
               { n70 = new NodeChoice(n81, 3); }
            |
               n84=<EXTEND> { n83 = JTBToolkit.makeNodeToken(n84); }
               { n70 = new NodeChoice(n83, 4); }
            )
            
         )
         { n33.addNode(n70); }
         { n2 = new NodeChoice(n33, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new UseStatement();} 
   { return new UseStatement(n0,n2); }
}

WriteStatement WriteStatement() :
{
   NodeToken n0;
   Token n1;
   RecordName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   Identifier n8;
   Literal n9;
   NodeOptional n10 = new NodeOptional();
   AdvancingPhrase n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeOptional n14;
   NodeToken n15;
   Token n16;
   NodeChoice n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   StatementList n22;
   NodeOptional n23 = new NodeOptional();
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   NodeToken n28;
   Token n29;
   NodeChoice n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   StatementList n35;
   NodeOptional n36 = new NodeOptional();
   NodeSequence n37;
   NodeToken n38;
   Token n39;
   NodeOptional n40;
   NodeToken n41;
   Token n42;
   StatementList n43;
   NodeOptional n44 = new NodeOptional();
   NodeSequence n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeOptional n50;
   NodeToken n51;
   Token n52;
   StatementList n53;
   NodeOptional n54 = new NodeOptional();
   NodeToken n55;
   Token n56;

   
}
{
try {
   n1=<WRITE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RecordName()
   (
      { n4 = new NodeSequence(2); }
      n6=<FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         (
            n8=Identifier()
            { n7 = new NodeChoice(n8, 0); }
         |
            n9=Literal()
            { n7 = new NodeChoice(n9, 1); }
         )
         
      )
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   (
      n11=AdvancingPhrase()
      { n10.addNode(n11); }
   )?
   (
      { n14 = new NodeOptional(); }
      { n13 = new NodeSequence(3); }
      (
         n16=<AT> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
      )?
      { n13.addNode(n14); }
      (
         (
            n19=<END_OF_PAGE> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17 = new NodeChoice(n18, 0); }
         |
            n21=<EOP> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n17 = new NodeChoice(n20, 1); }
         )
         
      )
      { n13.addNode(n17); }
      n22=StatementList()
      { n13.addNode(n22); }
      { n12.addNode(n13); }
   )?
   (
      { n27 = new NodeOptional(); }
      { n24 = new NodeSequence(4); }
      n26=<NOT> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n24.addNode(n25); }
      (
         n29=<AT> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n27.addNode(n28); }
      )?
      { n24.addNode(n27); }
      (
         (
            n32=<END_OF_PAGE> { n31 = JTBToolkit.makeNodeToken(n32); }
            { n30 = new NodeChoice(n31, 0); }
         |
            n34=<EOP> { n33 = JTBToolkit.makeNodeToken(n34); }
            { n30 = new NodeChoice(n33, 1); }
         )
         
      )
      { n24.addNode(n30); }
      n35=StatementList()
      { n24.addNode(n35); }
      { n23.addNode(n24); }
   )?
   (
      { n40 = new NodeOptional(); }
      { n37 = new NodeSequence(3); }
      n39=<INVALID> { n38 = JTBToolkit.makeNodeToken(n39); }
      { n37.addNode(n38); }
      (
         n42=<KEY> { n41 = JTBToolkit.makeNodeToken(n42); }
         { n40.addNode(n41); }
      )?
      { n37.addNode(n40); }
      n43=StatementList()
      { n37.addNode(n43); }
      { n36.addNode(n37); }
   )?
   (
      { n50 = new NodeOptional(); }
      { n45 = new NodeSequence(4); }
      n47=<NOT> { n46 = JTBToolkit.makeNodeToken(n47); }
      { n45.addNode(n46); }
      n49=<INVALID> { n48 = JTBToolkit.makeNodeToken(n49); }
      { n45.addNode(n48); }
      (
         n52=<KEY> { n51 = JTBToolkit.makeNodeToken(n52); }
         { n50.addNode(n51); }
      )?
      { n45.addNode(n50); }
      n53=StatementList()
      { n45.addNode(n53); }
      { n44.addNode(n45); }
   )?
   (
      n56=<END_WRITE> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n54.addNode(n55); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new WriteStatement();} 
   { return new WriteStatement(n0,n2,n3,n10,n12,n23,n36,n44,n54); }
}

AdvancingPhrase AdvancingPhrase() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeChoice n12;
   Identifier n13;
   IntegerConstant n14;
   FigurativeConstant n15;
   NodeOptional n16 = new NodeOptional();
   NodeChoice n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   MnemonicName n22;

   
}
{
try {
   (
      (
         n2=<BEFORE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<AFTER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<ADVANCING> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      (
         n10=<PAGE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8 = new NodeChoice(n9, 0); }
      |
         { n11 = new NodeSequence(2); }
         (
            (
               n13=Identifier()
               { n12 = new NodeChoice(n13, 0); }
            |
               n14=IntegerConstant()
               { n12 = new NodeChoice(n14, 1); }
            |
               n15=FigurativeConstant()
               { n12 = new NodeChoice(n15, 2); }
            )
            
         )
         { n11.addNode(n12); }
         (
            (
               (
                  n19=<LINE> { n18 = JTBToolkit.makeNodeToken(n19); }
                  { n17 = new NodeChoice(n18, 0); }
               |
                  n21=<LINES> { n20 = JTBToolkit.makeNodeToken(n21); }
                  { n17 = new NodeChoice(n20, 1); }
               )
               
            )
            { n16.addNode(n17); }
         )?
         { n11.addNode(n16); }
         { n8 = new NodeChoice(n11, 1); }
      |
         n22=MnemonicName()
         { n8 = new NodeChoice(n22, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new AdvancingPhrase();} 
   { return new AdvancingPhrase(n0,n5,n8); }
}

S_Identifier S_Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<S_IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new S_Identifier();} 
   { return new S_Identifier(n0); }
}

S_Quoted_Identifier S_Quoted_Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<S_QUOTED_IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new S_Quoted_Identifier();} 
   { return new S_Quoted_Identifier(n0); }
}

S_Char_Literal S_Char_Literal() :
{
   NodeToken n0;
   Token n1;

   
}
{
try {
   n1=<S_CHAR_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new S_Char_Literal();} 
   { return new S_Char_Literal(n0); }
}

SQLStatement SQLStatement() :
{
   NodeChoice n0;
   SQLCloseStatement n1;
   CommitStatement n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   SQLUsingDMLReturn n5;
   NodeChoice n6;
   SQLDeleteStatement n7;
   InsertStatement n8;
   UpdateStatement n9;
   FetchStatement n10;
   LockTableStatement n11;
   SQLOpenStatement n12;
   RollbackStatement n13;
   SavepointStatement n14;
   QueryStatement n15;
   SQLSetStatement n16;

   
}
{
try {
   (
      LOOKAHEAD(SQLCloseStatement())
      n1=SQLCloseStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(CommitStatement())
      n2=CommitStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD([ SQLUsingDMLReturn() ] ( SQLDeleteStatement() | InsertStatement() | UpdateStatement() ))
      { n3 = new NodeSequence(3); }
      (
         n5=SQLUsingDMLReturn()
         { n4.addNode(n5); }
      )?
      { n3.addNode(n4); }
      (
         (
            n7=SQLDeleteStatement()
            { n6 = new NodeChoice(n7, 0); }
         |
            n8=InsertStatement()
            { n6 = new NodeChoice(n8, 1); }
         |
            n9=UpdateStatement()
            { n6 = new NodeChoice(n9, 2); }
         )
         
      )
      { n3.addNode(n6); }
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(FetchStatement())
      n10=FetchStatement()
      { n0 = new NodeChoice(n10, 3); }
   |
      LOOKAHEAD(LockTableStatement())
      n11=LockTableStatement()
      { n0 = new NodeChoice(n11, 4); }
   |
      LOOKAHEAD(SQLOpenStatement())
      n12=SQLOpenStatement()
      { n0 = new NodeChoice(n12, 5); }
   |
      LOOKAHEAD(RollbackStatement())
      n13=RollbackStatement()
      { n0 = new NodeChoice(n13, 6); }
   |
      LOOKAHEAD(SavepointStatement())
      n14=SavepointStatement()
      { n0 = new NodeChoice(n14, 7); }
   |
      LOOKAHEAD(QueryStatement())
      n15=QueryStatement()
      { n0 = new NodeChoice(n15, 8); }
   |
      LOOKAHEAD(SQLSetStatement())
      n16=SQLSetStatement()
      { n0 = new NodeChoice(n16, 9); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLStatement();} 
   { return new SQLStatement(n0); }
}

SQLCloseStatement SQLCloseStatement() :
{
   NodeToken n0;
   Token n1;
   RelObjectName n2;

   
}
{
try {
   n1=<K_CLOSE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelObjectName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLCloseStatement();} 
   { return new SQLCloseStatement(n0,n2); }
}

CommitStatement CommitStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   S_Char_Literal n9;

   
}
{
try {
   n1=<K_COMMIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<K_WORK> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      { n6 = new NodeSequence(2); }
      n8=<K_COMMENT> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=S_Char_Literal()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new CommitStatement();} 
   { return new CommitStatement(n0,n2,n5); }
}

FetchStatement FetchStatement() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   RelObjectName n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeSequence n10;
   RelObjectName n11;
   NodeToken n12;
   Token n13;
   NodeChoice n14;
   NodeSequence n15;
   RelObjectName n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeOptional n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   IndicatorBind n24;
   NodeListOptional n25 = new NodeListOptional();
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeChoice n29;
   NodeSequence n30;
   RelObjectName n31;
   NodeOptional n32;
   NodeSequence n33;
   NodeOptional n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   IndicatorBind n39;

   
}
{
try {
   (
      { n1 = new NodeSequence(2); }
      n3=<K_FOR> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         (
            n5=RelObjectName()
            { n4 = new NodeChoice(n5, 0); }
         |
            n7=<S_BIND> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n4 = new NodeChoice(n6, 1); }
         )
         
      )
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )?
   n9=<K_FETCH> { n8 = JTBToolkit.makeNodeToken(n9); }
   (
      { n10 = new NodeSequence(1); }
      n11=RelObjectName()
      { n10.addNode(n11); }
      
   )
   n13=<K_INTO> { n12 = JTBToolkit.makeNodeToken(n13); }
   (
      (
         { n15 = new NodeSequence(2); }
         n16=RelObjectName()
         { n15.addNode(n16); }
         (
            { n19 = new NodeOptional(); }
            { n18 = new NodeSequence(2); }
            (
               n21=<K_INDICATOR> { n20 = JTBToolkit.makeNodeToken(n21); }
               { n19.addNode(n20); }
            )?
            { n18.addNode(n19); }
            n23=<S_BIND> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n18.addNode(n22); }
            { n17.addNode(n18); }
         )?
         { n15.addNode(n17); }
         { n14 = new NodeChoice(n15, 0); }
      |
         n24=IndicatorBind()
         { n14 = new NodeChoice(n24, 1); }
      )
      
   )
   (
      { n32 = new NodeOptional(); }
      { n26 = new NodeSequence(2); }
      n28=<COMMACHAR> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n26.addNode(n27); }
      (
         (
            { n30 = new NodeSequence(2); }
            n31=RelObjectName()
            { n30.addNode(n31); }
            (
               { n34 = new NodeOptional(); }
               { n33 = new NodeSequence(2); }
               (
                  n36=<K_INDICATOR> { n35 = JTBToolkit.makeNodeToken(n36); }
                  { n34.addNode(n35); }
               )?
               { n33.addNode(n34); }
               n38=<S_BIND> { n37 = JTBToolkit.makeNodeToken(n38); }
               { n33.addNode(n37); }
               { n32.addNode(n33); }
            )?
            { n30.addNode(n32); }
            { n29 = new NodeChoice(n30, 0); }
         |
            n39=IndicatorBind()
            { n29 = new NodeChoice(n39, 1); }
         )
         
      )
      { n26.addNode(n29); }
      { n25.addNode(n26); }
   )*
   { n25.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new FetchStatement();} 
   { return new FetchStatement(n0,n8,n10,n12,n14,n25); }
}

IndicatorBind IndicatorBind() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeOptional n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
try {
   n1=<S_BIND> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n4 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         n6=<K_INDICATOR> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n3.addNode(n4); }
      n8=<S_BIND> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new IndicatorBind();} 
   { return new IndicatorBind(n0,n2); }
}

LockTableStatement LockTableStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableReference n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableReference n9;
   NodeToken n10;
   Token n11;
   LockMode n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15 = new NodeOptional();
   NodeToken n16;
   Token n17;

   
}
{
try {
   n1=<K_LOCK> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<K_TABLE> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableReference()
   (
      { n6 = new NodeSequence(2); }
      n8=<COMMACHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=TableReference()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n11=<K_IN> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=LockMode()
   n14=<K_MODE> { n13 = JTBToolkit.makeNodeToken(n14); }
   (
      n17=<K_NOWAIT> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new LockTableStatement();} 
   { return new LockTableStatement(n0,n2,n4,n5,n10,n12,n13,n15); }
}

SQLOpenStatement SQLOpenStatement() :
{
   NodeToken n0;
   Token n1;
   RelObjectName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Arguments n7;

   
}
{
try {
   n1=<K_OPEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelObjectName()
   (
      { n4 = new NodeSequence(2); }
      n6=<K_USING> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Arguments()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLOpenStatement();} 
   { return new SQLOpenStatement(n0,n2,n3); }
}

RollbackStatement RollbackStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9;
   NodeToken n10;
   Token n11;
   RelObjectName n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   S_Char_Literal n17;

   
}
{
try {
   n1=<K_ROLLBACK> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<K_WORK> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   (
      { n9 = new NodeOptional(); }
      { n6 = new NodeSequence(3); }
      n8=<K_TO> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      (
         n11=<K_SAVEPOINT> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
      )?
      { n6.addNode(n9); }
      n12=RelObjectName()
      { n6.addNode(n12); }
      { n5.addNode(n6); }
   )?
   (
      { n14 = new NodeSequence(2); }
      n16=<K_COMMENT> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n17=S_Char_Literal()
      { n14.addNode(n17); }
      { n13.addNode(n14); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new RollbackStatement();} 
   { return new RollbackStatement(n0,n2,n5,n13); }
}

SetTransactionStatement SetTransactionStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   RelObjectName n20;

   
}
{
try {
   n1=<K_SET> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<K_TRANSACTION> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         (
            { n5 = new NodeSequence(2); }
            n7=<K_READ> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5.addNode(n6); }
            (
               (
                  n10=<K_ONLY> { n9 = JTBToolkit.makeNodeToken(n10); }
                  { n8 = new NodeChoice(n9, 0); }
               |
                  n12=<K_WRITE> { n11 = JTBToolkit.makeNodeToken(n12); }
                  { n8 = new NodeChoice(n11, 1); }
               )
               
            )
            { n5.addNode(n8); }
            
         )
         { n4 = new NodeChoice(n5, 0); }
      |
         (
            { n13 = new NodeSequence(4); }
            n15=<K_USE> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13.addNode(n14); }
            n17=<K_ROLLBACK> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n13.addNode(n16); }
            n19=<K_SEGMENT> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n13.addNode(n18); }
            n20=RelObjectName()
            { n13.addNode(n20); }
            
         )
         { n4 = new NodeChoice(n13, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SetTransactionStatement();} 
   { return new SetTransactionStatement(n0,n2,n4); }
}

SetVariableStatement SetVariableStatement() :
{
   NodeToken n0;
   Token n1;
   RelObjectName n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Arguments n8;

   
}
{
try {
   n1=<K_SET> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelObjectName()
   (
      (
         n5=<K_TO> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7="=" { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      
   )
   n8=Arguments()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SetVariableStatement();} 
   { return new SetVariableStatement(n0,n2,n3,n8); }
}

SQLSetStatement SQLSetStatement() :
{
   NodeChoice n0;
   SetTransactionStatement n1;
   SetVariableStatement n2;

   
}
{
try {
   (
      LOOKAHEAD(SetTransactionStatement())
      n1=SetTransactionStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SetVariableStatement()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLSetStatement();} 
   { return new SQLSetStatement(n0); }
}

LockMode LockMode() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<K_ROW> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            (
               n6=<K_SHARE> { n5 = JTBToolkit.makeNodeToken(n6); }
               { n4 = new NodeChoice(n5, 0); }
            |
               n8=<K_EXCLUSIVE> { n7 = JTBToolkit.makeNodeToken(n8); }
               { n4 = new NodeChoice(n7, 1); }
            )
            
         )
         { n1.addNode(n4); }
         
      )
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         { n9 = new NodeSequence(2); }
         n11=<K_SHARE> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         (
            (
               n15=<K_UPDATE> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n13 = new NodeChoice(n14, 0); }
            |
               (
                  { n16 = new NodeSequence(2); }
                  n18=<K_ROW> { n17 = JTBToolkit.makeNodeToken(n18); }
                  { n16.addNode(n17); }
                  n20=<K_EXCLUSIVE> { n19 = JTBToolkit.makeNodeToken(n20); }
                  { n16.addNode(n19); }
                  
               )
               { n13 = new NodeChoice(n16, 1); }
            )
            { n12.addNode(n13); }
         )?
         { n9.addNode(n12); }
         
      )
      { n0 = new NodeChoice(n9, 1); }
   |
      (
         { n21 = new NodeSequence(1); }
         n23=<K_EXCLUSIVE> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
         
      )
      { n0 = new NodeChoice(n21, 2); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new LockMode();} 
   { return new LockMode(n0); }
}

SavepointStatement SavepointStatement() :
{
   NodeToken n0;
   Token n1;
   RelObjectName n2;

   
}
{
try {
   n1=<K_SAVEPOINT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelObjectName()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SavepointStatement();} 
   { return new SavepointStatement(n0,n2); }
}

UpdateStatement UpdateStatement() :
{
   NodeToken n0;
   Token n1;
   TableReference n2;
   NodeOptional n3 = new NodeOptional();
   RelObjectName n4;
   NodeToken n5;
   Token n6;
   ColumnValues n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   SQLExpression n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   RelObjectName n19;

   
}
{
try {
   n1=<K_UPDATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TableReference()
   (
      n4=RelObjectName()
      { n3.addNode(n4); }
   )?
   n6=<K_SET> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=ColumnValues()
   (
      { n9 = new NodeSequence(2); }
      n11=<K_WHERE> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         (
            n13=SQLExpression()
            { n12 = new NodeChoice(n13, 0); }
         |
            { n14 = new NodeSequence(3); }
            n16=<K_CURRENT> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
            n18=<K_OF> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n14.addNode(n17); }
            n19=RelObjectName()
            { n14.addNode(n19); }
            { n12 = new NodeChoice(n14, 1); }
         )
         
      )
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new UpdateStatement();} 
   { return new UpdateStatement(n0,n2,n3,n5,n7,n8); }
}

ColumnValues ColumnValues() :
{
   TableColumn n0;
   NodeToken n1;
   Token n2;
   UpdatedValue n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   TableColumn n8;
   NodeToken n9;
   Token n10;
   UpdatedValue n11;

   
}
{
try {
   n0=TableColumn()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=UpdatedValue()
   (
      { n5 = new NodeSequence(4); }
      n7=<COMMACHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=TableColumn()
      { n5.addNode(n8); }
      n10="=" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n5.addNode(n9); }
      n11=UpdatedValue()
      { n5.addNode(n11); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ColumnValues();} 
   { return new ColumnValues(n0,n1,n3,n4); }
}

UpdatedValue UpdatedValue() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SelectStatement n4;
   NodeToken n5;
   Token n6;
   PlSqlExpression n7;

   
}
{
try {
   (
      LOOKAHEAD(( <LPARENCHAR> )+ <K_SELECT>)
      { n1 = new NodeSequence(4); }
      n3=<LPARENCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=SelectStatement()
      { n1.addNode(n4); }
      n6=<RPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n7=PlSqlExpression()
      { n0 = new NodeChoice(n7, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new UpdatedValue();} 
   { return new UpdatedValue(n0); }
}

InsertStatement InsertStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableReference n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableColumn n9;
   NodeListOptional n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   TableColumn n14;
   NodeToken n15;
   Token n16;
   NodeChoice n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   PlSqlExpressionList n23;
   NodeToken n24;
   Token n25;
   SelectStatement n26;

   
}
{
try {
   n1=<K_INSERT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<K_INTO> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableReference()
   (
      { n10 = new NodeListOptional(); }
      { n6 = new NodeSequence(4); }
      n8=<LPARENCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=TableColumn()
      { n6.addNode(n9); }
      (
         { n11 = new NodeSequence(2); }
         n13=<COMMACHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n14=TableColumn()
         { n11.addNode(n14); }
         { n10.addNode(n11); }
      )*
      { n10.nodes.trimToSize(); }
      { n6.addNode(n10); }
      n16=<RPARENCHAR> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n6.addNode(n15); }
      { n5.addNode(n6); }
   )?
   (
      (
         { n18 = new NodeSequence(4); }
         n20=<K_VALUES> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18.addNode(n19); }
         n22=<LPARENCHAR> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n18.addNode(n21); }
         n23=PlSqlExpressionList()
         { n18.addNode(n23); }
         n25=<RPARENCHAR> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n18.addNode(n24); }
         { n17 = new NodeChoice(n18, 0); }
      |
         n26=SelectStatement()
         { n17 = new NodeChoice(n26, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new InsertStatement();} 
   { return new InsertStatement(n0,n2,n4,n5,n17); }
}

SQLUsingDMLReturn SQLUsingDMLReturn() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
try {
   n1=<K_USING> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<S_IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<S_BIND> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLUsingDMLReturn();} 
   { return new SQLUsingDMLReturn(n0,n2); }
}

SQLDeleteStatement SQLDeleteStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   TableReference n5;
   NodeOptional n6 = new NodeOptional();
   RelObjectName n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeChoice n12;
   SQLExpression n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   RelObjectName n19;

   
}
{
try {
   n1=<K_DELETE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<K_FROM> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=TableReference()
   (
      n7=RelObjectName()
      { n6.addNode(n7); }
   )?
   (
      { n9 = new NodeSequence(2); }
      n11=<K_WHERE> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      (
         (
            n13=SQLExpression()
            { n12 = new NodeChoice(n13, 0); }
         |
            { n14 = new NodeSequence(3); }
            n16=<K_CURRENT> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
            n18=<K_OF> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n14.addNode(n17); }
            n19=RelObjectName()
            { n14.addNode(n19); }
            { n12 = new NodeChoice(n14, 1); }
         )
         
      )
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLDeleteStatement();} 
   { return new SQLDeleteStatement(n0,n2,n5,n6,n8); }
}

QueryStatement QueryStatement() :
{
   SelectStatement n0;

   
}
{
try {
   n0=SelectStatement()
   
} catch(ParseException e) {
	error_skipto(DOT); return new QueryStatement();} 
   { return new QueryStatement(n0); }
}

PlSqlExpression PlSqlExpression() :
{
   PlSqlExpressions n0;

   
}
{
try {
   n0=PlSqlExpressions()
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlExpression();} 
   { return new PlSqlExpression(n0); }
}

PlSqlExpressions PlSqlExpressions() :
{
   NodeChoice n0;
   PlSqlOrExpression n1;
   PlSqlAndExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(PlSqlOrExpression())
      n1=PlSqlOrExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlSqlAndExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlExpressions();} 
   { return new PlSqlExpressions(n0); }
}

PlSqlOrExpression PlSqlOrExpression() :
{
   PlSqlAndExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   PlSqlAndExpressions n5;

   
}
{
try {
   n0=PlSqlAndExpressions()
   (
      { n2 = new NodeSequence(2); }
      n4=<K_OR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=PlSqlAndExpressions()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlOrExpression();} 
   { return new PlSqlOrExpression(n0,n1); }
}

PlSqlAndExpressions PlSqlAndExpressions() :
{
   NodeChoice n0;
   PlSqlAndExpression n1;
   PlSqlUnaryLogicalExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(PlSqlAndExpression())
      n1=PlSqlAndExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlSqlUnaryLogicalExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlAndExpressions();} 
   { return new PlSqlAndExpressions(n0); }
}

PlSqlAndExpression PlSqlAndExpression() :
{
   PlSqlUnaryLogicalExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   PlSqlUnaryLogicalExpressions n5;

   
}
{
try {
   n0=PlSqlUnaryLogicalExpressions()
   (
      { n2 = new NodeSequence(2); }
      n4=<K_AND> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=PlSqlUnaryLogicalExpressions()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlAndExpression();} 
   { return new PlSqlAndExpression(n0,n1); }
}

PlSqlUnaryLogicalExpressions PlSqlUnaryLogicalExpressions() :
{
   NodeChoice n0;
   PlSqlUnaryLogicalExpression n1;
   PlSqlRelationalExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(PlSqlUnaryLogicalExpression())
      n1=PlSqlUnaryLogicalExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlSqlRelationalExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlUnaryLogicalExpressions();} 
   { return new PlSqlUnaryLogicalExpressions(n0); }
}

PlSqlUnaryLogicalExpression PlSqlUnaryLogicalExpression() :
{
   NodeToken n0;
   Token n1;
   PlSqlRelationalExpressions n2;

   
}
{
try {
   n1=<K_NOT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PlSqlRelationalExpressions()
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlUnaryLogicalExpression();} 
   { return new PlSqlUnaryLogicalExpression(n0,n2); }
}

PlSqlRelationalExpressions PlSqlRelationalExpressions() :
{
   NodeChoice n0;
   PlSqlRelationalExpression n1;
   PlSqlSimpleExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(PlSqlRelationalExpression())
      n1=PlSqlRelationalExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlSqlSimpleExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlRelationalExpressions();} 
   { return new PlSqlRelationalExpressions(n0); }
}

PlSqlRelationalExpression PlSqlRelationalExpression() :
{
   PlSqlSimpleExpressions n0;
   NodeChoice n1;
   NodeSequence n2;
   Relop n3;
   PlSqlSimpleExpressions n4;
   PlSqlInClause n5;
   PlSqlBetweenClause n6;
   PlSqlLikeClause n7;
   IsNullClause n8;

   
}
{
try {
   n0=PlSqlSimpleExpressions()
   (
      (
         { n2 = new NodeSequence(2); }
         n3=Relop()
         { n2.addNode(n3); }
         n4=PlSqlSimpleExpressions()
         { n2.addNode(n4); }
         { n1 = new NodeChoice(n2, 0); }
      |
         LOOKAHEAD(2)
         n5=PlSqlInClause()
         { n1 = new NodeChoice(n5, 1); }
      |
         LOOKAHEAD(2)
         n6=PlSqlBetweenClause()
         { n1 = new NodeChoice(n6, 2); }
      |
         LOOKAHEAD(2)
         n7=PlSqlLikeClause()
         { n1 = new NodeChoice(n7, 3); }
      |
         n8=IsNullClause()
         { n1 = new NodeChoice(n8, 4); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlRelationalExpression();} 
   { return new PlSqlRelationalExpression(n0,n1); }
}

PlSqlExpressionList PlSqlExpressionList() :
{
   PlSqlExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   PlSqlExpression n5;

   
}
{
try {
   n0=PlSqlExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMACHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=PlSqlExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlExpressionList();} 
   { return new PlSqlExpressionList(n0,n1); }
}

PlSqlInClause PlSqlInClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   PlSqlExpressionList n7;
   NodeToken n8;
   Token n9;

   
}
{
try {
   (
      n2=<K_NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<K_IN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<LPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=PlSqlExpressionList()
   n9=<RPARENCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlInClause();} 
   { return new PlSqlInClause(n0,n3,n5,n7,n8); }
}

PlSqlBetweenClause PlSqlBetweenClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   PlSqlSimpleExpressions n5;
   NodeToken n6;
   Token n7;
   PlSqlSimpleExpressions n8;

   
}
{
try {
   (
      n2=<K_NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<K_BETWEEN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=PlSqlSimpleExpressions()
   n7=<K_AND> { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=PlSqlSimpleExpressions()
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlBetweenClause();} 
   { return new PlSqlBetweenClause(n0,n3,n5,n6,n8); }
}

PlSqlLikeClause PlSqlLikeClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   PlSqlSimpleExpressions n5;

   
}
{
try {
   (
      n2=<K_NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<K_LIKE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=PlSqlSimpleExpressions()
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlLikeClause();} 
   { return new PlSqlLikeClause(n0,n3,n5); }
}

IsNullClause IsNullClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
try {
   n1=<K_IS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<K_NOT> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<K_NULL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new IsNullClause();} 
   { return new IsNullClause(n0,n2,n5); }
}

PlSqlSimpleExpression PlSqlSimpleExpression() :
{
   PlSqlSimpleExpressions n0;

   
}
{
try {
   n0=PlSqlSimpleExpressions()
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlSimpleExpression();} 
   { return new PlSqlSimpleExpression(n0); }
}

PlSqlSimpleExpressions PlSqlSimpleExpressions() :
{
   NodeChoice n0;
   PlSqlAdditiveExpression n1;
   PlSqlMultiplicativeExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(PlSqlAdditiveExpression())
      n1=PlSqlAdditiveExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlSqlMultiplicativeExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlSimpleExpressions();} 
   { return new PlSqlSimpleExpressions(n0); }
}

PlSqlAdditiveExpression PlSqlAdditiveExpression() :
{
   PlSqlMultiplicativeExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeChoice n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   PlSqlMultiplicativeExpressions n16;

   
}
{
try {
   n0=PlSqlMultiplicativeExpressions()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            (
               (
                  n6=<PLUSCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
                  { n4 = new NodeChoice(n5, 0); }
               |
                  n8=<PLUSCHAR_SUBS> { n7 = JTBToolkit.makeNodeToken(n8); }
                  { n4 = new NodeChoice(n7, 1); }
               )
               
            )
            { n3 = new NodeChoice(n4, 0); }
         |
            (
               (
                  n11=<MINUSCHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
                  { n9 = new NodeChoice(n10, 0); }
               |
                  n13=<MINUSCHAR_SUBS> { n12 = JTBToolkit.makeNodeToken(n13); }
                  { n9 = new NodeChoice(n12, 1); }
               )
               
            )
            { n3 = new NodeChoice(n9, 1); }
         |
            n15="||" { n14 = JTBToolkit.makeNodeToken(n15); }
            { n3 = new NodeChoice(n14, 2); }
         )
         
      )
      { n2.addNode(n3); }
      n16=PlSqlMultiplicativeExpressions()
      { n2.addNode(n16); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlAdditiveExpression();} 
   { return new PlSqlAdditiveExpression(n0,n1); }
}

PlSqlMultiplicativeExpressions PlSqlMultiplicativeExpressions() :
{
   NodeChoice n0;
   PlSqlMultiplicativeExpression n1;
   PlSqlExpotentExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(PlSqlMultiplicativeExpression())
      n1=PlSqlMultiplicativeExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlSqlExpotentExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlMultiplicativeExpressions();} 
   { return new PlSqlMultiplicativeExpressions(n0); }
}

PlSqlMultiplicativeExpression PlSqlMultiplicativeExpression() :
{
   PlSqlExpotentExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   PlSqlExpotentExpressions n8;

   
}
{
try {
   n0=PlSqlExpotentExpressions()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="*" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="/" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=PlSqlExpotentExpressions()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlMultiplicativeExpression();} 
   { return new PlSqlMultiplicativeExpression(n0,n1); }
}

PlSqlExpotentExpressions PlSqlExpotentExpressions() :
{
   NodeChoice n0;
   PlSqlExpotentExpression n1;
   PlSqlUnaryExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(PlSqlExpotentExpression())
      n1=PlSqlExpotentExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlSqlUnaryExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlExpotentExpressions();} 
   { return new PlSqlExpotentExpressions(n0); }
}

PlSqlExpotentExpression PlSqlExpotentExpression() :
{
   PlSqlUnaryExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   PlSqlUnaryExpressions n5;

   
}
{
try {
   n0=PlSqlUnaryExpressions()
   (
      { n2 = new NodeSequence(2); }
      n4=<POW> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=PlSqlUnaryExpressions()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlExpotentExpression();} 
   { return new PlSqlExpotentExpression(n0,n1); }
}

PlSqlUnaryExpressions PlSqlUnaryExpressions() :
{
   NodeChoice n0;
   PlSqlUnaryExpression n1;
   PlSqlPrimaryExpression n2;

   
}
{
try {
   (
      LOOKAHEAD(PlSqlUnaryExpression())
      n1=PlSqlUnaryExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlSqlPrimaryExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlUnaryExpressions();} 
   { return new PlSqlUnaryExpressions(n0); }
}

PlSqlUnaryExpression PlSqlUnaryExpression() :
{
   NodeSequence n0;
   NodeChoice n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   PlSqlPrimaryExpression n12;

   
}
{
try {
   (
      { n0 = new NodeSequence(2); }
      (
         (
            (
               (
                  n4=<PLUSCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
                  { n2 = new NodeChoice(n3, 0); }
               |
                  n6=<PLUSCHAR_SUBS> { n5 = JTBToolkit.makeNodeToken(n6); }
                  { n2 = new NodeChoice(n5, 1); }
               )
               
            )
            { n1 = new NodeChoice(n2, 0); }
         |
            (
               (
                  n9=<MINUSCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
                  { n7 = new NodeChoice(n8, 0); }
               |
                  n11=<MINUSCHAR_SUBS> { n10 = JTBToolkit.makeNodeToken(n11); }
                  { n7 = new NodeChoice(n10, 1); }
               )
               
            )
            { n1 = new NodeChoice(n7, 1); }
         )
         
      )
      { n0.addNode(n1); }
      n12=PlSqlPrimaryExpression()
      { n0.addNode(n12); }
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlUnaryExpression();} 
   { return new PlSqlUnaryExpression(n0); }
}

PlSqlPrimaryExpression PlSqlPrimaryExpression() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   RelObjectName n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   RelObjectName n15;
   NodeToken n16;
   Token n17;
   Arguments n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   RelObjectName n22;
   NodeOptional n23 = new NodeOptional();
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   DotObjectName n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeChoice n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   IndicatorBind n42;
   NodeSequence n43;
   NodeToken n44;
   Token n45;
   PlSqlExpression n46;
   NodeToken n47;
   Token n48;

   
}
{
try {
   (
      n2=<K_NULL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      (
         { n3 = new NodeSequence(2); }
         n4=RelObjectName()
         { n3.addNode(n4); }
         (
            (
               n7="%FOUND" { n6 = JTBToolkit.makeNodeToken(n7); }
               { n5 = new NodeChoice(n6, 0); }
            |
               n9="%NOTFOUND" { n8 = JTBToolkit.makeNodeToken(n9); }
               { n5 = new NodeChoice(n8, 1); }
            |
               n11="%ISOPEN" { n10 = JTBToolkit.makeNodeToken(n11); }
               { n5 = new NodeChoice(n10, 2); }
            |
               n13="%ROWCOUNT" { n12 = JTBToolkit.makeNodeToken(n13); }
               { n5 = new NodeChoice(n12, 3); }
            )
            
         )
         { n3.addNode(n5); }
         
      )
      { n0 = new NodeChoice(n3, 1); }
   |
      LOOKAHEAD(2)
      (
         { n14 = new NodeSequence(4); }
         n15=RelObjectName()
         { n14.addNode(n15); }
         n17=<LPARENCHAR> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n14.addNode(n16); }
         n18=Arguments()
         { n14.addNode(n18); }
         n20=<RPARENCHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n14.addNode(n19); }
         
      )
      { n0 = new NodeChoice(n14, 2); }
   |
      (
         { n21 = new NodeSequence(2); }
         n22=RelObjectName()
         { n21.addNode(n22); }
         (
            { n24 = new NodeSequence(2); }
            n26=<DOTCHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
            { n24.addNode(n25); }
            n27=DotObjectName()
            { n24.addNode(n27); }
            { n23.addNode(n24); }
         )?
         { n21.addNode(n23); }
         
      )
      { n0 = new NodeChoice(n21, 3); }
   |
      (
         { n28 = new NodeSequence(2); }
         n30=<K_SQL> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n28.addNode(n29); }
         (
            (
               n33="%FOUND" { n32 = JTBToolkit.makeNodeToken(n33); }
               { n31 = new NodeChoice(n32, 0); }
            |
               n35="%NOTFOUND" { n34 = JTBToolkit.makeNodeToken(n35); }
               { n31 = new NodeChoice(n34, 1); }
            |
               n37="%ISOPEN" { n36 = JTBToolkit.makeNodeToken(n37); }
               { n31 = new NodeChoice(n36, 2); }
            |
               n39="%ROWCOUNT" { n38 = JTBToolkit.makeNodeToken(n39); }
               { n31 = new NodeChoice(n38, 3); }
            )
            
         )
         { n28.addNode(n31); }
         
      )
      { n0 = new NodeChoice(n28, 4); }
   |
      n41=<S_NUMBER> { n40 = JTBToolkit.makeNodeToken(n41); }
      { n0 = new NodeChoice(n40, 5); }
   |
      n42=IndicatorBind()
      { n0 = new NodeChoice(n42, 6); }
   |
      { n43 = new NodeSequence(3); }
      n45=<LPARENCHAR> { n44 = JTBToolkit.makeNodeToken(n45); }
      { n43.addNode(n44); }
      n46=PlSqlExpression()
      { n43.addNode(n46); }
      n48=<RPARENCHAR> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n43.addNode(n47); }
      { n0 = new NodeChoice(n43, 7); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new PlSqlPrimaryExpression();} 
   { return new PlSqlPrimaryExpression(n0); }
}

TableColumn TableColumn() :
{
   RelObjectName n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   DotObjectName n5;
   NodeOptional n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   DotObjectName n10;

   
}
{
try {
   n0=RelObjectName()
   (
      { n6 = new NodeOptional(); }
      { n2 = new NodeSequence(3); }
      n4=<DOTCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=DotObjectName()
      { n2.addNode(n5); }
      (
         { n7 = new NodeSequence(2); }
         n9=<DOTCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=DotObjectName()
         { n7.addNode(n10); }
         { n6.addNode(n7); }
      )?
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new TableColumn();} 
   { return new TableColumn(n0,n1); }
}

RelObjectName RelObjectName() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   Token t;
}
{
try {
   (
      n2=<S_IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<S_QUOTED_IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<S_CHAR_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new RelObjectName();} 
   { return new RelObjectName(n0); }
}

DotObjectName DotObjectName() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   Token t;
}
{
try {
   (
      n2=<S_IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<S_QUOTED_IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<S_CHAR_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new DotObjectName();} 
   { return new DotObjectName(n0); }
}

OracleObjectName OracleObjectName() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
try {
   (
      n2=<S_IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<S_QUOTED_IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new OracleObjectName();} 
   { return new OracleObjectName(n0); }
}

Relop Relop() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
try {
   (
      n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="!=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="#" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="<>" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<MORETHANCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<MORETHANOREQUAL> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<LESSTHANCHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<LESSTHANOREQUAL> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new Relop();} 
   { return new Relop(n0); }
}

TableReference TableReference() :
{
   RelObjectName n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   DotObjectName n5;

   
}
{
try {
   n0=RelObjectName()
   (
      { n2 = new NodeSequence(2); }
      n4="/" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=DotObjectName()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new TableReference();} 
   { return new TableReference(n0,n1); }
}

NumOrID NumOrID() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeChoice n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   
}
{
try {
   (
      n2=<S_IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         { n3 = new NodeSequence(2); }
         (
            (
               (
                  (
                     (
                        n8=<PLUSCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
                        { n6 = new NodeChoice(n7, 0); }
                     |
                        n10=<PLUSCHAR_SUBS> { n9 = JTBToolkit.makeNodeToken(n10); }
                        { n6 = new NodeChoice(n9, 1); }
                     )
                     
                  )
                  { n5 = new NodeChoice(n6, 0); }
               |
                  (
                     (
                        n13=<MINUSCHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
                        { n11 = new NodeChoice(n12, 0); }
                     |
                        n15=<MINUSCHAR_SUBS> { n14 = JTBToolkit.makeNodeToken(n15); }
                        { n11 = new NodeChoice(n14, 1); }
                     )
                     
                  )
                  { n5 = new NodeChoice(n11, 1); }
               )
               
            )
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n17=<S_NUMBER> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n3.addNode(n16); }
         
      )
      { n0 = new NodeChoice(n3, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new NumOrID();} 
   { return new NumOrID(n0); }
}

Arguments Arguments() :
{
   PlSqlExpressionList n0;

   
}
{
try {
   n0=PlSqlExpressionList()
   
} catch(ParseException e) {
	error_skipto(DOT); return new Arguments();} 
   { return new Arguments(n0); }
}

SelectStatement SelectStatement() :
{
   SelectWithoutOrder n0;
   NodeOptional n1 = new NodeOptional();
   OrderByClause n2;
   NodeOptional n3 = new NodeOptional();
   ForUpdateClause n4;

   
}
{
try {
   n0=SelectWithoutOrder()
   (
      n2=OrderByClause()
      { n1.addNode(n2); }
   )?
   (
      n4=ForUpdateClause()
      { n3.addNode(n4); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SelectStatement();} 
   { return new SelectStatement(n0,n1,n3); }
}

SelectWithoutOrder SelectWithoutOrder() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   SelectList n8;
   NodeOptional n9 = new NodeOptional();
   IntoClause n10;
   FromClause n11;
   NodeOptional n12 = new NodeOptional();
   WhereClause n13;
   NodeOptional n14 = new NodeOptional();
   ConnectClause n15;
   NodeOptional n16 = new NodeOptional();
   GroupByClause n17;
   NodeOptional n18 = new NodeOptional();
   SetClause n19;

   
}
{
try {
   n1=<K_SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<K_ALL> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<K_DISTINCT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )?
   n8=SelectList()
   (
      n10=IntoClause()
      { n9.addNode(n10); }
   )?
   n11=FromClause()
   (
      n13=WhereClause()
      { n12.addNode(n13); }
   )?
   (
      n15=ConnectClause()
      { n14.addNode(n15); }
   )?
   (
      n17=GroupByClause()
      { n16.addNode(n17); }
   )?
   (
      n19=SetClause()
      { n18.addNode(n19); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new SelectWithoutOrder();} 
   { return new SelectWithoutOrder(n0,n2,n8,n9,n11,n12,n14,n16,n18); }
}

SelectList SelectList() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   SelectItem n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SelectItem n9;

   
}
{
try {
   (
      n2=<ASTERISKCHAR> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(2); }
      n4=SelectItem()
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8=<COMMACHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=SelectItem()
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SelectList();} 
   { return new SelectList(n0); }
}

SelectItem SelectItem() :
{
   NodeChoice n0;
   SelectAllItems n1;
   NodeSequence n2;
   SQLSimpleExpression n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   FunctionCall n8;
   NodeOptional n9 = new NodeOptional();
   AsObjectName n10;
   SelectAllItems n11;
   NodeSequence n12;
   TableColumn n13;
   NodeOptional n14 = new NodeOptional();
   AsObjectName n15;

   
}
{
try {
   (
      LOOKAHEAD(SelectAllItems())
      n1=SelectAllItems()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(SQLSimpleExpression())
      { n2 = new NodeSequence(3); }
      n3=SQLSimpleExpression()
      { n2.addNode(n3); }
      (
         n6=<S_IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
      )?
      { n2.addNode(n4); }
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(FunctionCall())
      { n7 = new NodeSequence(3); }
      n8=FunctionCall()
      { n7.addNode(n8); }
      (
         n10=AsObjectName()
         { n9.addNode(n10); }
      )?
      { n7.addNode(n9); }
      { n0 = new NodeChoice(n7, 2); }
   |
      LOOKAHEAD(SelectAllItems())
      n11=SelectAllItems()
      { n0 = new NodeChoice(n11, 3); }
   |
      LOOKAHEAD(TableColumn())
      { n12 = new NodeSequence(3); }
      n13=TableColumn()
      { n12.addNode(n13); }
      (
         n15=AsObjectName()
         { n14.addNode(n15); }
      )?
      { n12.addNode(n14); }
      { n0 = new NodeChoice(n12, 4); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SelectItem();} 
   { return new SelectItem(n0); }
}

SelectAllItems SelectAllItems() :
{
   NodeChoice n0;
   NodeSequence n1;
   RelObjectName n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   RelObjectName n8;
   NodeToken n9;
   Token n10;
   DotObjectName n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   
}
{
try {
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(4); }
      n2=RelObjectName()
      { n1.addNode(n2); }
      n4=<DOTCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      n6=<ASTERISKCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n7 = new NodeSequence(5); }
      n8=RelObjectName()
      { n7.addNode(n8); }
      n10=<DOTCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n7.addNode(n9); }
      n11=DotObjectName()
      { n7.addNode(n11); }
      n13=<DOTCHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n7.addNode(n12); }
      n15=<ASTERISKCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n7.addNode(n14); }
      { n0 = new NodeChoice(n7, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SelectAllItems();} 
   { return new SelectAllItems(n0); }
}

AsObjectName AsObjectName() :
{
   NodeChoice n0;
   RelObjectName n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   DotObjectName n5;

   
}
{
try {
   (
      n1=RelObjectName()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(2); }
      n4=<K_AS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=DotObjectName()
      { n2.addNode(n5); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new AsObjectName();} 
   { return new AsObjectName(n0); }
}

IntoClause IntoClause() :
{
   NodeToken n0;
   Token n1;
   IntoItem n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   IntoItem n7;

   
}
{
try {
   n1=<K_INTO> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntoItem()
   (
      { n4 = new NodeSequence(2); }
      n6=<COMMACHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=IntoItem()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new IntoClause();} 
   { return new IntoClause(n0,n2,n3); }
}

IntoItem IntoItem() :
{
   NodeChoice n0;
   NodeSequence n1;
   RelObjectName n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   DotObjectName n7;
   NodeSequence n8;
   IndicatorBind n9;

   
}
{
try {
   (
      (
         { n1 = new NodeSequence(2); }
         n2=RelObjectName()
         { n1.addNode(n2); }
         (
            { n4 = new NodeSequence(2); }
            n6=<DOTCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
            n7=DotObjectName()
            { n4.addNode(n7); }
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         
      )
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         { n8 = new NodeSequence(1); }
         n9=IndicatorBind()
         { n8.addNode(n9); }
         
      )
      { n0 = new NodeChoice(n8, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new IntoItem();} 
   { return new IntoItem(n0); }
}

FromClause FromClause() :
{
   NodeToken n0;
   Token n1;
   FromItem n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   FromItem n7;

   
}
{
try {
   n1=<K_FROM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FromItem()
   (
      { n4 = new NodeSequence(2); }
      n6=<COMMACHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=FromItem()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new FromClause();} 
   { return new FromClause(n0,n2,n3); }
}

FromItem FromItem() :
{
   NodeChoice n0;
   TableReference n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   FromItemExpression n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeSequence n9;
   JoinerExpression n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   AsObjectName n15;
   NodeOptional n16 = new NodeOptional();
   AsObjectName n17;

   
}
{
try {
   (
      (
         n1=TableReference()
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(3); }
         n4=<LPARENCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=FromItemExpression()
         { n2.addNode(n5); }
         n7=<RPARENCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n2.addNode(n6); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   (
      (
         LOOKAHEAD(JoinerExpression())
         { n9 = new NodeSequence(3); }
         n10=JoinerExpression()
         { n9.addNode(n10); }
         (
            { n12 = new NodeSequence(2); }
            n14=<K_AS> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
            n15=AsObjectName()
            { n12.addNode(n15); }
            { n11.addNode(n12); }
         )?
         { n9.addNode(n11); }
         { n8 = new NodeChoice(n9, 0); }
      |
         (
            n17=AsObjectName()
            { n16.addNode(n17); }
         )?
         { n8 = new NodeChoice(n16, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new FromItem();} 
   { return new FromItem(n0,n8); }
}

FromItemExpression FromItemExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   TableReference n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   FromItemExpression n7;
   NodeToken n8;
   Token n9;
   NodeListOptional n10 = new NodeListOptional();
   JoinerExpression n11;
   SelectStatement n12;

   
}
{
try {
   (
      { n1 = new NodeSequence(2); }
      (
         (
            n3=TableReference()
            { n2 = new NodeChoice(n3, 0); }
         |
            { n4 = new NodeSequence(3); }
            n6=<LPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
            n7=FromItemExpression()
            { n4.addNode(n7); }
            n9=<RPARENCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n4.addNode(n8); }
            { n2 = new NodeChoice(n4, 1); }
         )
         
      )
      { n1.addNode(n2); }
      (
         n11=JoinerExpression()
         { n10.addNode(n11); }
      )*
      { n10.nodes.trimToSize(); }
      { n1.addNode(n10); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n12=SelectStatement()
      { n0 = new NodeChoice(n12, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new FromItemExpression();} 
   { return new FromItemExpression(n0); }
}

JoinerExpression JoinerExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   TableReference n4;
   NodeOptional n5 = new NodeOptional();
   JoinWhereClause n6;
   NodeSequence n7;
   RelObjectName n8;
   NodeToken n9;
   Token n10;
   TableReference n11;
   NodeOptional n12 = new NodeOptional();
   JoinWhereClause n13;

   
}
{
try {
   (
      { n1 = new NodeSequence(3); }
      n3=<K_JOIN> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=TableReference()
      { n1.addNode(n4); }
      (
         n6=JoinWhereClause()
         { n5.addNode(n6); }
      )?
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      { n7 = new NodeSequence(5); }
      n8=RelObjectName()
      { n7.addNode(n8); }
      n10=<K_JOIN> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n7.addNode(n9); }
      n11=TableReference()
      { n7.addNode(n11); }
      (
         n13=JoinWhereClause()
         { n12.addNode(n13); }
      )?
      { n7.addNode(n12); }
      { n0 = new NodeChoice(n7, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new JoinerExpression();} 
   { return new JoinerExpression(n0); }
}

JoinWhereClause JoinWhereClause() :
{
   NodeToken n0;
   Token n1;
   SQLExpression n2;

   
}
{
try {
   n1=<K_ON> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLExpression()
   
} catch(ParseException e) {
	error_skipto(DOT); return new JoinWhereClause();} 
   { return new JoinWhereClause(n0,n2); }
}

WhereClause WhereClause() :
{
   NodeToken n0;
   Token n1;
   SQLExpression n2;

   
}
{
try {
   n1=<K_WHERE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLExpression()
   
} catch(ParseException e) {
	error_skipto(DOT); return new WhereClause();} 
   { return new WhereClause(n0,n2); }
}

ConnectClause ConnectClause() :
{
   NodeSequence n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLExpression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   SQLExpression n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   SQLExpression n19;

   
}
{
try {
   (
      { n0 = new NodeSequence(5); }
      (
         { n2 = new NodeSequence(3); }
         n4=<K_START> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n6=<K_WITH> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2.addNode(n5); }
         n7=SQLExpression()
         { n2.addNode(n7); }
         { n1.addNode(n2); }
      )?
      { n0.addNode(n1); }
      n9=<K_CONNECT> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n0.addNode(n8); }
      n11=<K_BY> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0.addNode(n10); }
      n12=SQLExpression()
      { n0.addNode(n12); }
      (
         { n14 = new NodeSequence(3); }
         n16=<K_START> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n18=<K_WITH> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n14.addNode(n17); }
         n19=SQLExpression()
         { n14.addNode(n19); }
         { n13.addNode(n14); }
      )?
      { n0.addNode(n13); }
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new ConnectClause();} 
   { return new ConnectClause(n0); }
}

GroupByClause GroupByClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLExpressionList n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLExpression n9;

   
}
{
try {
   n1=<K_GROUP> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<K_BY> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLExpressionList()
   (
      { n6 = new NodeSequence(2); }
      n8=<K_HAVING> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLExpression()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new GroupByClause();} 
   { return new GroupByClause(n0,n2,n4,n5); }
}

SetClause SetClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SelectStatement n15;
   NodeToken n16;
   Token n17;
   SelectStatement n18;

   
}
{
try {
   (
      (
         (
            { n1 = new NodeSequence(2); }
            n3=<K_UNION> { n2 = JTBToolkit.makeNodeToken(n3); }
            { n1.addNode(n2); }
            (
               n6=<K_ALL> { n5 = JTBToolkit.makeNodeToken(n6); }
               { n4.addNode(n5); }
            )?
            { n1.addNode(n4); }
            
         )
         { n0 = new NodeChoice(n1, 0); }
      |
         n8=<K_INTERSECT> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 1); }
      |
         n10=<K_MINUS> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 2); }
      )
      
   )
   (
      (
         LOOKAHEAD(<LPARENCHAR>)
         (
            { n12 = new NodeSequence(3); }
            n14=<LPARENCHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n12.addNode(n13); }
            n15=SelectStatement()
            { n12.addNode(n15); }
            n17=<RPARENCHAR> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n12.addNode(n16); }
            
         )
         { n11 = new NodeChoice(n12, 0); }
      |
         n18=SelectStatement()
         { n11 = new NodeChoice(n18, 1); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SetClause();} 
   { return new SetClause(n0,n11); }
}

OrderByClause OrderByClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLSimpleExpression n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeListOptional n11 = new NodeListOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLSimpleExpression n15;
   NodeOptional n16;
   NodeChoice n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;

   
}
{
try {
   n1=<K_ORDER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<K_BY> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLSimpleExpression()
   (
      (
         n8=<K_ASC> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         n10=<K_DESC> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n6 = new NodeChoice(n9, 1); }
      )
      { n5.addNode(n6); }
   )?
   (
      { n16 = new NodeOptional(); }
      { n12 = new NodeSequence(3); }
      n14=<COMMACHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLSimpleExpression()
      { n12.addNode(n15); }
      (
         (
            n19=<K_ASC> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17 = new NodeChoice(n18, 0); }
         |
            n21=<K_DESC> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n17 = new NodeChoice(n20, 1); }
         )
         { n16.addNode(n17); }
      )?
      { n12.addNode(n16); }
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new OrderByClause();} 
   { return new OrderByClause(n0,n2,n4,n5,n11); }
}

ForUpdateClause ForUpdateClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   TableColumn n8;
   NodeListOptional n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   TableColumn n13;

   
}
{
try {
   n1=<K_FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<K_UPDATE> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n9 = new NodeListOptional(); }
      { n5 = new NodeSequence(3); }
      n7=<K_OF> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=TableColumn()
      { n5.addNode(n8); }
      (
         { n10 = new NodeSequence(2); }
         n12=<COMMACHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n13=TableColumn()
         { n10.addNode(n13); }
         { n9.addNode(n10); }
      )*
      { n9.nodes.trimToSize(); }
      { n5.addNode(n9); }
      { n4.addNode(n5); }
   )?
   
} catch(ParseException e) {
	error_skipto(DOT); return new ForUpdateClause();} 
   { return new ForUpdateClause(n0,n2,n4); }
}

SQLExpression SQLExpression() :
{
   SQLOrExpressions n0;

   
}
{
try {
   n0=SQLOrExpressions()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLExpression();} 
   { return new SQLExpression(n0); }
}

SQLOrExpressions SQLOrExpressions() :
{
   NodeChoice n0;
   SQLOrExpression n1;
   SQLAndExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(SQLOrExpression())
      n1=SQLOrExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SQLAndExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLOrExpressions();} 
   { return new SQLOrExpressions(n0); }
}

SQLOrExpression SQLOrExpression() :
{
   SQLAndExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLAndExpressions n5;

   
}
{
try {
   n0=SQLAndExpressions()
   (
      { n2 = new NodeSequence(2); }
      n4=<K_OR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SQLAndExpressions()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLOrExpression();} 
   { return new SQLOrExpression(n0,n1); }
}

SQLAndExpressions SQLAndExpressions() :
{
   NodeChoice n0;
   SQLAndExpression n1;
   SQLUnaryLogicalExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(SQLAndExpression())
      n1=SQLAndExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SQLUnaryLogicalExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLAndExpressions();} 
   { return new SQLAndExpressions(n0); }
}

SQLAndExpression SQLAndExpression() :
{
   SQLUnaryLogicalExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLUnaryLogicalExpressions n5;

   
}
{
try {
   n0=SQLUnaryLogicalExpressions()
   (
      { n2 = new NodeSequence(2); }
      n4=<K_AND> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SQLUnaryLogicalExpressions()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLAndExpression();} 
   { return new SQLAndExpression(n0,n1); }
}

SQLUnaryLogicalExpressions SQLUnaryLogicalExpressions() :
{
   NodeChoice n0;
   ExistsClause n1;
   SQLRelationalExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(2)
      n1=ExistsClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SQLRelationalExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLUnaryLogicalExpressions();} 
   { return new SQLUnaryLogicalExpressions(n0); }
}

ExistsClause ExistsClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SubQuery n7;
   NodeToken n8;
   Token n9;

   
}
{
try {
   (
      n2=<K_NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<K_EXISTS> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<LPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SubQuery()
   n9=<RPARENCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new ExistsClause();} 
   { return new ExistsClause(n0,n3,n5,n7,n8); }
}

SQLRelationalExpressions SQLRelationalExpressions() :
{
   NodeChoice n0;
   SQLRelationalExpression n1;
   NodeChoice n2;
   SQLRelopExpression n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   SQLExpressionList n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   SQLPriorExpression n11;
   SQLSimpleExpressions n12;

   
}
{
try {
   (
      LOOKAHEAD(SQLRelationalExpression())
      n1=SQLRelationalExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         (
            LOOKAHEAD(SQLRelopExpression())
            n3=SQLRelopExpression()
            { n2 = new NodeChoice(n3, 0); }
         |
            LOOKAHEAD(<LPARENCHAR> SQLSimpleExpression() <COMMACHAR>)
            { n4 = new NodeSequence(4); }
            n6=<LPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
            n7=SQLExpressionList()
            { n4.addNode(n7); }
            n9=<RPARENCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n4.addNode(n8); }
            { n2 = new NodeChoice(n4, 1); }
         |
            (
               (
                  LOOKAHEAD(2)
                  n11=SQLPriorExpression()
                  { n10 = new NodeChoice(n11, 0); }
               |
                  n12=SQLSimpleExpressions()
                  { n10 = new NodeChoice(n12, 1); }
               )
               
            )
            { n2 = new NodeChoice(n10, 2); }
         )
         
      )
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLRelationalExpressions();} 
   { return new SQLRelationalExpressions(n0); }
}

SQLRelationalExpression SQLRelationalExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SQLExpressionList n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   SQLPriorExpression n8;
   SQLSimpleExpressions n9;
   NodeChoice n10;
   NodeSequence n11;
   SQLInClause n12;
   NodeSequence n13;
   SQLBetweenClause n14;
   NodeSequence n15;
   SQLLikeClause n16;
   IsNullClause n17;

   
}
{
try {
   (
      (
         LOOKAHEAD(<LPARENCHAR> SQLSimpleExpression() <COMMACHAR>)
         { n1 = new NodeSequence(4); }
         n3=<LPARENCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=SQLExpressionList()
         { n1.addNode(n4); }
         n6=<RPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         (
            (
               LOOKAHEAD(2)
               n8=SQLPriorExpression()
               { n7 = new NodeChoice(n8, 0); }
            |
               n9=SQLSimpleExpressions()
               { n7 = new NodeChoice(n9, 1); }
            )
            
         )
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      (
         LOOKAHEAD(2)
         (
            { n11 = new NodeSequence(1); }
            n12=SQLInClause()
            { n11.addNode(n12); }
            
         )
         { n10 = new NodeChoice(n11, 0); }
      |
         LOOKAHEAD(2)
         (
            { n13 = new NodeSequence(1); }
            n14=SQLBetweenClause()
            { n13.addNode(n14); }
            
         )
         { n10 = new NodeChoice(n13, 1); }
      |
         LOOKAHEAD(2)
         (
            { n15 = new NodeSequence(1); }
            n16=SQLLikeClause()
            { n15.addNode(n16); }
            
         )
         { n10 = new NodeChoice(n15, 2); }
      |
         n17=IsNullClause()
         { n10 = new NodeChoice(n17, 3); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLRelationalExpression();} 
   { return new SQLRelationalExpression(n0,n10); }
}

SQLPriorExpression SQLPriorExpression() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpressions n5;

   
}
{
try {
   (
      n2=<K_NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<K_PRIOR> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SQLSimpleExpressions()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLPriorExpression();} 
   { return new SQLPriorExpression(n0,n3,n5); }
}

SQLExpressionList SQLExpressionList() :
{
   SQLSimpleExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpression n5;

   
}
{
try {
   n0=SQLSimpleExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMACHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SQLSimpleExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLExpressionList();} 
   { return new SQLExpressionList(n0,n1); }
}

SQLRelopExpression SQLRelopExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SQLExpressionList n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   SQLPriorExpression n8;
   SQLSimpleExpressions n9;
   Relop n10;
   NodeChoice n11;
   NodeSequence n12;
   NodeOptional n13 = new NodeOptional();
   NodeChoice n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   SubQuery n21;
   NodeToken n22;
   Token n23;
   SQLPriorExpression n24;
   SQLSimpleExpressions n25;

   
}
{
try {
   (
      (
         LOOKAHEAD(<LPARENCHAR> SQLSimpleExpression() <COMMACHAR>)
         { n1 = new NodeSequence(4); }
         n3=<LPARENCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=SQLExpressionList()
         { n1.addNode(n4); }
         n6=<RPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         (
            (
               LOOKAHEAD(2)
               n8=SQLPriorExpression()
               { n7 = new NodeChoice(n8, 0); }
            |
               n9=SQLSimpleExpressions()
               { n7 = new NodeChoice(n9, 1); }
            )
            
         )
         { n0 = new NodeChoice(n7, 1); }
      )
      
   )
   n10=Relop()
   (
      (
         LOOKAHEAD(<K_ANY> | <K_ALL> | <LPARENCHAR> <K_SELECT>)
         (
            { n12 = new NodeSequence(4); }
            (
               (
                  n16=<K_ALL> { n15 = JTBToolkit.makeNodeToken(n16); }
                  { n14 = new NodeChoice(n15, 0); }
               |
                  n18=<K_ANY> { n17 = JTBToolkit.makeNodeToken(n18); }
                  { n14 = new NodeChoice(n17, 1); }
               )
               { n13.addNode(n14); }
            )?
            { n12.addNode(n13); }
            n20=<LPARENCHAR> { n19 = JTBToolkit.makeNodeToken(n20); }
            { n12.addNode(n19); }
            n21=SubQuery()
            { n12.addNode(n21); }
            n23=<RPARENCHAR> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n12.addNode(n22); }
            
         )
         { n11 = new NodeChoice(n12, 0); }
      |
         LOOKAHEAD(2)
         n24=SQLPriorExpression()
         { n11 = new NodeChoice(n24, 1); }
      |
         n25=SQLSimpleExpressions()
         { n11 = new NodeChoice(n25, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLRelopExpression();} 
   { return new SQLRelopExpression(n0,n10,n11); }
}

SQLRelationalOperatorExpression SQLRelationalOperatorExpression() :
{
   Relop n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   SubQuery n11;
   NodeToken n12;
   Token n13;
   SQLPriorExpression n14;
   SQLSimpleExpression n15;

   
}
{
try {
   n0=Relop()
   (
      (
         LOOKAHEAD(<K_ANY> | <K_ALL> | <LPARENCHAR> <K_SELECT>)
         (
            { n2 = new NodeSequence(4); }
            (
               (
                  n6=<K_ALL> { n5 = JTBToolkit.makeNodeToken(n6); }
                  { n4 = new NodeChoice(n5, 0); }
               |
                  n8=<K_ANY> { n7 = JTBToolkit.makeNodeToken(n8); }
                  { n4 = new NodeChoice(n7, 1); }
               )
               { n3.addNode(n4); }
            )?
            { n2.addNode(n3); }
            n10=<LPARENCHAR> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n2.addNode(n9); }
            n11=SubQuery()
            { n2.addNode(n11); }
            n13=<RPARENCHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n2.addNode(n12); }
            
         )
         { n1 = new NodeChoice(n2, 0); }
      |
         LOOKAHEAD(2)
         n14=SQLPriorExpression()
         { n1 = new NodeChoice(n14, 1); }
      |
         n15=SQLSimpleExpression()
         { n1 = new NodeChoice(n15, 2); }
      )
      
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLRelationalOperatorExpression();} 
   { return new SQLRelationalOperatorExpression(n0,n1); }
}

SQLInClause SQLInClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   SQLExpressionList n8;
   SubQuery n9;
   NodeToken n10;
   Token n11;

   
}
{
try {
   (
      n2=<K_NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<K_IN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<LPARENCHAR> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      (
         n8=SQLExpressionList()
         { n7 = new NodeChoice(n8, 0); }
      |
         n9=SubQuery()
         { n7 = new NodeChoice(n9, 1); }
      )
      
   )
   n11=<RPARENCHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLInClause();} 
   { return new SQLInClause(n0,n3,n5,n7,n10); }
}

SQLBetweenClause SQLBetweenClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpression n5;
   NodeToken n6;
   Token n7;
   SQLSimpleExpression n8;

   
}
{
try {
   (
      n2=<K_NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<K_BETWEEN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SQLSimpleExpression()
   n7=<K_AND> { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=SQLSimpleExpression()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLBetweenClause();} 
   { return new SQLBetweenClause(n0,n3,n5,n6,n8); }
}

SQLLikeClause SQLLikeClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpression n5;

   
}
{
try {
   (
      n2=<K_NOT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<K_LIKE> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SQLSimpleExpression()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLLikeClause();} 
   { return new SQLLikeClause(n0,n3,n5); }
}

SQLSimpleExpression SQLSimpleExpression() :
{
   SQLSimpleExpressions n0;

   
}
{
try {
   n0=SQLSimpleExpressions()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLSimpleExpression();} 
   { return new SQLSimpleExpression(n0); }
}

SQLSimpleExpressions SQLSimpleExpressions() :
{
   SQLAdditiveExpressions n0;

   
}
{
try {
   n0=SQLAdditiveExpressions()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLSimpleExpressions();} 
   { return new SQLSimpleExpressions(n0); }
}

SQLAdditiveExpressions SQLAdditiveExpressions() :
{
   NodeChoice n0;
   SQLAdditiveExpression n1;
   SQLMultiplicativeExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(SQLAdditiveExpression())
      n1=SQLAdditiveExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SQLMultiplicativeExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLAdditiveExpressions();} 
   { return new SQLAdditiveExpressions(n0); }
}

SQLAdditiveExpression SQLAdditiveExpression() :
{
   SQLMultiplicativeExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeChoice n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   SQLMultiplicativeExpressions n16;

   
}
{
try {
   n0=SQLMultiplicativeExpressions()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            (
               (
                  n6=<PLUSCHAR_SUBS> { n5 = JTBToolkit.makeNodeToken(n6); }
                  { n4 = new NodeChoice(n5, 0); }
               |
                  n8=<PLUSCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
                  { n4 = new NodeChoice(n7, 1); }
               )
               
            )
            { n3 = new NodeChoice(n4, 0); }
         |
            (
               (
                  n11=<MINUSCHAR_SUBS> { n10 = JTBToolkit.makeNodeToken(n11); }
                  { n9 = new NodeChoice(n10, 0); }
               |
                  n13=<MINUSCHAR> { n12 = JTBToolkit.makeNodeToken(n13); }
                  { n9 = new NodeChoice(n12, 1); }
               )
               
            )
            { n3 = new NodeChoice(n9, 1); }
         |
            n15=<CONCAT> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n3 = new NodeChoice(n14, 2); }
         )
         
      )
      { n2.addNode(n3); }
      n16=SQLMultiplicativeExpressions()
      { n2.addNode(n16); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLAdditiveExpression();} 
   { return new SQLAdditiveExpression(n0,n1); }
}

SQLMultiplicativeExpressions SQLMultiplicativeExpressions() :
{
   NodeChoice n0;
   SQLMultiplicativeExpression n1;
   SQLExpotentExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(SQLMultiplicativeExpression())
      n1=SQLMultiplicativeExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SQLExpotentExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLMultiplicativeExpressions();} 
   { return new SQLMultiplicativeExpressions(n0); }
}

SQLMultiplicativeExpression SQLMultiplicativeExpression() :
{
   SQLExpotentExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   SQLExpotentExpressions n8;

   
}
{
try {
   n0=SQLExpotentExpressions()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=<ASTERISKCHAR> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<SLASHCHAR> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=SQLExpotentExpressions()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLMultiplicativeExpression();} 
   { return new SQLMultiplicativeExpression(n0,n1); }
}

SQLExpotentExpressions SQLExpotentExpressions() :
{
   NodeChoice n0;
   SQLExpotentExpression n1;
   SQLUnaryExpressions n2;

   
}
{
try {
   (
      LOOKAHEAD(SQLExpotentExpression())
      n1=SQLExpotentExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SQLUnaryExpressions()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLExpotentExpressions();} 
   { return new SQLExpotentExpressions(n0); }
}

SQLExpotentExpression SQLExpotentExpression() :
{
   SQLUnaryExpressions n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLUnaryExpressions n5;

   
}
{
try {
   n0=SQLUnaryExpressions()
   (
      { n2 = new NodeSequence(2); }
      n4=<POW> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SQLUnaryExpressions()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLExpotentExpression();} 
   { return new SQLExpotentExpression(n0,n1); }
}

SQLUnaryExpressions SQLUnaryExpressions() :
{
   NodeChoice n0;
   SQLUnaryExpression n1;
   SQLPrimaryExpression n2;

   
}
{
try {
   (
      LOOKAHEAD(SQLUnaryExpression())
      n1=SQLUnaryExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SQLPrimaryExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLUnaryExpressions();} 
   { return new SQLUnaryExpressions(n0); }
}

SQLUnaryExpression SQLUnaryExpression() :
{
   NodeChoice n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   SQLPrimaryExpression n11;

   
}
{
try {
   (
      (
         (
            (
               n3=<PLUSCHAR> { n2 = JTBToolkit.makeNodeToken(n3); }
               { n1 = new NodeChoice(n2, 0); }
            |
               n5=<PLUSCHAR_SUBS> { n4 = JTBToolkit.makeNodeToken(n5); }
               { n1 = new NodeChoice(n4, 1); }
            )
            
         )
         { n0 = new NodeChoice(n1, 0); }
      |
         (
            (
               n8=<MINUSCHAR> { n7 = JTBToolkit.makeNodeToken(n8); }
               { n6 = new NodeChoice(n7, 0); }
            |
               n10=<MINUSCHAR_SUBS> { n9 = JTBToolkit.makeNodeToken(n10); }
               { n6 = new NodeChoice(n9, 1); }
            )
            
         )
         { n0 = new NodeChoice(n6, 1); }
      )
      
   )
   n11=SQLPrimaryExpression()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLUnaryExpression();} 
   { return new SQLUnaryExpression(n0,n11); }
}

SQLPrimaryExpression SQLPrimaryExpression() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   FunctionCall n3;
   OuterJoinExpression n4;
   TableColumn n5;
   NodeToken n6;
   Token n7;
   IndicatorBind n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLExpression n12;
   NodeToken n13;
   Token n14;

   
}
{
try {
   (
      n2=<K_NULL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(FunctionCall())
      n3=FunctionCall()
      { n0 = new NodeChoice(n3, 1); }
   |
      LOOKAHEAD(OuterJoinExpression())
      n4=OuterJoinExpression()
      { n0 = new NodeChoice(n4, 2); }
   |
      n5=TableColumn()
      { n0 = new NodeChoice(n5, 3); }
   |
      n7=<S_NUMBER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n0 = new NodeChoice(n6, 4); }
   |
      n8=IndicatorBind()
      { n0 = new NodeChoice(n8, 5); }
   |
      { n9 = new NodeSequence(3); }
      n11=<LPARENCHAR> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLExpression()
      { n9.addNode(n12); }
      n14=<RPARENCHAR> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n9.addNode(n13); }
      { n0 = new NodeChoice(n9, 6); }
   )
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLPrimaryExpression();} 
   { return new SQLPrimaryExpression(n0); }
}

FunctionCall FunctionCall() :
{
   RelObjectName n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   DotObjectName n5;
   NodeOptional n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   DotObjectName n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeOptional n15;
   NodeChoice n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeChoice n21;
   SQLArguments n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;

   
}
{
try {
   n0=RelObjectName()
   (
      { n6 = new NodeOptional(); }
      { n2 = new NodeSequence(3); }
      n4=<DOTCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=DotObjectName()
      { n2.addNode(n5); }
      (
         { n7 = new NodeSequence(2); }
         n9=<DOTCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=DotObjectName()
         { n7.addNode(n10); }
         { n6.addNode(n7); }
      )?
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   n12=<LPARENCHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   (
      { n15 = new NodeOptional(); }
      { n14 = new NodeSequence(2); }
      (
         (
            n18=<K_DISTINCT> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n16 = new NodeChoice(n17, 0); }
         |
            n20=<K_ALL> { n19 = JTBToolkit.makeNodeToken(n20); }
            { n16 = new NodeChoice(n19, 1); }
         )
         { n15.addNode(n16); }
      )?
      { n14.addNode(n15); }
      (
         (
            n22=SQLArguments()
            { n21 = new NodeChoice(n22, 0); }
         |
            n24=<ASTERISKCHAR> { n23 = JTBToolkit.makeNodeToken(n24); }
            { n21 = new NodeChoice(n23, 1); }
         )
         
      )
      { n14.addNode(n21); }
      { n13.addNode(n14); }
   )?
   n26=<RPARENCHAR> { n25 = JTBToolkit.makeNodeToken(n26); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new FunctionCall();} 
   { return new FunctionCall(n0,n1,n11,n13,n25); }
}

SQLArguments SQLArguments() :
{
   SQLExpressionList n0;

   
}
{
try {
   n0=SQLExpressionList()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SQLArguments();} 
   { return new SQLArguments(n0); }
}

OuterJoinExpression OuterJoinExpression() :
{
   RelObjectName n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   DotObjectName n5;
   NodeOptional n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   DotObjectName n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;

   
}
{
try {
   n0=RelObjectName()
   (
      { n6 = new NodeOptional(); }
      { n2 = new NodeSequence(3); }
      n4=<DOTCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=DotObjectName()
      { n2.addNode(n5); }
      (
         { n7 = new NodeSequence(2); }
         n9=<DOTCHAR> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=DotObjectName()
         { n7.addNode(n10); }
         { n6.addNode(n7); }
      )?
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   n12=<LPARENCHAR> { n11 = JTBToolkit.makeNodeToken(n12); }
   (
      (
         n15=<PLUSCHAR> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13 = new NodeChoice(n14, 0); }
      |
         n17=<PLUSCHAR_SUBS> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13 = new NodeChoice(n16, 1); }
      )
      
   )
   n19=<RPARENCHAR> { n18 = JTBToolkit.makeNodeToken(n19); }
   
} catch(ParseException e) {
	error_skipto(DOT); return new OuterJoinExpression();} 
   { return new OuterJoinExpression(n0,n1,n11,n13,n18); }
}

SubQuery SubQuery() :
{
   SelectWithoutOrder n0;

   
}
{
try {
   n0=SelectWithoutOrder()
   
} catch(ParseException e) {
	error_skipto(DOT); return new SubQuery();} 
   { return new SubQuery(n0); }
}

JAVACODE
void error_skipto(int kind)
{
   if ( jj_kind < 0 )
      jj_kind = 0;
   ParseException e = generateParseException();
   RESConfig.getInstance().setInError(true);
   Token t = token_source.getNextToken();
   System.out.println(e.toString());
   int previousLine = -1,previousColumn = -1;
   do
   {
      t = token_source.getNextToken();
      if ( t.beginLine == previousLine && t.beginColumn == previousColumn )
         break;
      previousLine = t.beginLine;
      previousColumn = t.beginColumn;
   }
   while ( t.kind != kind );
}

JAVACODE
SkipToEndExec SkipToEndExec()
{
   SkipToEndExec list = new SkipToEndExec();
   do
   {
      Token t = getToken(1);
      if ( t.kind == END_EXEC )
         break;
      Token n1 = jj_consume_token(t.kind);
      list.addNode(JTBToolkit.makeNodeToken(n1));
   }
   while ( true );
   return list;
}
