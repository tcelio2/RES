//
// Generated by JTB 1.3.2
//

package com.res.cobol.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * identifier -> Identifier()
 * nodeToken -> &lt;FROM&gt;
 * idOrLiteral -> IdOrLiteral()
 * nodeToken1 -> &lt;BY&gt;
 * idOrLiteral1 -> IdOrLiteral()
 * nodeToken2 -> &lt;UNTIL&gt;
 * condition -> Condition()
 * </PRE>
 */
public class PerformVarying extends com.res.cobol.RESNode implements Node {
   private Node parent;
   public Identifier identifier;
   public NodeToken nodeToken;
   public IdOrLiteral idOrLiteral;
   public NodeToken nodeToken1;
   public IdOrLiteral idOrLiteral1;
   public NodeToken nodeToken2;
   public Condition condition;

   public PerformVarying(Identifier n0, NodeToken n1, IdOrLiteral n2, NodeToken n3, IdOrLiteral n4, NodeToken n5, Condition n6) {
      identifier = n0;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken = n1;
      if ( nodeToken != null ) nodeToken.setParent(this);
      idOrLiteral = n2;
      if ( idOrLiteral != null ) idOrLiteral.setParent(this);
      nodeToken1 = n3;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      idOrLiteral1 = n4;
      if ( idOrLiteral1 != null ) idOrLiteral1.setParent(this);
      nodeToken2 = n5;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      condition = n6;
      if ( condition != null ) condition.setParent(this);
   }

   public PerformVarying() {}

   public void accept(com.res.cobol.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.res.cobol.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.res.cobol.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.res.cobol.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

