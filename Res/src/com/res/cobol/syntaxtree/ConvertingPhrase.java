//
// Generated by JTB 1.3.2
//

package com.res.cobol.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> &lt;CONVERTING&gt;
 * nodeChoice -> ( Identifier() | Literal() )
 * nodeToken1 -> &lt;TO&gt;
 * nodeChoice1 -> ( Identifier() | Literal() )
 * nodeListOptional -> ( BeforeAfterPhrase() )*
 * </PRE>
 */
public class ConvertingPhrase extends com.res.cobol.RESNode implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public NodeChoice nodeChoice;
   public NodeToken nodeToken1;
   public NodeChoice nodeChoice1;
   public NodeListOptional nodeListOptional;

   public ConvertingPhrase(NodeToken n0, NodeChoice n1, NodeToken n2, NodeChoice n3, NodeListOptional n4) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeChoice = n1;
      if ( nodeChoice != null ) nodeChoice.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeChoice1 = n3;
      if ( nodeChoice1 != null ) nodeChoice1.setParent(this);
      nodeListOptional = n4;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
   }

   public ConvertingPhrase() {}

   public void accept(com.res.cobol.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.res.cobol.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.res.cobol.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.res.cobol.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

