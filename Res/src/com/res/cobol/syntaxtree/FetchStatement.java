//
// Generated by JTB 1.3.2
//

package com.res.cobol.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeOptional -> [ &lt;K_FOR&gt; ( RelObjectName() | &lt;S_BIND&gt; ) ]
 * nodeToken -> &lt;K_FETCH&gt;
 * nodeSequence -> ( RelObjectName() )
 * nodeToken1 -> &lt;K_INTO&gt;
 * nodeChoice -> ( RelObjectName() [ [ &lt;K_INDICATOR&gt; ] &lt;S_BIND&gt; ] | IndicatorBind() )
 * nodeListOptional -> ( &lt;COMMACHAR&gt; ( RelObjectName() [ [ &lt;K_INDICATOR&gt; ] &lt;S_BIND&gt; ] | IndicatorBind() ) )*
 * </PRE>
 */
public class FetchStatement extends com.res.cobol.RESNode implements Node {
   private Node parent;
   public NodeOptional nodeOptional;
   public NodeToken nodeToken;
   public NodeSequence nodeSequence;
   public NodeToken nodeToken1;
   public NodeChoice nodeChoice;
   public NodeListOptional nodeListOptional;

   public FetchStatement(NodeOptional n0, NodeToken n1, NodeSequence n2, NodeToken n3, NodeChoice n4, NodeListOptional n5) {
      nodeOptional = n0;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
      nodeToken = n1;
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeSequence = n2;
      if ( nodeSequence != null ) nodeSequence.setParent(this);
      nodeToken1 = n3;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeChoice = n4;
      if ( nodeChoice != null ) nodeChoice.setParent(this);
      nodeListOptional = n5;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
   }

   public FetchStatement() {}

   public void accept(com.res.cobol.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.res.cobol.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.res.cobol.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.res.cobol.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

