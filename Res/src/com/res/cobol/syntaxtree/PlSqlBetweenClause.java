//
// Generated by JTB 1.3.2
//

package com.res.cobol.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeOptional -> [ &lt;K_NOT&gt; ]
 * nodeToken -> &lt;K_BETWEEN&gt;
 * plSqlSimpleExpressions -> PlSqlSimpleExpressions()
 * nodeToken1 -> &lt;K_AND&gt;
 * plSqlSimpleExpressions1 -> PlSqlSimpleExpressions()
 * </PRE>
 */
public class PlSqlBetweenClause extends com.res.cobol.RESNode implements Node {
   private Node parent;
   public NodeOptional nodeOptional;
   public NodeToken nodeToken;
   public PlSqlSimpleExpressions plSqlSimpleExpressions;
   public NodeToken nodeToken1;
   public PlSqlSimpleExpressions plSqlSimpleExpressions1;

   public PlSqlBetweenClause(NodeOptional n0, NodeToken n1, PlSqlSimpleExpressions n2, NodeToken n3, PlSqlSimpleExpressions n4) {
      nodeOptional = n0;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
      nodeToken = n1;
      if ( nodeToken != null ) nodeToken.setParent(this);
      plSqlSimpleExpressions = n2;
      if ( plSqlSimpleExpressions != null ) plSqlSimpleExpressions.setParent(this);
      nodeToken1 = n3;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      plSqlSimpleExpressions1 = n4;
      if ( plSqlSimpleExpressions1 != null ) plSqlSimpleExpressions1.setParent(this);
   }

   public PlSqlBetweenClause() {}

   public void accept(com.res.cobol.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.res.cobol.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.res.cobol.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.res.cobol.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

