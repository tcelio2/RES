//
// Generated by JTB 1.3.2
//

package com.res.cobol.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> &lt;SORT&gt;
 * fileName -> FileName()
 * nodeList -> ( [ &lt;ON&gt; ] ( &lt;ASCENDING&gt; | &lt;DESCENDING&gt; ) [ &lt;KEY&gt; ] ( QualifiedDataName() [ &lt;COMMACHAR&gt; ] )+ )+
 * nodeOptional -> [ [ &lt;WITH&gt; ] &lt;DUPLICATES&gt; [ &lt;IN&gt; ] [ &lt;ORDER&gt; ] ]
 * nodeOptional1 -> [ [ &lt;COLLATING&gt; ] &lt;SEQUENCE&gt; [ &lt;IS&gt; ] AlphabetName() ]
 * nodeChoice -> ( &lt;USING&gt; ( FileName() )+ | &lt;INPUT&gt; &lt;PROCEDURE&gt; [ &lt;IS&gt; ] ProcedureName() [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) ProcedureName() ] )
 * nodeChoice1 -> ( &lt;GIVING&gt; ( FileName() )+ | &lt;OUTPUT&gt; &lt;PROCEDURE&gt; [ &lt;IS&gt; ] ProcedureName() [ ( &lt;THROUGH&gt; | &lt;THRU&gt; ) ProcedureName() ] )
 * </PRE>
 */
public class SortStatement extends com.res.cobol.RESNode implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public FileName fileName;
   public NodeList nodeList;
   public NodeOptional nodeOptional;
   public NodeOptional nodeOptional1;
   public NodeChoice nodeChoice;
   public NodeChoice nodeChoice1;

   public SortStatement(NodeToken n0, FileName n1, NodeList n2, NodeOptional n3, NodeOptional n4, NodeChoice n5, NodeChoice n6) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      fileName = n1;
      if ( fileName != null ) fileName.setParent(this);
      nodeList = n2;
      if ( nodeList != null ) nodeList.setParent(this);
      nodeOptional = n3;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
      nodeOptional1 = n4;
      if ( nodeOptional1 != null ) nodeOptional1.setParent(this);
      nodeChoice = n5;
      if ( nodeChoice != null ) nodeChoice.setParent(this);
      nodeChoice1 = n6;
      if ( nodeChoice1 != null ) nodeChoice1.setParent(this);
   }

   public SortStatement() {}

   public void accept(com.res.cobol.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.res.cobol.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.res.cobol.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.res.cobol.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

