//
// Generated by JTB 1.3.2
//

package com.res.cobol.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> &lt;RECEIVE&gt;
 * nodeChoice -> ( Identifier() | Literal() )
 * nodeChoice1 -> ( &lt;MESSAGE&gt; | &lt;SEGMENT&gt; )
 * nodeToken1 -> &lt;INTO&gt;
 * identifier -> Identifier()
 * nodeOptional -> [ ";" | &lt;NO&gt; &lt;DATA&gt; Statement() ]
 * </PRE>
 */
public class ReceiveStatement extends com.res.cobol.RESNode implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public NodeChoice nodeChoice;
   public NodeChoice nodeChoice1;
   public NodeToken nodeToken1;
   public Identifier identifier;
   public NodeOptional nodeOptional;

   public ReceiveStatement(NodeToken n0, NodeChoice n1, NodeChoice n2, NodeToken n3, Identifier n4, NodeOptional n5) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeChoice = n1;
      if ( nodeChoice != null ) nodeChoice.setParent(this);
      nodeChoice1 = n2;
      if ( nodeChoice1 != null ) nodeChoice1.setParent(this);
      nodeToken1 = n3;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      identifier = n4;
      if ( identifier != null ) identifier.setParent(this);
      nodeOptional = n5;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
   }

   public ReceiveStatement() {}

   public void accept(com.res.cobol.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(com.res.cobol.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(com.res.cobol.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(com.res.cobol.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

